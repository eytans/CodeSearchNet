{"repo":"basvandijk\/threads","sha":"9df9493a2efd63a8290e2460c1c294b6fd02ee4e","path":"Setup.hs","language":"haskell","identifier":"hooks","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"hooks = simpleUserHooks { haddockHook = haddockHook' }","function_tokens":["hooks","=","simpleUserHooks","{","haddockHook","=","haddockHook'","}"],"url":"https:\/\/github.com\/basvandijk\/threads\/blob\/9df9493a2efd63a8290e2460c1c294b6fd02ee4e\/Setup.hs#L35-L35","hash_key":"basvandijk\/threads:Setup.hs","hash_val":57967,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"y","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"y = if long - referenceLong == 0 then expr else (long - referenceLong)\/(sin(long - referenceLong)) * expr","function_tokens":["y","=","if","long","-","referenceLong","==","0","then","expr","else","(","long","-","referenceLong",")","\/","(","sin","(","long","-","referenceLong",")",")","*","expr"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L28-L28","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"ekmett\/intern","sha":"6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1","path":"Data\/Interned\/Internal\/String.hs","language":"haskell","identifier":"hashWithSalt","parameters":"s (Cons c cs)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"hashWithSalt s (Cons c cs) = foldl' hashWithSalt (hashWithSalt s c) cs","function_tokens":["hashWithSalt","s","(","Cons","c","cs",")","=","foldl'","hashWithSalt","(","hashWithSalt","s","c",")","cs"],"url":"https:\/\/github.com\/ekmett\/intern\/blob\/6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1\/Data\/Interned\/Internal\/String.hs#L44-L44","hash_key":"ekmett\/intern:Data\/Interned\/Internal\/String.hs","hash_val":60522,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"pass","parameters":"rw","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"pass rw = RSST $ \\r (s, w) -> do\n        ( (a, fw), (s', w') ) <- runRSST' rw r (s, mempty)\n        return (a, (s', w `mappend` fw w'))","function_tokens":["pass","rw","=","RSST","$","\\","r","(","s",",","w",")","->","do","(","(","a",",","fw",")",",","(","s'",",","w'",")",")","<-","runRSST'","rw","r","(","s",",","mempty",")","return","(","a",",","(","s'",",","w","`","mappend","`","fw","w'",")",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L179-L183","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"mercator","parameters":"(long, lat)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mercator (long, lat) = (long - meridian, asinh(tan(lat)))\n    where meridian = radians (-98.5795)\n\n-- | Bonne projection with standard parallel at 45 N and central meridian\n-- centered at Washington DC","function_tokens":["mercator","(","long",",","lat",")","=","(","long","-","meridian",",","asinh","(","tan","(","lat",")",")",")","where","meridian","=","radians","(","-","98.5795",")","-- | Bonne projection with standard parallel at 45 N and central meridian","-- centered at Washington DC"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L41-L46","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"patchForRepeatHiding","parameters":"","argument_list":"","return_statement":"","docstring":"We cannot wrap\/repeat 'hiding' imports since then we would get multiple imports hiding different things.","docstring_summary":"We cannot wrap\/repeat 'hiding' imports since then we would get multiple imports hiding different things.","docstring_tokens":["We","cannot","wrap","\/","repeat","hiding","imports","since","then","we","would","get","multiple","imports","hiding","different","things","."],"function":"patchForRepeatHiding = case listAlign of\n        Repeat | isHiding decl -> withColumns Nothing\n        _                      -> id\n\n\n--------------------------------------------------------------------------------","function_tokens":["patchForRepeatHiding","=","case","listAlign","of","Repeat","|","isHiding","decl","->","withColumns","Nothing","_","->","id","--------------------------------------------------------------------------------"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L318-L324","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"y","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"y = y1 - y2","function_tokens":["y","=","y1","-","y2"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L139-L139","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"m >>= k  = RSST $ \\r s -> do\n        ~(a, (s', w))  <- runRSST' m r s\n        runRSST' (k a) r (s',w)","function_tokens":["m",">>=","k","=","RSST","$","\\","r","s","->","do","~","(","a",",","(","s'",",","w",")",")","<-","runRSST'","m","r","s","runRSST'","(","k","a",")","r","(","s'",",","w",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L128-L132","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"lift","parameters":"m","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"lift m = EmptyC $ \\ _ leaf -> m >>= leaf","function_tokens":["lift","m","=","EmptyC","$","\\","_","leaf","->","m",">>=","leaf"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L128-L128","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"onWhen","parameters":"f","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"onWhen f = var $ \\a -> if f a then Just a else Nothing","function_tokens":["onWhen","f","=","var","$","\\","a","->","if","f","a","then","Just","a","else","Nothing"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L111-L111","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Effect\/State.hs","language":"haskell","identifier":"modifyLazy","parameters":"f","argument_list":"","return_statement":"","docstring":"Replace the state value with the result of applying a function to the current state value. This is lazy in the new state; injudicious use of this function may lead to space leaks.  @ 'modifyLazy' f = 'get' '>>=' 'put' . f @  @since 0.3.0.0","docstring_summary":"Replace the state value with the result of applying a function to the current state value. This is lazy in the new state; injudicious use of this function may lead to space leaks.","docstring_tokens":["Replace","the","state","value","with","the","result","of","applying","a","function","to","the","current","state","value",".","This","is","lazy","in","the","new","state",";","injudicious","use","of","this","function","may","lead","to","space","leaks","."],"function":"modifyLazy f = get >>= put . f","function_tokens":["modifyLazy","f","=","get",">>=","put",".","f"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Effect\/State.hs#L94-L94","hash_key":"fused-effects\/fused-effects:src\/Control\/Effect\/State.hs","hash_val":56406,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"dropE","parameters":"0 ve","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"dropE 0 ve = ve","function_tokens":["dropE","0","ve","=","ve"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L162-L162","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"runRSST","parameters":"m r s","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"runRSST m r s = do\n    ~(a,(s',w)) <- runRSST' m r (s,mempty)\n    return (a,s',w)\n\n-- | Evaluate a computation with the given initial state and environment,\n-- returning the final value and output, discarding the final state.","function_tokens":["runRSST","m","r","s","=","do","~","(","a",",","(","s'",",","w",")",")","<-","runRSST'","m","r","(","s",",","mempty",")","return","(","a",",","s'",",","w",")","-- | Evaluate a computation with the given initial state and environment,","-- returning the final value and output, discarding the final state."],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L87-L93","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"padModuleNames'","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"padModuleNames' = padModuleNames options","function_tokens":["padModuleNames'","=","padModuleNames","options"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L151-L151","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Extensions.hs","language":"haskell","identifier":"makeVersionString","parameters":"major minor","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"makeVersionString major minor = show major ++ \".\" ++ show minor","function_tokens":["makeVersionString","major","minor","=","show","major","++","\".\"","++","show","minor"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Extensions.hs#L91-L91","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Extensions.hs","hash_val":63214,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/ALCboolean.hs","language":"haskell","identifier":"marshalALCboolean","parameters":"True","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"marshalALCboolean True  = alc_TRUE","function_tokens":["marshalALCboolean","True","=","alc_TRUE"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/ALCboolean.hs#L27-L27","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/ALCboolean.hs","hash_val":55829,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"liftCatch","parameters":"catchE m h","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"liftCatch catchE m h =\n  RSST $ \\ r s -> runRSST' m r s `catchE` \\ e -> runRSST' (h e) r s","function_tokens":["liftCatch","catchE","m","h","=","RSST","$","\\","r","s","->","runRSST'","m","r","s","`","catchE","`","\\","e","->","runRSST'","(","h","e",")","r","s"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L191-L192","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"mfix","parameters":"f","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mfix f = RSST $ \\r s -> mfix $ \\ ~(a, _) -> runRSST' (f a) r s","function_tokens":["mfix","f","=","RSST","$","\\","r","s","->","mfix","$","\\","~","(","a",",","_",")","->","runRSST'","(","f","a",")","r","s"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L148-L148","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Completion.hs","language":"haskell","identifier":"runCompletionFunction","parameters":"comp (left, right)","argument_list":"","return_statement":"","docstring":"Adapt a completion function so it works with Haskeline.  @since 1.0.0.0","docstring_summary":"Adapt a completion function so it works with Haskeline.","docstring_tokens":["Adapt","a","completion","function","so","it","works","with","Haskeline","."],"function":"runCompletionFunction comp (left, right) = do\n  (output, completions) <-\n    comp\n      ( Text.reverse $ toText left,\n        toText right\n      )\n  pure\n    ( toString $ Text.reverse output,\n      map convertCompletion completions\n    )\n\n-- | Run a list of completion functions, returning the results of the\n-- first function that produced any.\n--\n-- @since 1.0.0.0","function_tokens":["runCompletionFunction","comp","(","left",",","right",")","=","do","(","output",",","completions",")","<-","comp","(","Text","reverse","$","toText","left",",","toText","right",")","pure","(","toString","$","Text","reverse","output",",","map","convertCompletion","completions",")","-- | Run a list of completion functions, returning the results of the","-- first function that produced any.","--","-- @since 1.0.0.0"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Completion.hs#L89-L104","hash_key":"pjones\/byline:src\/Byline\/Internal\/Completion.hs","hash_val":58960,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printImport","parameters":"_ (GHC.IEDocNamed _ _)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printImport _ (GHC.IEDocNamed _ _) =\n    error \"Language.Haskell.Stylish.Printer.Imports.printImportExport: unhandled case 'IEDocNamed'\"","function_tokens":["printImport","_","(","GHC","IEDocNamed","_","_",")","=","error","\"Language.Haskell.Stylish.Printer.Imports.printImportExport: unhandled case 'IEDocNamed'\""],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L349-L350","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"(r',s') = f r s","function_tokens":["(","r'",",","s'",")","=","f","r","s"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L119-L119","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"return","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"return = pure","function_tokens":["return","=","pure"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L127-L127","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"lift","parameters":"m","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"lift m = RSST $ \\_ s -> do\n        a <- m\n        return (a, s)","function_tokens":["lift","m","=","RSST","$","\\","_","s","->","do","a","<-","m","return","(","a",",","s",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L151-L155","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"contextsDevice","parameters":"","argument_list":"","return_statement":"","docstring":"Contains 'Just' the device of the given context or 'Nothing' if the context is invalid.","docstring_summary":"Contains 'Just' the device of the given context or 'Nothing' if the context is invalid.","docstring_tokens":["Contains","Just","the","device","of","the","given","context","or","Nothing","if","the","context","is","invalid","."],"function":"contextsDevice =\n   makeGettableStateVar .\n      fmap unmarshalDevice . alcGetContextsDevice . marshalContext","function_tokens":["contextsDevice","=","makeGettableStateVar",".","fmap","unmarshalDevice",".","alcGetContextsDevice",".","marshalContext"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L175-L177","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"fromCut","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"fromCut = runCut (<$) (error \"mfix CutC: empty\") (error \"mfix CutC: cutfail\")","function_tokens":["fromCut","=","runCut","(","<$",")","(","error","\"mfix CutC: empty\"",")","(","error","\"mfix CutC: cutfail\"",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L100-L100","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"spell-music\/temporal-media","sha":"b0508a6444714ac64d970d505e27f66daefc8ff1","path":"src\/Temporal\/Class.hs","language":"haskell","identifier":"mel","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mel = foldl1 (+:+)","function_tokens":["mel","=","foldl1","(","+:+",")"],"url":"https:\/\/github.com\/spell-music\/temporal-media\/blob\/b0508a6444714ac64d970d505e27f66daefc8ff1\/src\/Temporal\/Class.hs#L24-L24","hash_key":"spell-music\/temporal-media:src\/Temporal\/Class.hs","hash_val":63772,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"examples\/colors.hs","language":"haskell","identifier":"mods","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mods = [ (text \"byline\" &) <$> [fb . fg (i c) . s | c <- colors] | fb <- fgbg, i <- intensity, s <- styles]","function_tokens":["mods","=","[","(","text","\"byline\"","&",")","<$>","[","fb",".","fg","(","i","c",")",".","s","|","c","<-","colors","]","|","fb","<-","fgbg",",","i","<-","intensity",",","s","<-","styles","]"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/examples\/colors.hs#L29-L29","hash_key":"pjones\/byline:examples\/colors.hs","hash_val":60086,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"examples\/colors.hs","language":"haskell","identifier":"fgbg","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"fgbg = [id, swapFgBg]","function_tokens":["fgbg","=","[","id",",","swapFgBg","]"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/examples\/colors.hs#L28-L28","hash_key":"pjones\/byline:examples\/colors.hs","hash_val":60086,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/Listener.hs","language":"haskell","identifier":"listenerVelocity","parameters":"","argument_list":"","return_statement":"","docstring":"'listenerVelocity' contains current velocity (speed and direction) of the listener in the world coordinate system. Any 3-tuple of valid float values is allowed, and the initial velocity is ('Vector3' 0 0 0). 'listenerVelocity' does not affect 'listenerPosition'. OpenAL does not calculate the velocity from subsequent position updates, nor does it adjust the position over time based on the specified velocity. Any such calculation is left to the application. For the purposes of sound processing, position and velocity are independent parameters affecting different aspects of the sounds.  'listenerVelocity' is taken into account by the driver to synthesize the Doppler effect perceived by the listener for each source, based on the velocity of both source and listener, and the Doppler related parameters.","docstring_summary":"'listenerVelocity' contains current velocity (speed and direction) of the listener in the world coordinate system. Any 3-tuple of valid float values is allowed, and the initial velocity is ('Vector3' 0 0 0). 'listenerVelocity' does not affect 'listenerPosition'. OpenAL does not calculate the velocity from subsequent position updates, nor does it adjust the position over time based on the specified velocity. Any such calculation is left to the application. For the purposes of sound processing, position and velocity are independent parameters affecting different aspects of the sounds.  'listenerVelocity' is taken into account by the driver to synthesize the Doppler effect perceived by the listener for each source, based on the velocity of both source and listener, and the Doppler related parameters.","docstring_tokens":["listenerVelocity","contains","current","velocity","(","speed","and","direction",")","of","the","listener","in","the","world","coordinate","system",".","Any","3","-","tuple","of","valid","float","values","is","allowed","and","the","initial","velocity","is","(","Vector3","0","0","0",")",".","listenerVelocity","does","not","affect","listenerPosition",".","OpenAL","does","not","calculate","the","velocity","from","subsequent","position","updates","nor","does","it","adjust","the","position","over","time","based","on","the","specified","velocity",".","Any","such","calculation","is","left","to","the","application",".","For","the","purposes","of","sound","processing","position","and","velocity","are","independent","parameters","affecting","different","aspects","of","the","sounds",".","listenerVelocity","is","taken","into","account","by","the","driver","to","synthesize","the","Doppler","effect","perceived","by","the","listener","for","each","source","based","on","the","velocity","of","both","source","and","listener","and","the","Doppler","related","parameters","."],"function":"listenerVelocity = makeListenerVar GetVelocity 3 (peek3 Vector3) listener3f","function_tokens":["listenerVelocity","=","makeListenerVar","GetVelocity","3","(","peek3","Vector3",")","listener3f"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/Listener.hs#L78-L78","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/Listener.hs","hash_val":62741,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"formatGroup","parameters":"maxCols options moduleStats imports","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"formatGroup maxCols options moduleStats imports =\n    let newLines = formatImports maxCols options moduleStats imports in\n    Editor.changeLines (importBlock imports) (const newLines)","function_tokens":["formatGroup","maxCols","options","moduleStats","imports","=","let","newLines","=","formatImports","maxCols","options","moduleStats","imports","in","Editor","changeLines","(","importBlock","imports",")","(","const","newLines",")"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L123-L125","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Simulation.hs","language":"haskell","identifier":"go","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"go = \\case\n      Say _ k -> k\n      AskLn s d k -> simulate s $ \\t ->\n        if Text.null t\n          then k (fromMaybe t d)\n          else k t\n      AskChar s k -> simulate s $ \\t ->\n        if Text.null t\n          then BylineT empty\n          else k (Text.head t)\n      AskPassword s _ k -> simulate s k\n      PushCompFunc f k ->\n        BylineT\n          ( lift . modify $ \\st ->\n              st {completionFunctions = f : completionFunctions st}\n          )\n          >> k\n      PopCompFunc k ->\n        BylineT\n          ( lift . modify $ \\st ->\n              case completionFunctions st of\n                [] -> st {completionFunctions = []}\n                _ : xs -> st {completionFunctions = xs}\n          )\n          >> k","function_tokens":["go","=","\\","case","Say","_","k","->","k","AskLn","s","d","k","->","simulate","s","$","\\","t","->","if","Text","null","t","then","k","(","fromMaybe","t","d",")","else","k","t","AskChar","s","k","->","simulate","s","$","\\","t","->","if","Text","null","t","then","BylineT","empty","else","k","(","Text","head","t",")","AskPassword","s","_","k","->","simulate","s","k","PushCompFunc","f","k","->","BylineT","(","lift",".","modify","$","\\","st","->","st","{","completionFunctions","=","f",":","completionFunctions","st","}",")",">>","k","PopCompFunc","k","->","BylineT","(","lift",".","modify","$","\\","st","->","case","completionFunctions","st","of","[","]","->","st","{","completionFunctions","=","[","]","}","_",":","xs","->","st","{","completionFunctions","=","xs","}",")",">>","k"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Simulation.hs#L124-L149","hash_key":"pjones\/byline:src\/Byline\/Internal\/Simulation.hs","hash_val":62617,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"moduleStats","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"moduleStats = foldMap importStats . fmap GHC.unLoc $ concatMap toList groups","function_tokens":["moduleStats","=","foldMap","importStats",".","fmap","GHC","unLoc","$","concatMap","toList","groups"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L117-L117","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"putOffset","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"putOffset = putText $ replicate offset ' '","function_tokens":["putOffset","=","putText","$","replicate","offset","' '"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L207-L207","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"sebastiaanvisser\/fclabels","sha":"b2c6d1d6677f301cd8e24dfa835494a55f034b8c","path":"src\/Data\/Label\/Failing.hs","language":"haskell","identifier":"embed","parameters":"l","argument_list":"","return_statement":"","docstring":"Embed a total lens that points to an `Either` field into a lens that might fail.","docstring_summary":"Embed a total lens that points to an `Either` field into a lens that might fail.","docstring_tokens":["Embed","a","total","lens","that","points","to","an","Either","field","into","a","lens","that","might","fail","."],"function":"embed l = lens (Poly.get l) (\\m f -> const (Poly.modify l ((>>= m), f)) <$> Poly.get l f)","function_tokens":["embed","l","=","lens","(","Poly","get","l",")","(","\\","m","f","->","const","(","Poly","modify","l","(","(",">>=","m",")",",","f",")",")","<$>","Poly","get","l","f",")"],"url":"https:\/\/github.com\/sebastiaanvisser\/fclabels\/blob\/b2c6d1d6677f301cd8e24dfa835494a55f034b8c\/src\/Data\/Label\/Failing.hs#L78-L78","hash_key":"sebastiaanvisser\/fclabels:src\/Data\/Label\/Failing.hs","hash_val":56785,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"l <> r = ImportStats\n        { isLongestImport = isLongestImport l `max` isLongestImport r\n        , isAnySource     = isAnySource     l ||    isAnySource     r\n        , isAnyQualified  = isAnyQualified  l ||    isAnyQualified  r\n        , isAnySafe       = isAnySafe       l ||    isAnySafe       r\n        }","function_tokens":["l","<>","r","=","ImportStats","{","isLongestImport","=","isLongestImport","l","`","max","`","isLongestImport","r",",","isAnySource","=","isAnySource","l","||","isAnySource","r",",","isAnyQualified","=","isAnyQualified","l","||","isAnyQualified","r",",","isAnySafe","=","isAnySafe","l","||","isAnySafe","r","}"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L384-L389","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ErrorC f <*> ErrorC a = ErrorC $ \\ fail leaf -> f fail (\\ f' -> a fail (leaf . f'))","function_tokens":["ErrorC","f","<*>","ErrorC","a","=","ErrorC","$","\\","fail","leaf","->","f","fail","(","\\","f'","->","a","fail","(","leaf",".","f'",")",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L57-L57","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"getCurrentContext","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"getCurrentContext = fmap unmarshalContext $ alcGetCurrentContext","function_tokens":["getCurrentContext","=","fmap","unmarshalContext","$","alcGetCurrentContext"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L123-L123","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/ALCboolean.hs","language":"haskell","identifier":"marshalALCboolean","parameters":"False","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------","docstring_summary":"------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------"],"function":"marshalALCboolean False = alc_FALSE","function_tokens":["marshalALCboolean","False","=","alc_FALSE"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/ALCboolean.hs#L26-L26","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/ALCboolean.hs","hash_val":55829,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/GHC.hs","language":"haskell","identifier":"dropAfterLocated","parameters":"loc xs","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"dropAfterLocated loc xs = case loc of\n  Just (L (RealSrcSpan rloc _) _) ->\n    filter (\\(L x _) -> srcSpanEndLine rloc >= srcSpanStartLine x) xs\n  _ -> xs","function_tokens":["dropAfterLocated","loc","xs","=","case","loc","of","Just","(","L","(","RealSrcSpan","rloc","_",")","_",")","->","filter","(","\\","(","L","x","_",")","->","srcSpanEndLine","rloc",">=","srcSpanStartLine","x",")","xs","_","->","xs"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/GHC.hs#L56-L61","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/GHC.hs","hash_val":55906,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Ordering.hs","language":"haskell","identifier":"ieKey","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ieKey = \\case\n        IEVar _ n            -> nameKey n\n        IEThingAbs _ n       -> nameKey n\n        IEThingAll _ n       -> nameKey n\n        IEThingWith _ n _ _  -> nameKey n\n        IEModuleContents _ n -> nameKey n\n        _                    -> (2, \"\")\n\n\n--------------------------------------------------------------------------------","function_tokens":["ieKey","=","\\","case","IEVar","_","n","->","nameKey","n","IEThingAbs","_","n","->","nameKey","n","IEThingAll","_","n","->","nameKey","n","IEThingWith","_","n","_","_","->","nameKey","n","IEModuleContents","_","n","->","nameKey","n","_","->","(","2",",","\"\"",")","--------------------------------------------------------------------------------"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Ordering.hs#L48-L58","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Ordering.hs","hash_val":63296,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"liftA2","parameters":"f (ErrorC a) (ErrorC b)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"liftA2 f (ErrorC a) (ErrorC b) = ErrorC $ \\ fail leaf ->\n    a fail (\\ a' -> b fail (leaf . f a'))","function_tokens":["liftA2","f","(","ErrorC","a",")","(","ErrorC","b",")","=","ErrorC","$","\\","fail","leaf","->","a","fail","(","\\","a'","->","b","fail","(","leaf",".","f","a'",")",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L60-L61","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"listen","parameters":"rw","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"listen rw = RSST $ \\r (s, w) -> do\n        (a, (ns, nw)) <- runRSST' rw r (s, mempty)\n        return ((a, nw), (ns, w <> nw))","function_tokens":["listen","rw","=","RSST","$","\\","r","(","s",",","w",")","->","do","(","a",",","(","ns",",","nw",")",")","<-","runRSST'","rw","r","(","s",",","mempty",")","return","(","(","a",",","nw",")",",","(","ns",",","w","<>","nw",")",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L176-L179","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Simulation.hs","language":"haskell","identifier":"lift","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"lift = BylineT . lift . lift","function_tokens":["lift","=","BylineT",".","lift",".","lift"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Simulation.hs#L112-L112","hash_key":"pjones\/byline:src\/Byline\/Internal\/Simulation.hs","hash_val":62617,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"parens","parameters":"m","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"parens m = char '(' *> m <* char ')'","function_tokens":["parens","m","=","char","'('","*>","m","<*","char","')'"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L129-L129","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"sebastiaanvisser\/fclabels","sha":"b2c6d1d6677f301cd8e24dfa835494a55f034b8c","path":"src\/Data\/Label\/Failing.hs","language":"haskell","identifier":"lens","parameters":"g s","argument_list":"","return_statement":"","docstring":"Create a lens that can fail from a getter and a modifier that can themselves potentially fail.","docstring_summary":"Create a lens that can fail from a getter and a modifier that can themselves potentially fail.","docstring_tokens":["Create","a","lens","that","can","fail","from","a","getter","and","a","modifier","that","can","themselves","potentially","fail","."],"function":"lens g s = Poly.lens (Kleisli g) (Kleisli (\\(m, f) -> s (runKleisli m) f))","function_tokens":["lens","g","s","=","Poly","lens","(","Kleisli","g",")","(","Kleisli","(","\\","(","m",",","f",")","->","s","(","runKleisli","m",")","f",")",")"],"url":"https:\/\/github.com\/sebastiaanvisser\/fclabels\/blob\/b2c6d1d6677f301cd8e24dfa835494a55f034b8c\/src\/Data\/Label\/Failing.hs#L54-L54","hash_key":"sebastiaanvisser\/fclabels:src\/Data\/Label\/Failing.hs","hash_val":56785,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"f","parameters":"(eb, vs1) (eb1, v)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"f (eb, vs1) (eb1, v) = (msum [eb, eb1], vs1 ++ [v])","function_tokens":["f","(","eb",",","vs1",")","(","eb1",",","v",")","=","(","msum","[","eb",",","eb1","]",",","vs1","++","[","v","]",")"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L191-L191","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"ieMerge","parameters":"l                  (GHC.IEThingAbs _ _)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ieMerge l                  (GHC.IEThingAbs _ _)   = Just l","function_tokens":["ieMerge","l","(","GHC","IEThingAbs","_","_",")","=","Just","l"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L463-L463","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"catchError","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"catchError = liftCatch catchError","function_tokens":["catchError","=","liftCatch","catchError"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L187-L187","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"ask","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ask = RSST $ \\r s -> return (r, s)","function_tokens":["ask","=","RSST","$","\\","r","s","->","return","(","r",",","s",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L167-L167","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"(referenceLong, referenceLat) = referencePoint","function_tokens":["(","referenceLong",",","referenceLat",")","=","referencePoint"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L66-L66","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"parse","parameters":"input","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"parse input = (>>= exhaustive) . runState input . runParseC\n  where exhaustive (\"\", a) = pure a\n        exhaustive _       = empty","function_tokens":["parse","input","=","(",">>=","exhaustive",")",".","runState","input",".","runParseC","where","exhaustive","(","\"\"",",","a",")","=","pure","a","exhaustive","_","=","empty"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L133-L137","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"evalRSS","parameters":"m r s","argument_list":"","return_statement":"","docstring":"^final value and output","docstring_summary":"^final value and output","docstring_tokens":["^final","value","and","output"],"function":"evalRSS m r s = let\n    (a, _, w) = runRSS m r s\n    in (a, w)","function_tokens":["evalRSS","m","r","s","=","let","(","a",",","_",",","w",")","=","runRSS","m","r","s","in","(","a",",","w",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L59-L61","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"y","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"y = f x","function_tokens":["y","=","f","x"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L483-L483","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"liftIO","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"liftIO = lift . liftIO","function_tokens":["liftIO","=","lift",".","liftIO"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L95-L95","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"put","parameters":"ns","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"put ns = RSST $ \\_ (_,w) -> return ((),(ns,w))","function_tokens":["put","ns","=","RSST","$","\\","_","(","_",",","w",")","->","return","(","(",")",",","(","ns",",","w",")",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L160-L160","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"e","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"e = (long - meridian) * (cos lat) \/ rho","function_tokens":["e","=","(","long","-","meridian",")","*","(","cos","lat",")","\/","rho"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L49-L49","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"switch","parameters":"","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------ Switching ------------------------------------------------------------------------------ Higher-order switching. Use an event stream of value streams and produces event values of the latest produced value stream. Switches to a new value stream each time one is produced. The currently used value stream maintains local state until the outer event stream produces a new value stream.  In this example we're sequencing the value streams we'd like to use and then switching them when the outer event stream fires.  >>> import Control.Varying.Spline >>> :{ let v :: VarT IO () (Event Int) v = switch $ flip outputStream Nothing $ do step $ Just $ 1 >>> accumulate (+) 0 step Nothing step Nothing step $ Just 5 step Nothing in testVarOver v [(), (), (), (), ()] -- testing over five frames >>> :} Just 1 Just 2 Just 3 Just 5 Just 5","docstring_summary":"------------------------------------------------------------------------------ Switching ------------------------------------------------------------------------------ Higher-order switching. Use an event stream of value streams and produces event values of the latest produced value stream. Switches to a new value stream each time one is produced. The currently used value stream maintains local state until the outer event stream produces a new value stream.  In this example we're sequencing the value streams we'd like to use and then switching them when the outer event stream fires.  >>> import Control.Varying.Spline >>> :{ let v :: VarT IO () (Event Int) v = switch $ flip outputStream Nothing $ do step $ Just $ 1 >>> accumulate (+) 0 step Nothing step Nothing step $ Just 5 step Nothing in testVarOver v [(), (), (), (), ()] -- testing over five frames >>> :} Just 1 Just 2 Just 3 Just 5 Just 5","docstring_tokens":["------------------------------------------------------------------------------","Switching","------------------------------------------------------------------------------","Higher","-","order","switching",".","Use","an","event","stream","of","value","streams","and","produces","event","values","of","the","latest","produced","value","stream",".","Switches","to","a","new","value","stream","each","time","one","is","produced",".","The","currently","used","value","stream","maintains","local","state","until","the","outer","event","stream","produces","a","new","value","stream",".","In","this","example","we","re","sequencing","the","value","streams","we","d","like","to","use","and","then","switching","them","when","the","outer","event","stream","fires",".",">>>","import","Control",".","Varying",".","Spline",">>>",":","{","let","v","::","VarT","IO","()","(","Event","Int",")","v","=","switch","$","flip","outputStream","Nothing","$","do","step","$","Just","$","1",">>>","accumulate","(","+",")","0","step","Nothing","step","Nothing","step","$","Just","5","step","Nothing","in","testVarOver","v","[","()","()","()","()","()","]","--","testing","over","five","frames",">>>",":","}","Just","1","Just","2","Just","3","Just","5","Just","5"],"function":"switch = switchGo $ pure Nothing\n  where switchGo vInner v = VarT $ \\a -> runVarT v a >>= \\case\n          (Nothing, vOuter) -> do\n            (mayB, vInner1) <- runVarT vInner a\n            return (mayB, switchGo vInner1 vOuter)\n          (Just vInner2, vOuter) -> do\n            (mayB, vInner3) <- runVarT (Just <$> vInner2) a\n            return (mayB, switchGo vInner3 vOuter)\n\n--------------------------------------------------------------------------------\n-- Bubbling\n--------------------------------------------------------------------------------\n-- | Produce events of a stream @v@ only when an event stream @h@ produces an\n-- event.\n-- @v@ and @h@ maintain state while cold.","function_tokens":["switch","=","switchGo","$","pure","Nothing","where","switchGo","vInner","v","=","VarT","$","\\","a","->","runVarT","v","a",">>=","\\","case","(","Nothing",",","vOuter",")","->","do","(","mayB",",","vInner1",")","<-","runVarT","vInner","a","return","(","mayB",",","switchGo","vInner1","vOuter",")","(","Just","vInner2",",","vOuter",")","->","do","(","mayB",",","vInner3",")","<-","runVarT","(","Just","<$>","vInner2",")","a","return","(","mayB",",","switchGo","vInner3","vOuter",")","--------------------------------------------------------------------------------","-- Bubbling","--------------------------------------------------------------------------------","-- | Produce events of a stream @v@ only when an event stream @h@ produces an","-- event.","-- @v@ and @h@ maintain state while cold."],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L260-L275","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"lift","parameters":"m","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"lift m = CutC (\\ cons nil _ -> m >>= flip cons nil)","function_tokens":["lift","m","=","CutC","(","\\","cons","nil","_","->","m",">>=","flip","cons","nil",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L110-L110","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printImport","parameters":"_ (GHC.IEGroup _ _ _ )","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printImport _ (GHC.IEGroup _ _ _ ) =\n    error \"Language.Haskell.Stylish.Printer.Imports.printImportExport: unhandled case 'IEGroup'\"","function_tokens":["printImport","_","(","GHC","IEGroup","_","_","_",")","=","error","\"Language.Haskell.Stylish.Printer.Imports.printImportExport: unhandled case 'IEGroup'\""],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L345-L346","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"unLocatedGroup","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"unLocatedGroup = fmap GHC.unLoc $ toList group","function_tokens":["unLocatedGroup","=","fmap","GHC","unLoc","$","toList","group"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L148-L148","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Completion.hs","language":"haskell","identifier":"convertCompletion","parameters":"(Completion r d i)","argument_list":"","return_statement":"","docstring":"Convert a Byline completion result into a Haskeline completion result.  @since 1.0.0.0","docstring_summary":"Convert a Byline completion result into a Haskeline completion result.","docstring_tokens":["Convert","a","Byline","completion","result","into","a","Haskeline","completion","result","."],"function":"convertCompletion (Completion r d i) =\n  Haskeline.Completion\n    { Haskeline.replacement = toString r,\n      Haskeline.display = toString d,\n      Haskeline.isFinished = i\n    }","function_tokens":["convertCompletion","(","Completion","r","d","i",")","=","Haskeline","Completion","{","Haskeline","replacement","=","toString","r",",","Haskeline","display","=","toString","d",",","Haskeline","isFinished","=","i","}"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Completion.hs#L75-L80","hash_key":"pjones\/byline:src\/Byline\/Internal\/Completion.hs","hash_val":58960,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"takeE","parameters":"0 _","argument_list":"","return_statement":"","docstring":"Stream through some number of successful 'Event's and then inhibit forever.","docstring_summary":"Stream through some number of successful 'Event's and then inhibit forever.","docstring_tokens":["Stream","through","some","number","of","successful","Event","s","and","then","inhibit","forever","."],"function":"takeE 0 _ = never","function_tokens":["takeE","0","_","=","never"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L152-L152","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"ghulette\/language-c-comments","sha":"64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865","path":"examples\/Main.hs","language":"haskell","identifier":"row","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"row  = posRow posn","function_tokens":["row","=","posRow","posn"],"url":"https:\/\/github.com\/ghulette\/language-c-comments\/blob\/64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865\/examples\/Main.hs#L14-L14","hash_key":"ghulette\/language-c-comments:examples\/Main.hs","hash_val":57320,"partition":"test"}
{"repo":"isovector\/do-notation","sha":"919d3326fd191411cc507b74bc3eaffe0cdec1ce","path":"src\/Language\/Haskell\/DoNotation.hs","language":"haskell","identifier":"pure","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"pure = return","function_tokens":["pure","=","return"],"url":"https:\/\/github.com\/isovector\/do-notation\/blob\/919d3326fd191411cc507b74bc3eaffe0cdec1ce\/src\/Language\/Haskell\/DoNotation.hs#L42-L42","hash_key":"isovector\/do-notation:src\/Language\/Haskell\/DoNotation.hs","hash_val":58433,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/Listener.hs","language":"haskell","identifier":"listenerfv","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"listenerfv = alListenerfv . marshalGetPName","function_tokens":["listenerfv","=","alListenerfv",".","marshalGetPName"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/Listener.hs#L133-L133","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/Listener.hs","hash_val":62741,"partition":"test"}
{"repo":"sebastiaanvisser\/fclabels","sha":"b2c6d1d6677f301cd8e24dfa835494a55f034b8c","path":"src\/Data\/Label\/Total.hs","language":"haskell","identifier":"lens","parameters":"g s","argument_list":"","return_statement":"","docstring":"Create a total lens from a getter and a modifier.  We expect the following law to hold:  > get l (set l a f) == a  > set l (get l f) f == f","docstring_summary":"Create a total lens from a getter and a modifier.  We expect the following law to hold:  > get l (set l a f) == a  > set l (get l f) f == f","docstring_tokens":["Create","a","total","lens","from","a","getter","and","a","modifier",".","We","expect","the","following","law","to","hold",":",">","get","l","(","set","l","a","f",")","==","a",">","set","l","(","get","l","f",")","f","==","f"],"function":"lens g s = Poly.lens g (uncurry s)","function_tokens":["lens","g","s","=","Poly","lens","g","(","uncurry","s",")"],"url":"https:\/\/github.com\/sebastiaanvisser\/fclabels\/blob\/b2c6d1d6677f301cd8e24dfa835494a55f034b8c\/src\/Data\/Label\/Total.hs#L54-L54","hash_key":"sebastiaanvisser\/fclabels:src\/Data\/Label\/Total.hs","hash_val":65100,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"mplus","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mplus = (<|>)","function_tokens":["mplus","=","(","<|>",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L137-L137","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"colorAsANSI","parameters":"(ColorRGB c)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"colorAsANSI (ColorRGB c) = nearestColor c ansiColorLocations","function_tokens":["colorAsANSI","(","ColorRGB","c",")","=","nearestColor","c","ansiColorLocations"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L97-L97","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"offset","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"offset = case listPadding of\n            LPConstant n -> n\n            LPModuleName -> moduleNamePosition","function_tokens":["offset","=","case","listPadding","of","LPConstant","n","->","n","LPModuleName","->","moduleNamePosition"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L208-L212","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"ekmett\/intern","sha":"6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1","path":"Data\/Interned\/Internal\/String.hs","language":"haskell","identifier":"showsPrec","parameters":"d (IS _ b)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"showsPrec d (IS _ b) = showsPrec d b","function_tokens":["showsPrec","d","(","IS","_","b",")","=","showsPrec","d","b"],"url":"https:\/\/github.com\/ekmett\/intern\/blob\/6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1\/Data\/Interned\/Internal\/String.hs#L26-L26","hash_key":"ekmett\/intern:Data\/Interned\/Internal\/String.hs","hash_val":60522,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"check","parameters":"b","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"check b = if p b then Just b else Nothing","function_tokens":["check","b","=","if","p","b","then","Just","b","else","Nothing"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L173-L173","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"alg","parameters":"hdl sig ctx","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"alg hdl sig ctx = EmptyC $ \\ nil leaf -> case sig of\n    L Empty -> nil\n    R other -> thread (dst ~<~ hdl) other (pure ctx) >>= run . runEmpty (coerce nil) (coerce leaf)\n    where\n    dst :: Applicative m => EmptyC Identity (EmptyC m a) -> m (EmptyC Identity a)\n    dst = run . runEmpty (pure (pure empty)) (pure . runEmpty (pure empty) (pure . pure))","function_tokens":["alg","hdl","sig","ctx","=","EmptyC","$","\\","nil","leaf","->","case","sig","of","L","Empty","->","nil","R","other","->","thread","(","dst","~<~","hdl",")","other","(","pure","ctx",")",">>=","run",".","runEmpty","(","coerce","nil",")","(","coerce","leaf",")","where","dst","::","Applicative","m","=>","EmptyC","Identity","(","EmptyC","m","a",")","->","m","(","EmptyC","Identity","a",")","dst","=","run",".","runEmpty","(","pure","(","pure","empty",")",")","(","pure",".","runEmpty","(","pure","empty",")","(","pure",".","pure",")",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L132-L138","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/GHC.hs","language":"haskell","identifier":"priorAndFollowing","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"priorAndFollowing = sortOn (GHC.anchor . GHC.getLoc) . \\case\n    GHC.EpaComments         {..} -> priorComments\n    GHC.EpaCommentsBalanced {..} -> priorComments ++ followingComments","function_tokens":["priorAndFollowing","=","sortOn","(","GHC","anchor",".","GHC","getLoc",")",".","\\","case","GHC","EpaComments","{","..","}","->","priorComments","GHC","EpaCommentsBalanced","{","..","}","->","priorComments","++","followingComments"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/GHC.hs#L84-L86","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/GHC.hs","hash_val":55906,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"location","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"location = C.cieXYZView (C.sRGB24 r g b)","function_tokens":["location","=","C","cieXYZView","(","C","sRGB24","r","g","b",")"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L134-L134","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"n'","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"n' = n `div` (m + 1)","function_tokens":["n'","=","n","`","div","`","(","m","+","1",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L107-L107","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"toCut","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"toCut = runCut (fmap . (<|>) . pure) (pure empty) (pure cutfail)","function_tokens":["toCut","=","runCut","(","fmap",".","(","<|>",")",".","pure",")","(","pure","empty",")","(","pure","cutfail",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L99-L99","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printIeWrappedName","parameters":"lie","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------","docstring_summary":"------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------"],"function":"printIeWrappedName lie = case GHC.unLoc lie of\n    GHC.IEName      n -> putRdrName n\n    GHC.IEPattern _ n -> putText \"pattern\" >> space >> putRdrName n\n    GHC.IEType    _ n -> putText \"type\" >> space >> putRdrName n","function_tokens":["printIeWrappedName","lie","=","case","GHC","unLoc","lie","of","GHC","IEName","n","->","putRdrName","n","GHC","IEPattern","_","n","->","putText","\"pattern\"",">>","space",">>","putRdrName","n","GHC","IEType","_","n","->","putText","\"type\"",">>","space",">>","putRdrName","n"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L355-L361","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"winkel3","parameters":"(long, lat)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"winkel3 (long, lat) = ((lambda * (cos phi1) + (2 * cos lat * sin (lambda\/2)\/(sinc alpha)))\/2, (lat + (sin lat)\/(sinc alpha))\/2)\n    where lambda = long - lambda0\n          phi1 = acos $ 2 \/ pi\n          alpha = acos $ cos lat * (cos (lambda\/2))\n          lambda0 = radians (-77.0369)\n\n-- | Mercator projection.","function_tokens":["winkel3","(","long",",","lat",")","=","(","(","lambda","*","(","cos","phi1",")","+","(","2","*","cos","lat","*","sin","(","lambda","\/","2",")","\/","(","sinc","alpha",")",")",")","\/","2",",","(","lat","+","(","sin","lat",")","\/","(","sinc","alpha",")",")","\/","2",")","where","lambda","=","long","-","lambda0","phi1","=","acos","$","2","\/","pi","alpha","=","acos","$","cos","lat","*","(","cos","(","lambda","\/","2",")",")","lambda0","=","radians","(","-","77.0369",")","-- | Mercator projection."],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L33-L40","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"arbNested","parameters":"g n","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"arbNested g n = do\n    m <- Gen.integral (Range.linear 0 10)\n    let n' = n `div` (m + 1)\n    replicateM (Range.unSize m) (Gen.list (Range.singleton (Range.unSize n')) g)","function_tokens":["arbNested","g","n","=","do","m","<-","Gen","integral","(","Range","linear","0","10",")","let","n'","=","n","`","div","`","(","m","+","1",")","replicateM","(","Range","unSize","m",")","(","Gen","list","(","Range","singleton","(","Range","unSize","n'",")",")","g",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L105-L110","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"attrs","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"attrs = concatMap (pairToList . marshalContextAttribute) attributes","function_tokens":["attrs","=","concatMap","(","pairToList",".","marshalContextAttribute",")","attributes"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L102-L102","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"formatImports","parameters":"maxCols options moduleStats rawGroup","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"formatImports maxCols options moduleStats rawGroup =\n  runPrinter_ (PrinterConfig maxCols) do\n  let\n    group :: NonEmpty (GHC.LImportDecl GHC.GhcPs)\n    group\n      = NonEmpty.sortBy (compareImports `on` GHC.unLoc) rawGroup\n      & mergeImports\n\n    unLocatedGroup = fmap GHC.unLoc $ toList group\n\n    align' = importAlign options\n    padModuleNames' = padModuleNames options\n    padNames = align' \/= None && padModuleNames'\n\n    stats = case align' of\n        Global -> moduleStats {isAnyQualified = True}\n        File   -> moduleStats\n        Group  -> foldMap importStats unLocatedGroup\n        None   -> mempty\n\n  forM_ group \\imp -> printQualified options padNames stats imp >> newline\n\n\n--------------------------------------------------------------------------------","function_tokens":["formatImports","maxCols","options","moduleStats","rawGroup","=","runPrinter_","(","PrinterConfig","maxCols",")","do","let","group","::","NonEmpty","(","GHC","LImportDecl","GHC","GhcPs",")","group","=","NonEmpty","sortBy","(","compareImports","`","on","`","GHC","unLoc",")","rawGroup","&","mergeImports","unLocatedGroup","=","fmap","GHC","unLoc","$","toList","group","align'","=","importAlign","options","padModuleNames'","=","padModuleNames","options","padNames","=","align'","\/=","None","&&","padModuleNames'","stats","=","case","align'","of","Global","->","moduleStats","{","isAnyQualified","=","True","}","File","->","moduleStats","Group","->","foldMap","importStats","unLocatedGroup","None","->","mempty","forM_","group","\\","imp","->","printQualified","options","padNames","stats","imp",">>","newline","--------------------------------------------------------------------------------"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L140-L164","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printImport","parameters":"separateLists (GHC.IEThingAll _ name)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printImport separateLists (GHC.IEThingAll _ name) = do\n    printIeWrappedName name\n    when separateLists space\n    putText \"(..)\"","function_tokens":["printImport","separateLists","(","GHC","IEThingAll","_","name",")","=","do","printIeWrappedName","name","when","separateLists","space","putText","\"(..)\""],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L329-L333","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"go","parameters":"acc (x : xs)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"go acc (x : xs)\n    | y `Set.member` acc = go acc xs\n    | otherwise          = x : go (Set.insert y acc) xs\n   where\n    y = f x","function_tokens":["go","acc","(","x",":","xs",")","|","y","`","Set","member","`","acc","=","go","acc","xs","|","otherwise","=","x",":","go","(","Set","insert","y","acc",")","xs","where","y","=","f","x"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L479-L483","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"mecca","parameters":"","argument_list":"","return_statement":"","docstring":"For use as a reference point with the Craig retroazimuthal projection","docstring_summary":"For use as a reference point with the Craig retroazimuthal projection","docstring_tokens":["For","use","as","a","reference","point","with","the","Craig","retroazimuthal","projection"],"function":"mecca = over _2 radians $ over _1 radians (21.3891, 39.8579)","function_tokens":["mecca","=","over","_2","radians","$","over","_1","radians","(","21.3891",",","39.8579",")"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L16-L16","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printAsInlineWrapping","parameters":"wprefix","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printAsInlineWrapping wprefix = forM_ printedImports $\n                    \\(imp, start, end) ->\n                    patchForRepeatHiding $ wrapping\n                       (do\n                         if start then putText \"(\" >> doSpaceSurround else space\n                         imp\n                         if end then doSpaceSurround >> putText \")\" else comma)\n                      (do\n                        case listAlign of\n                            -- In 'Repeat' mode, end lines with ')' rather than ','.\n                            Repeat | not start -> modifyCurrentLine . withLast $\n                                \\c -> if c == ',' then ')' else c\n                            _ | start && spaceSurround ->\n                                -- Only necessary if spaceSurround is enabled.\n                                modifyCurrentLine trimRight\n                            _ -> pure ()\n                        newline\n                        void wprefix\n                        case listAlign of\n                          -- '(' already included in repeat\n                          Repeat         -> pure ()\n                          -- Print the much needed '('\n                          _ | start      -> putText \"(\" >> doSpaceSurround\n                          -- Don't bother aligning if we're not in inline mode.\n                          _ | longListAlign \/= Inline -> pure ()\n                          -- 'Inline + AfterAlias' is really where we want to be careful\n                          -- with spacing.\n                          AfterAlias -> space >> doSpaceSurround\n                          WithModuleName -> pure ()\n                          WithAlias -> pure ()\n                          NewLine -> pure ()\n                        imp\n                        if end then doSpaceSurround >> putText \")\" else comma)","function_tokens":["printAsInlineWrapping","wprefix","=","forM_","printedImports","$","\\","(","imp",",","start",",","end",")","->","patchForRepeatHiding","$","wrapping","(","do","if","start","then","putText","\"(\"",">>","doSpaceSurround","else","space","imp","if","end","then","doSpaceSurround",">>","putText","\")\"","else","comma",")","(","do","case","listAlign","of","-- In 'Repeat' mode, end lines with ')' rather than ','.","Repeat","|","not","start","->","modifyCurrentLine",".","withLast","$","\\","c","->","if","c","==","','","then","')'","else","c","_","|","start","&&","spaceSurround","->","-- Only necessary if spaceSurround is enabled.","modifyCurrentLine","trimRight","_","->","pure","(",")","newline","void","wprefix","case","listAlign","of","-- '(' already included in repeat","Repeat","->","pure","(",")","-- Print the much needed '('","_","|","start","->","putText","\"(\"",">>","doSpaceSurround","-- Don't bother aligning if we're not in inline mode.","_","|","longListAlign","\/=","Inline","->","pure","(",")","-- 'Inline + AfterAlias' is really where we want to be careful","-- with spacing.","AfterAlias","->","space",">>","doSpaceSurround","WithModuleName","->","pure","(",")","WithAlias","->","pure","(",")","NewLine","->","pure","(",")","imp","if","end","then","doSpaceSurround",">>","putText","\")\"","else","comma",")"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L249-L281","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"doSpaceSurround","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"doSpaceSurround = when spaceSurround space","function_tokens":["doSpaceSurround","=","when","spaceSurround","space"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L240-L240","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"mokus0\/erf-native","sha":"e371ba6821b2d9f18d19d010b863e5eb00ef681a","path":"src\/Data\/Number\/Erf.hs","language":"haskell","identifier":"erfcx","parameters":"x","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"erfcx x = exp (x*x) * erfc x","function_tokens":["erfcx","x","=","exp","(","x","*","x",")","*","erfc","x"],"url":"https:\/\/github.com\/mokus0\/erf-native\/blob\/e371ba6821b2d9f18d19d010b863e5eb00ef681a\/src\/Data\/Number\/Erf.hs#L23-L23","hash_key":"mokus0\/erf-native:src\/Data\/Number\/Erf.hs","hash_val":59144,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/GHC.hs","language":"haskell","identifier":"unsafeGetRealSrcSpan","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"unsafeGetRealSrcSpan = \\case\n  (L (RealSrcSpan s _) _) -> s\n  _                       -> error \"could not get source code location\"","function_tokens":["unsafeGetRealSrcSpan","=","\\","case","(","L","(","RealSrcSpan","s","_",")","_",")","->","s","_","->","error","\"could not get source code location\""],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/GHC.hs#L45-L49","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/GHC.hs","hash_val":55906,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"pure","parameters":"a","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"pure a = ErrorC $ \\ _ leaf -> leaf a","function_tokens":["pure","a","=","ErrorC","$","\\","_","leaf","->","leaf","a"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L54-L54","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"fail","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"fail = lift . Fail.fail","function_tokens":["fail","=","lift",".","Fail","fail"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L82-L82","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"fail","parameters":"s","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"fail s = lift (Fail.fail s)","function_tokens":["fail","s","=","lift","(","Fail","fail","s",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L91-L91","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Simulation.hs","language":"haskell","identifier":"runBylineT","parameters":"f","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"runBylineT f =\n  unBylineT\n    >>> runMaybeT\n    >>> (`evalStateT` SimulationState \"\" f [])","function_tokens":["runBylineT","f","=","unBylineT",">>>","runMaybeT",">>>","(","`","evalStateT","`","SimulationState","\"\"","f","[","]",")"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Simulation.hs#L161-L164","hash_key":"pjones\/byline:src\/Byline\/Internal\/Simulation.hs","hash_val":62617,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"phi2","parameters":"","argument_list":"","return_statement":"","docstring":"standard parallels @ 20, 50 degrees","docstring_summary":"standard parallels","docstring_tokens":["standard","parallels"],"function":"phi2 = (radians 50)","function_tokens":["phi2","=","(","radians","50",")"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L65-L65","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"sebastiaanvisser\/fclabels","sha":"b2c6d1d6677f301cd8e24dfa835494a55f034b8c","path":"src\/Data\/Label\/Total.hs","language":"haskell","identifier":"traverse","parameters":"l m f","argument_list":"","return_statement":"","docstring":"Modify in some context.","docstring_summary":"Modify in some context.","docstring_tokens":["Modify","in","some","context","."],"function":"traverse l m f = (\\w -> set l w f) `fmap` m (get l f)","function_tokens":["traverse","l","m","f","=","(","\\","w","->","set","l","w","f",")","`","fmap","`","m","(","get","l","f",")"],"url":"https:\/\/github.com\/sebastiaanvisser\/fclabels\/blob\/b2c6d1d6677f301cd8e24dfa835494a55f034b8c\/src\/Data\/Label\/Total.hs#L74-L74","hash_key":"sebastiaanvisser\/fclabels:src\/Data\/Label\/Total.hs","hash_val":65100,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"expr","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"expr = ((sin lat) * (cos (long - referenceLong)) - (tan referenceLat) * (cos lat))","function_tokens":["expr","=","(","(","sin","lat",")","*","(","cos","(","long","-","referenceLong",")",")","-","(","tan","referenceLat",")","*","(","cos","lat",")",")"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L29-L29","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"onlyWhen","parameters":"v f","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"onlyWhen v f = v `onlyWhenE` hot\n    where hot = var id >>> onWhen f","function_tokens":["onlyWhen","v","f","=","v","`","onlyWhenE","`","hot","where","hot","=","var","id",">>>","onWhen","f"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L293-L294","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"importStats","parameters":"i","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"importStats i =\n    ImportStats (importModuleNameLength i) (isSource i) (isQualified i) (GHC.ideclSafe  i)","function_tokens":["importStats","i","=","ImportStats","(","importModuleNameLength","i",")","(","isSource","i",")","(","isQualified","i",")","(","GHC","ideclSafe","i",")"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L396-L397","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"c","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"c = (cos phi1)^2 + 2 * n * (sin phi1)","function_tokens":["c","=","(","cos","phi1",")","^","2","+","2","*","n","*","(","sin","phi1",")"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L61-L61","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"phi1","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"phi1 = acos $ 2 \/ pi","function_tokens":["phi1","=","acos","$","2","\/","pi"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L35-L35","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"lambda","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"lambda = long - lambda0","function_tokens":["lambda","=","long","-","lambda0"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L34-L34","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"distances","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"distances = map (second (distance location))","function_tokens":["distances","=","map","(","second","(","distance","location",")",")"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L142-L142","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"mappend","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mappend = (<>)","function_tokens":["mappend","=","(","<>",")"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L392-L392","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"trigger","parameters":"a'","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"trigger a' = VarT $ \\a'' -> let e = if a' == a''\n                                             then Nothing\n                                             else Just a''\n                                   in return (e, trigger a'')","function_tokens":["trigger","a'","=","VarT","$","\\","a''","->","let","e","=","if","a'","==","a''","then","Nothing","else","Just","a''","in","return","(","e",",","trigger","a''",")"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L104-L107","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"term256Locations","parameters":"","argument_list":"","return_statement":"","docstring":"All of the allowed colors for 256 color terminals.  @since 1.0.0.0","docstring_summary":"All of the allowed colors for 256 color terminals.","docstring_tokens":["All","of","the","allowed","colors","for","256","color","terminals","."],"function":"term256Locations = zipWith (\\c i -> (i, C.cieXYZView c)) colors [16 ..]\n  where\n    colors :: [C.Colour Double]\n    colors =\n      C.sRGB\n        <$> [0.0, 0.2 .. 1.0]\n        <*> [0.0, 0.2 .. 1.0]\n        <*> [0.0, 0.2 .. 1.0]","function_tokens":["term256Locations","=","zipWith","(","\\","c","i","->","(","i",",","C","cieXYZView","c",")",")","colors","[","16","..","]","where","colors","::","[","C","Colour","Double","]","colors","=","C","sRGB","<$>","[","0.0",",","0.2","..","1.0","]","<*>","[","0.0",",","0.2","..","1.0","]","<*>","[","0.0",",","0.2","..","1.0","]"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L170-L177","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"sebastiaanvisser\/fclabels","sha":"b2c6d1d6677f301cd8e24dfa835494a55f034b8c","path":"src\/Data\/Label\/Failing.hs","language":"haskell","identifier":"set'","parameters":"l v f","argument_list":"","return_statement":"","docstring":"Like 'set' but return behaves like the identity function when the field could not be set.","docstring_summary":"Like 'set' but return behaves like the identity function when the field could not be set.","docstring_tokens":["Like","set","but","return","behaves","like","the","identity","function","when","the","field","could","not","be","set","."],"function":"set' l v f = either (const f) id (set l v f)","function_tokens":["set'","l","v","f","=","either","(","const","f",")","id","(","set","l","v","f",")"],"url":"https:\/\/github.com\/sebastiaanvisser\/fclabels\/blob\/b2c6d1d6677f301cd8e24dfa835494a55f034b8c\/src\/Data\/Label\/Failing.hs#L92-L92","hash_key":"sebastiaanvisser\/fclabels:src\/Data\/Label\/Failing.hs","hash_val":56785,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/GHC.hs","language":"haskell","identifier":"epAnnComments","parameters":"GHC.EpAnn {..}","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"epAnnComments GHC.EpAnn {..}   = priorAndFollowing comments","function_tokens":["epAnnComments","GHC","EpAnn","{","..","}","=","priorAndFollowing","comments"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/GHC.hs#L78-L78","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/GHC.hs","hash_val":55906,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"withRSS","parameters":"","argument_list":"","return_statement":"","docstring":"and state modified by applying @f@.  * @'runRSS' ('withRSS' f m) r s = 'uncurry' ('runRSS' m) (f r s)@","docstring_summary":"and state modified by applying","docstring_tokens":["and","state","modified","by","applying"],"function":"withRSS = withRSST","function_tokens":["withRSS","=","withRSST"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L78-L78","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"kaizhang\/matrices","sha":"4d85abd72aecce03284c597497fbe6154d8919bd","path":"src\/Data\/Matrix\/Mutable.hs","language":"haskell","identifier":"unsafeWrite","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"unsafeWrite = MG.unsafeWrite","function_tokens":["unsafeWrite","=","MG","unsafeWrite"],"url":"https:\/\/github.com\/kaizhang\/matrices\/blob\/4d85abd72aecce03284c597497fbe6154d8919bd\/src\/Data\/Matrix\/Mutable.hs#L36-L36","hash_key":"kaizhang\/matrices:src\/Data\/Matrix\/Mutable.hs","hash_val":64671,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"createContext","parameters":"device attributes","argument_list":"","return_statement":"","docstring":"Create a context for a given device and given attributes. Context creation will fail in the following cases: a) if the application requests attributes that, by themselves, can not be provided b) if the combination of specified attributes can not be provided c) if a specified attribute, or the combination of attributes, does not match the default values for unspecified attributes If context creation fails, 'Nothing' will be returned, otherwise 'Just' the new context. Note that 'createContext' does \/not\/ set the current context, this must be done separately via 'currentContext'.","docstring_summary":"Create a context for a given device and given attributes. Context creation will fail in the following cases: a) if the application requests attributes that, by themselves, can not be provided b) if the combination of specified attributes can not be provided c) if a specified attribute, or the combination of attributes, does not match the default values for unspecified attributes If context creation fails, 'Nothing' will be returned, otherwise 'Just' the new context. Note that 'createContext' does \/not\/ set the current context, this must be done separately via 'currentContext'.","docstring_tokens":["Create","a","context","for","a","given","device","and","given","attributes",".","Context","creation","will","fail","in","the","following","cases",":","a",")","if","the","application","requests","attributes","that","by","themselves","can","not","be","provided","b",")","if","the","combination","of","specified","attributes","can","not","be","provided","c",")","if","a","specified","attribute","or","the","combination","of","attributes","does","not","match","the","default","values","for","unspecified","attributes","If","context","creation","fails","Nothing","will","be","returned","otherwise","Just","the","new","context",".","Note","that","createContext","does","\/","not","\/","set","the","current","context","this","must","be","done","separately","via","currentContext","."],"function":"createContext device attributes = liftIO $ do\n   let pairToList (key, value) = [key, value]\n       attrs = concatMap (pairToList . marshalContextAttribute) attributes\n   fmap unmarshalContext .\n      withArray0 0 attrs . alcCreateContext . marshalDevice $ device","function_tokens":["createContext","device","attributes","=","liftIO","$","do","let","pairToList","(","key",",","value",")","=","[","key",",","value","]","attrs","=","concatMap","(","pairToList",".","marshalContextAttribute",")","attributes","fmap","unmarshalContext",".","withArray0","0","attrs",".","alcCreateContext",".","marshalDevice","$","device"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L100-L106","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/GHC.hs","language":"haskell","identifier":"getEndLineUnsafe","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"getEndLineUnsafe = srcSpanEndLine . unsafeGetRealSrcSpan","function_tokens":["getEndLineUnsafe","=","srcSpanEndLine",".","unsafeGetRealSrcSpan"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/GHC.hs#L53-L53","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/GHC.hs","hash_val":55906,"partition":"test"}
{"repo":"kaizhang\/matrices","sha":"4d85abd72aecce03284c597497fbe6154d8919bd","path":"src\/Data\/Matrix\/Mutable.hs","language":"haskell","identifier":"unsafeRead","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"unsafeRead = MG.unsafeRead","function_tokens":["unsafeRead","=","MG","unsafeRead"],"url":"https:\/\/github.com\/kaizhang\/matrices\/blob\/4d85abd72aecce03284c597497fbe6154d8919bd\/src\/Data\/Matrix\/Mutable.hs#L42-L42","hash_key":"kaizhang\/matrices:src\/Data\/Matrix\/Mutable.hs","hash_val":64671,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"colorAsRGB","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"colorAsRGB = \\case\n  ColorCode i c -> Left (i,c)\n  ColorRGB (r, g, b) -> Right (C.sRGB24 r g b)\n\n-- | Find the nearest color given a full RGB color.\n--\n-- @since 1.0.0.0","function_tokens":["colorAsRGB","=","\\","case","ColorCode","i","c","->","Left","(","i",",","c",")","ColorRGB","(","r",",","g",",","b",")","->","Right","(","C","sRGB24","r","g","b",")","-- | Find the nearest color given a full RGB color.","--","-- @since 1.0.0.0"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L113-L120","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"ekmett\/intern","sha":"6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1","path":"Data\/Interned\/Internal\/String.hs","language":"haskell","identifier":"unintern","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"unintern = uninternString","function_tokens":["unintern","=","uninternString"],"url":"https:\/\/github.com\/ekmett\/intern\/blob\/6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1\/Data\/Interned\/Internal\/String.hs#L41-L41","hash_key":"ekmett\/intern:Data\/Interned\/Internal\/String.hs","hash_val":60522,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"blue","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"blue = ColorCode ANSI.Dull ANSI.Blue","function_tokens":["blue","=","ColorCode","ANSI","Dull","ANSI","Blue"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L51-L51","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printAsSingleLine","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printAsSingleLine = forM_ printedImports $ \\(imp, start, end) -> do\n                    when start $ putText \"(\" >> doSpaceSurround\n                    imp\n                    if end then doSpaceSurround >> putText \")\" else comma >> space\n\n            -- Try to put everything one by one, wrapping if that fails.","function_tokens":["printAsSingleLine","=","forM_","printedImports","$","\\","(","imp",",","start",",","end",")","->","do","when","start","$","putText","\"(\"",">>","doSpaceSurround","imp","if","end","then","doSpaceSurround",">>","putText","\")\"","else","comma",">>","space","-- Try to put everything one by one, wrapping if that fails."],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L243-L249","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"empty","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"empty = CutC (\\ _ nil _ -> nil)","function_tokens":["empty","=","CutC","(","\\","_","nil","_","->","nil",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L79-L79","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"newLines","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"newLines = formatImports maxCols options moduleStats imports","function_tokens":["newLines","=","formatImports","maxCols","options","moduleStats","imports"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L124-L124","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/Listener.hs","language":"haskell","identifier":"listenerGain","parameters":"","argument_list":"","return_statement":"","docstring":"'listenerGain' contains a scalar amplitude multiplier, which is effectively applied to all sources in the current context. The initial value 1 means that the sound is unattenuated. A 'listenerGain' value of 0.5 is equivalent to an attenuation of 6dB. The value zero equals silence (no output). Driver implementations are free to optimize this case and skip mixing and processing stages where applicable. The implementation is in charge of ensuring artifact-free (click-free) changes of gain values and is free to defer actual modification of the sound samples, within the limits of acceptable latencies.  A 'listenerGain' larger than 1 (amplification) is permitted. However, the implementation is free to clamp the total gain (effective gain per source times listener gain) to 1 to prevent overflow.","docstring_summary":"'listenerGain' contains a scalar amplitude multiplier, which is effectively applied to all sources in the current context. The initial value 1 means that the sound is unattenuated. A 'listenerGain' value of 0.5 is equivalent to an attenuation of 6dB. The value zero equals silence (no output). Driver implementations are free to optimize this case and skip mixing and processing stages where applicable. The implementation is in charge of ensuring artifact-free (click-free) changes of gain values and is free to defer actual modification of the sound samples, within the limits of acceptable latencies.  A 'listenerGain' larger than 1 (amplification) is permitted. However, the implementation is free to clamp the total gain (effective gain per source times listener gain) to 1 to prevent overflow.","docstring_tokens":["listenerGain","contains","a","scalar","amplitude","multiplier","which","is","effectively","applied","to","all","sources","in","the","current","context",".","The","initial","value","1","means","that","the","sound","is","unattenuated",".","A","listenerGain","value","of","0",".","5","is","equivalent","to","an","attenuation","of","6dB",".","The","value","zero","equals","silence","(","no","output",")",".","Driver","implementations","are","free","to","optimize","this","case","and","skip","mixing","and","processing","stages","where","applicable",".","The","implementation","is","in","charge","of","ensuring","artifact","-","free","(","click","-","free",")","changes","of","gain","values","and","is","free","to","defer","actual","modification","of","the","sound","samples","within","the","limits","of","acceptable","latencies",".","A","listenerGain","larger","than","1","(","amplification",")","is","permitted",".","However","the","implementation","is","free","to","clamp","the","total","gain","(","effective","gain","per","source","times","listener","gain",")","to","1","to","prevent","overflow","."],"function":"listenerGain = makeListenerVar GetGain 1 (peek1 id) listenerf","function_tokens":["listenerGain","=","makeListenerVar","GetGain","1","(","peek1","id",")","listenerf"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/Listener.hs#L99-L99","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/Listener.hs","hash_val":62741,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"toContextAttributes","parameters":"xs","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"toContextAttributes xs = case xs of\n   [] -> []  -- should only happen when device and\/or current context is invalid\n   (0:_) -> []\n   (x:y:rest) -> unmarshalContextAttribute (x,y) : toContextAttributes rest\n   _ -> error (\"toContextAttributes: illegal value \" ++ show xs)","function_tokens":["toContextAttributes","xs","=","case","xs","of","[","]","->","[","]","-- should only happen when device and\/or current context is invalid","(","0",":","_",")","->","[","]","(","x",":","y",":","rest",")","->","unmarshalContextAttribute","(","x",",","y",")",":","toContextAttributes","rest","_","->","error","(","\"toContextAttributes: illegal value \"","++","show","xs",")"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L193-L197","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"basvandijk\/threads","sha":"9df9493a2efd63a8290e2460c1c294b6fd02ee4e","path":"Setup.hs","language":"haskell","identifier":"p","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"p = userSpecifyArgs \"haddock\" [\"--optghc=-D__HADDOCK__\"] (withPrograms lbi)","function_tokens":["p","=","userSpecifyArgs","\"haddock\"","[","\"--optghc=-D__HADDOCK__\"","]","(","withPrograms","lbi",")"],"url":"https:\/\/github.com\/basvandijk\/threads\/blob\/9df9493a2efd63a8290e2460c1c294b6fd02ee4e\/Setup.hs#L42-L42","hash_key":"basvandijk\/threads:Setup.hs","hash_val":57967,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"examples\/colors.hs","language":"haskell","identifier":"styles","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"styles = [id, underline, bold, bold . underline]","function_tokens":["styles","=","[","id",",","underline",",","bold",",","bold",".","underline","]"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/examples\/colors.hs#L26-L26","hash_key":"pjones\/byline:examples\/colors.hs","hash_val":60086,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"empty","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"empty = ErrorC $ \\ _ _ -> empty","function_tokens":["empty","=","ErrorC","$","\\","_","_","->","empty"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L71-L71","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"isovector\/do-notation","sha":"919d3326fd191411cc507b74bc3eaffe0cdec1ce","path":"src\/Language\/Haskell\/DoNotation.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"(>>=) = (>>>=)","function_tokens":["(",">>=",")","=","(",">>>=",")"],"url":"https:\/\/github.com\/isovector\/do-notation\/blob\/919d3326fd191411cc507b74bc3eaffe0cdec1ce\/src\/Language\/Haskell\/DoNotation.hs#L78-L78","hash_key":"isovector\/do-notation:src\/Language\/Haskell\/DoNotation.hs","hash_val":58433,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Effect\/State.hs","language":"haskell","identifier":"get","parameters":"","argument_list":"","return_statement":"","docstring":"Get the current state value.  @ runState a ('get' '>>=' k) = runState a (k a) @  @since 0.1.0.0","docstring_summary":"Get the current state value.","docstring_tokens":["Get","the","current","state","value","."],"function":"get = send Get","function_tokens":["get","=","send","Get"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Effect\/State.hs#L46-L46","hash_key":"fused-effects\/fused-effects:src\/Control\/Effect\/State.hs","hash_val":56406,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"always","parameters":"","argument_list":"","return_statement":"","docstring":"Produces 'Event's with the initial value forever.  @ 'always' e = 'pure' ('Event' e) @","docstring_summary":"Produces 'Event's with the initial value forever.","docstring_tokens":["Produces","Event","s","with","the","initial","value","forever","."],"function":"always = pure . Just","function_tokens":["always","=","pure",".","Just"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L214-L214","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Effect\/State.hs","language":"haskell","identifier":"modify","parameters":"f","argument_list":"","return_statement":"","docstring":"Replace the state value with the result of applying a function to the current state value. This is strict in the new state.  @ 'modify' f = 'get' '>>=' ('put' . f '$!') @  @since 0.1.0.0","docstring_summary":"Replace the state value with the result of applying a function to the current state value. This is strict in the new state.","docstring_tokens":["Replace","the","state","value","with","the","result","of","applying","a","function","to","the","current","state","value",".","This","is","strict","in","the","new","state","."],"function":"modify f = do\n  a <- get\n  put $! f a","function_tokens":["modify","f","=","do","a","<-","get","put","$!","f","a"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Effect\/State.hs#L80-L83","hash_key":"fused-effects\/fused-effects:src\/Control\/Effect\/State.hs","hash_val":56406,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"genFactors","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"genFactors = Gen.list (Range.linear 0 10) genFactor","function_tokens":["genFactors","=","Gen","list","(","Range","linear","0","10",")","genFactor"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L112-L112","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"anyE","parameters":"[]","argument_list":"","return_statement":"","docstring":"Combine two 'Event' streams and produce an 'Event' any time either stream produces. In the case that both streams produce, this produces the 'Event' of the leftmost stream.","docstring_summary":"Combine two 'Event' streams and produce an 'Event' any time either stream produces. In the case that both streams produce, this produces the 'Event' of the leftmost stream.","docstring_tokens":["Combine","two","Event","streams","and","produce","an","Event","any","time","either","stream","produces",".","In","the","case","that","both","streams","produce","this","produces","the","Event","of","the","leftmost","stream","."],"function":"anyE [] = never","function_tokens":["anyE","[","]","=","never"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L188-L188","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"meridian","parameters":"","argument_list":"","return_statement":"","docstring":"standard parallel @ 45 N","docstring_summary":"standard parallel","docstring_tokens":["standard","parallel"],"function":"meridian = radians (-77.0369)","function_tokens":["meridian","=","radians","(","-","77.0369",")"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L51-L51","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"haskell-works\/hw-json-simd","sha":"caa0aa4395f880a2279370ebd34b5a8ade68bbd6","path":"app\/Main.hs","language":"haskell","identifier":"main","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"main = join $ customExecParser\n  (prefs $ showHelpOnEmpty <> showHelpOnError)\n  (info (commands <**> helper) idm)","function_tokens":["main","=","join","$","customExecParser","(","prefs","$","showHelpOnEmpty","<>","showHelpOnError",")","(","info","(","commands","<**>","helper",")","idm",")"],"url":"https:\/\/github.com\/haskell-works\/hw-json-simd\/blob\/caa0aa4395f880a2279370ebd34b5a8ade68bbd6\/app\/Main.hs#L8-L10","hash_key":"haskell-works\/hw-json-simd:app\/Main.hs","hash_val":63732,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"(a, _, w) = runRSS m r s","function_tokens":["(","a",",","_",",","w",")","=","runRSS","m","r","s"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L60-L60","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"ghulette\/language-c-comments","sha":"64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865","path":"examples\/Main.hs","language":"haskell","identifier":"fmt","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"fmt  = show $ commentFormat c","function_tokens":["fmt","=","show","$","commentFormat","c"],"url":"https:\/\/github.com\/ghulette\/language-c-comments\/blob\/64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865\/examples\/Main.hs#L16-L16","hash_key":"ghulette\/language-c-comments:examples\/Main.hs","hash_val":57320,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/TrailingWhitespace.hs","language":"haskell","identifier":"dropTrailingWhitespace'","parameters":"l","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"dropTrailingWhitespace' l = case l of\n      -- Preserve page breaks\n      \"\\12\" -> l\n      _     -> dropTrailingWhitespace l","function_tokens":["dropTrailingWhitespace'","l","=","case","l","of","-- Preserve page breaks","\"\\12\"","->","l","_","->","dropTrailingWhitespace","l"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/TrailingWhitespace.hs#L24-L27","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/TrailingWhitespace.hs","hash_val":57534,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"e","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"e = if a' == a''\n                                             then Nothing\n                                             else Just a''","function_tokens":["e","=","if","a'","==","a''","then","Nothing","else","Just","a''"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L104-L106","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"suspendContext","parameters":"","argument_list":"","return_statement":"","docstring":"The application can suspend any context from processing (including the current one). To indicate that a context should be suspended from processing (i.e. that internal execution state like offset increments is not supposed to be changed), the application has to use 'suspendContext'. Repeated calls to 'suspendContext' are legal, and do not affect a context that is already marked as suspended.","docstring_summary":"The application can suspend any context from processing (including the current one). To indicate that a context should be suspended from processing (i.e. that internal execution state like offset increments is not supposed to be changed), the application has to use 'suspendContext'. Repeated calls to 'suspendContext' are legal, and do not affect a context that is already marked as suspended.","docstring_tokens":["The","application","can","suspend","any","context","from","processing","(","including","the","current","one",")",".","To","indicate","that","a","context","should","be","suspended","from","processing","(","i",".","e",".","that","internal","execution","state","like","offset","increments","is","not","supposed","to","be","changed",")","the","application","has","to","use","suspendContext",".","Repeated","calls","to","suspendContext","are","legal","and","do","not","affect","a","context","that","is","already","marked","as","suspended","."],"function":"suspendContext = liftIO . alcSuspendContext . marshalContext","function_tokens":["suspendContext","=","liftIO",".","alcSuspendContext",".","marshalContext"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L154-L154","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"spell-music\/temporal-media","sha":"b0508a6444714ac64d970d505e27f66daefc8ff1","path":"src\/Temporal\/Class.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"Sequent composition. Play first track then second.","docstring_summary":"Sequent composition. Play first track then second.","docstring_tokens":["Sequent","composition",".","Play","first","track","then","second","."],"function":"a +:+ b = mel [a, b]","function_tokens":["a","+:+","b","=","mel","[","a",",","b","]"],"url":"https:\/\/github.com\/spell-music\/temporal-media\/blob\/b0508a6444714ac64d970d505e27f66daefc8ff1\/src\/Temporal\/Class.hs#L23-L23","hash_key":"spell-music\/temporal-media:src\/Temporal\/Class.hs","hash_val":63772,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"execRSST","parameters":"m r s","argument_list":"","return_statement":"","docstring":"^computation yielding final state and output","docstring_summary":"^computation yielding final state and output","docstring_tokens":["^computation","yielding","final","state","and","output"],"function":"execRSST m r s = do\n        ~(_, (s', w)) <- runRSST' m r (s,mempty)\n        return (s', w)\n\n-- | @'withRSST' f m@ executes action @m@ with an initial environment\n-- and state modified by applying @f@.\n--\n-- * @'runRSST' ('withRSST' f m) r s = 'uncurry' ('runRSST' m) (f r s)@","function_tokens":["execRSST","m","r","s","=","do","~","(","_",",","(","s'",",","w",")",")","<-","runRSST'","m","r","(","s",",","mempty",")","return","(","s'",",","w",")","-- | @'withRSST' f m@ executes action @m@ with an initial environment","-- and state modified by applying @f@.","--","-- * @'runRSST' ('withRSST' f m) r s = 'uncurry' ('runRSST' m) (f r s)@"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L109-L117","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"align'","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"align' = importAlign options","function_tokens":["align'","=","importAlign","options"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L150-L150","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"liftIO","parameters":"io","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"liftIO io = lift (liftIO io)","function_tokens":["liftIO","io","=","lift","(","liftIO","io",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L104-L104","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/PeekPoke.hs","language":"haskell","identifier":"peek1","parameters":"f ptr","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"peek1 f ptr = do\n   x <- peekElemOff ptr 0\n   return $ f x","function_tokens":["peek1","f","ptr","=","do","x","<-","peekElemOff","ptr","0","return","$","f","x"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/PeekPoke.hs#L38-L42","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/PeekPoke.hs","hash_val":65272,"partition":"test"}
{"repo":"kaizhang\/matrices","sha":"4d85abd72aecce03284c597497fbe6154d8919bd","path":"src\/Data\/Matrix\/Mutable.hs","language":"haskell","identifier":"read","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"read = MG.read","function_tokens":["read","=","MG","read"],"url":"https:\/\/github.com\/kaizhang\/matrices\/blob\/4d85abd72aecce03284c597497fbe6154d8919bd\/src\/Data\/Matrix\/Mutable.hs#L39-L39","hash_key":"kaizhang\/matrices:src\/Data\/Matrix\/Mutable.hs","hash_val":64671,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"after","parameters":"t","argument_list":"","return_statement":"","docstring":"Emits events after t input has been accumulated. Note that event emission is not guaranteed to begin exactly at t, since it depends on the input.","docstring_summary":"Emits events after t input has been accumulated. Note that event emission is not guaranteed to begin exactly at t, since it depends on the input.","docstring_tokens":["Emits","events","after","t","input","has","been","accumulated",".","Note","that","event","emission","is","not","guaranteed","to","begin","exactly","at","t","since","it","depends","on","the","input","."],"function":"after t = accumulate (+) 0 >>> onWhen (>= t)","function_tokens":["after","t","=","accumulate","(","+",")","0",">>>","onWhen","(",">=","t",")"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L226-L226","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"sebastiaanvisser\/fclabels","sha":"b2c6d1d6677f301cd8e24dfa835494a55f034b8c","path":"src\/Data\/Label\/Failing.hs","language":"haskell","identifier":"modify'","parameters":"l m f","argument_list":"","return_statement":"","docstring":"Like 'modify' but return behaves like the identity function when the field could not be set.","docstring_summary":"Like 'modify' but return behaves like the identity function when the field could not be set.","docstring_tokens":["Like","modify","but","return","behaves","like","the","identity","function","when","the","field","could","not","be","set","."],"function":"modify' l m f = either (const f) id (modify l m f)","function_tokens":["modify'","l","m","f","=","either","(","const","f",")","id","(","modify","l","m","f",")"],"url":"https:\/\/github.com\/sebastiaanvisser\/fclabels\/blob\/b2c6d1d6677f301cd8e24dfa835494a55f034b8c\/src\/Data\/Label\/Failing.hs#L86-L86","hash_key":"sebastiaanvisser\/fclabels:src\/Data\/Label\/Failing.hs","hash_val":56785,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Ordering.hs","language":"haskell","identifier":"compareOutputableCI","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"compareOutputableCI = compare `on` (map toLower . showOutputable)","function_tokens":["compareOutputableCI","=","compare","`","on","`","(","map","toLower",".","showOutputable",")"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Ordering.hs#L72-L72","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Ordering.hs","hash_val":63296,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Effect\/Reader\/Labelled.hs","language":"haskell","identifier":"local","parameters":"f m","argument_list":"","return_statement":"","docstring":"Run a computation with an environment value locally modified by the passed function.  @ runReader a ('runLabelled' @label ('local' @label f m)) = runReader (f a) m @  @since 1.0.2.0","docstring_summary":"Run a computation with an environment value locally modified by the passed function.","docstring_tokens":["Run","a","computation","with","an","environment","value","locally","modified","by","the","passed","function","."],"function":"local f m = runUnderLabel @label (R.local f (UnderLabel m))","function_tokens":["local","f","m","=","runUnderLabel","@","label","(","R","local","f","(","UnderLabel","m",")",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Effect\/Reader\/Labelled.hs#L56-L56","hash_key":"fused-effects\/fused-effects:src\/Control\/Effect\/Reader\/Labelled.hs","hash_val":56885,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/TrailingWhitespace.hs","language":"haskell","identifier":"dropTrailingWhitespace","parameters":"","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------","docstring_summary":"------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------"],"function":"dropTrailingWhitespace = reverse . dropWhile isSpace . reverse","function_tokens":["dropTrailingWhitespace","=","reverse",".","dropWhile","isSpace",".","reverse"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/TrailingWhitespace.hs#L17-L17","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/TrailingWhitespace.hs","hash_val":57534,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/Listener.hs","language":"haskell","identifier":"orientation","parameters":"","argument_list":"","return_statement":"","docstring":"'orientation' contains an \\\"at\\\" vector and an \\\"up\\\" vector, where the \\\"at\\\" vector represents the \\\"forward\\\" direction of the listener and the orthogonal projection of the \\\"up\\\" vector into the subspace perpendicular to the \\\"at\\\" vector represents the \\\"up\\\" direction for the listener. OpenAL expects two vectors that are linearly independent. These vectors are not expected to be normalized. If the two vectors are linearly dependent, behavior is undefined. The initial orientation is ('Vector3' 0 0 (-1), 'Vector3' 0 1 0), i.e. looking down the Z axis with the Y axis pointing upwards.","docstring_summary":"'orientation' contains an \\\"at\\\" vector and an \\\"up\\\" vector, where the \\\"at\\\" vector represents the \\\"forward\\\" direction of the listener and the orthogonal projection of the \\\"up\\\" vector into the subspace perpendicular to the \\\"at\\\" vector represents the \\\"up\\\" direction for the listener. OpenAL expects two vectors that are linearly independent. These vectors are not expected to be normalized. If the two vectors are linearly dependent, behavior is undefined. The initial orientation is ('Vector3' 0 0 (-1), 'Vector3' 0 1 0), i.e. looking down the Z axis with the Y axis pointing upwards.","docstring_tokens":["orientation","contains","an","\\","at","\\","vector","and","an","\\","up","\\","vector","where","the","\\","at","\\","vector","represents","the","\\","forward","\\","direction","of","the","listener","and","the","orthogonal","projection","of","the","\\","up","\\","vector","into","the","subspace","perpendicular","to","the","\\","at","\\","vector","represents","the","\\","up","\\","direction","for","the","listener",".","OpenAL","expects","two","vectors","that","are","linearly","independent",".","These","vectors","are","not","expected","to","be","normalized",".","If","the","two","vectors","are","linearly","dependent","behavior","is","undefined",".","The","initial","orientation","is","(","Vector3","0","0","(","-","1",")","Vector3","0","1","0",")","i",".","e",".","looking","down","the","Z","axis","with","the","Y","axis","pointing","upwards","."],"function":"orientation = makeListenerVar GetOrientation 6 (peek6 Vector3) listenerVector6","function_tokens":["orientation","=","makeListenerVar","GetOrientation","6","(","peek6","Vector3",")","listenerVector6"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/Listener.hs#L114-L114","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/Listener.hs","hash_val":62741,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"execRSS","parameters":"m r s","argument_list":"","return_statement":"","docstring":"^final state and output","docstring_summary":"^final state and output","docstring_tokens":["^final","state","and","output"],"function":"execRSS m r s = let\n    (_, s', w) = runRSS m r s\n    in (s', w)","function_tokens":["execRSS","m","r","s","=","let","(","_",",","s'",",","w",")","=","runRSS","m","r","s","in","(","s'",",","w",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L70-L72","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"isovector\/do-notation","sha":"919d3326fd191411cc507b74bc3eaffe0cdec1ce","path":"src\/Language\/Haskell\/DoNotation.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"(>>=) = (P.>>=)","function_tokens":["(",">>=",")","=","(","P",">>=",")"],"url":"https:\/\/github.com\/isovector\/do-notation\/blob\/919d3326fd191411cc507b74bc3eaffe0cdec1ce\/src\/Language\/Haskell\/DoNotation.hs#L70-L70","hash_key":"isovector\/do-notation:src\/Language\/Haskell\/DoNotation.hs","hash_val":58433,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"allAttributes","parameters":"device","argument_list":"","return_statement":"","docstring":"Contains the attribute list for the current context of the specified device.","docstring_summary":"Contains the attribute list for the current context of the specified device.","docstring_tokens":["Contains","the","attribute","list","for","the","current","context","of","the","specified","device","."],"function":"allAttributes device = makeGettableStateVar $ do\n   numALCints <- fmap fromIntegral $ getInteger (Just device) AttributesSize\n   fmap toContextAttributes $ getIntegerv (Just device) AllAttributes numALCints","function_tokens":["allAttributes","device","=","makeGettableStateVar","$","do","numALCints","<-","fmap","fromIntegral","$","getInteger","(","Just","device",")","AttributesSize","fmap","toContextAttributes","$","getIntegerv","(","Just","device",")","AllAttributes","numALCints"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L188-L192","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"dst","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"dst = run . runEmpty (pure (pure empty)) (pure . runEmpty (pure empty) (pure . pure))","function_tokens":["dst","=","run",".","runEmpty","(","pure","(","pure","empty",")",")","(","pure",".","runEmpty","(","pure","empty",")","(","pure",".","pure",")",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L137-L137","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Tabs.hs","language":"haskell","identifier":"step","parameters":"spaces","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"step spaces = makeStep \"Tabs\" $ \\ls _ -> map (removeTabs spaces) ls","function_tokens":["step","spaces","=","makeStep","\"Tabs\"","$","\\","ls","_","->","map","(","removeTabs","spaces",")","ls"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Tabs.hs#L21-L21","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Tabs.hs","hash_val":59604,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"rss","parameters":"f","argument_list":"","return_statement":"","docstring":"Construct an RSS computation from a function. (The inverse of 'runRSS'.)","docstring_summary":"Construct an RSS computation from a function. (The inverse of 'runRSS'.)","docstring_tokens":["Construct","an","RSS","computation","from","a","function",".","(","The","inverse","of","runRSS",".",")"],"function":"rss f = RSST $ \\r (s,w) -> let (a,s',w') = f r s\n                           in  Identity (a, (s', w <> w'))","function_tokens":["rss","f","=","RSST","$","\\","r","(","s",",","w",")","->","let","(","a",",","s'",",","w'",")","=","f","r","s","in","Identity","(","a",",","(","s'",",","w","<>","w'",")",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L44-L45","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printImport","parameters":"separateLists (GHC.IEThingWith _ name wildcard imps)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printImport separateLists (GHC.IEThingWith _ name wildcard imps) = do\n    printIeWrappedName name\n    when separateLists space\n    let ellipsis = case wildcard of\n          GHC.IEWildcard _position -> [putText \"..\"]\n          GHC.NoIEWildcard         -> []\n    parenthesize $\n      sep (comma >> space) (ellipsis <> fmap printIeWrappedName imps)","function_tokens":["printImport","separateLists","(","GHC","IEThingWith","_","name","wildcard","imps",")","=","do","printIeWrappedName","name","when","separateLists","space","let","ellipsis","=","case","wildcard","of","GHC","IEWildcard","_position","->","[","putText","\"..\"","]","GHC","NoIEWildcard","->","[","]","parenthesize","$","sep","(","comma",">>","space",")","(","ellipsis","<>","fmap","printIeWrappedName","imps",")"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L337-L345","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Trace\/Printing.hs","language":"haskell","identifier":"lift","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"lift = TraceC","function_tokens":["lift","=","TraceC"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Trace\/Printing.hs#L48-L48","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Trace\/Printing.hs","hash_val":65180,"partition":"test"}
{"repo":"ekmett\/intern","sha":"6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1","path":"Data\/Interned\/Internal\/String.hs","language":"haskell","identifier":"stringCache","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"stringCache = mkCache","function_tokens":["stringCache","=","mkCache"],"url":"https:\/\/github.com\/ekmett\/intern\/blob\/6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1\/Data\/Interned\/Internal\/String.hs#L48-L48","hash_key":"ekmett\/intern:Data\/Interned\/Internal\/String.hs","hash_val":60522,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"mergeImports","parameters":"(x :| [])","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mergeImports (x :| []) = x :| []","function_tokens":["mergeImports","(","x",":|","[","]",")","=","x",":|","[","]"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L364-L364","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printAsMultiLine","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printAsMultiLine = forM_ printedImports $ \\(imp, start, end) -> do\n                    when start $ modifyCurrentLine trimRight  -- We added some spaces.\n                    newline\n                    putOffset\n                    if start then putText \"( \" else putText \", \"\n                    imp\n                    when end $ newline >> putOffset >> putText \")\"","function_tokens":["printAsMultiLine","=","forM_","printedImports","$","\\","(","imp",",","start",",","end",")","->","do","when","start","$","modifyCurrentLine","trimRight","-- We added some spaces.","newline","putOffset","if","start","then","putText","\"( \"","else","putText","\", \"","imp","when","end","$","newline",">>","putOffset",">>","putText","\")\""],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L285-L293","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"ieMerge","parameters":"_                  r@(GHC.IEThingAll _ _)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ieMerge _                  r@(GHC.IEThingAll _ _) = Just r","function_tokens":["ieMerge","_","r","@","(","GHC","IEThingAll","_","_",")","=","Just","r"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L465-L465","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Extensions.hs","language":"haskell","identifier":"alcEnumValue","parameters":"maybeDevice enumName","argument_list":"","return_statement":"","docstring":"Enumeration\\\/token values are device independent, but tokens defined for extensions might not be present for a given device. Using 'Nothing' as the device is legal, but only the tokens defined by the AL core are guaranteed. Availability of extension tokens depends on the ALC extension.","docstring_summary":"Enumeration\\\/token values are device independent, but tokens defined for extensions might not be present for a given device. Using 'Nothing' as the device is legal, but only the tokens defined by the AL core are guaranteed. Availability of extension tokens depends on the ALC extension.","docstring_tokens":["Enumeration","\\","\/","token","values","are","device","independent","but","tokens","defined","for","extensions","might","not","be","present","for","a","given","device",".","Using","Nothing","as","the","device","is","legal","but","only","the","tokens","defined","by","the","AL","core","are","guaranteed",".","Availability","of","extension","tokens","depends","on","the","ALC","extension","."],"function":"alcEnumValue maybeDevice enumName =\n   makeGettableStateVar .\n      withALCString enumName .\n         alcGetEnumValue . marshalDevice . maybe nullDevice id $ maybeDevice","function_tokens":["alcEnumValue","maybeDevice","enumName","=","makeGettableStateVar",".","withALCString","enumName",".","alcGetEnumValue",".","marshalDevice",".","maybe","nullDevice","id","$","maybeDevice"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Extensions.hs#L71-L74","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Extensions.hs","hash_val":63214,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Effect\/State.hs","language":"haskell","identifier":"gets","parameters":"","argument_list":"","return_statement":"","docstring":"Project a function out of the current state value.  @ 'gets' f = 'fmap' f 'get' @  @since 0.1.0.0","docstring_summary":"Project a function out of the current state value.","docstring_tokens":["Project","a","function","out","of","the","current","state","value","."],"function":"gets = (`fmap` get)","function_tokens":["gets","=","(","`","fmap","`","get",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Effect\/State.hs#L57-L57","hash_key":"fused-effects\/fused-effects:src\/Control\/Effect\/State.hs","hash_val":56406,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"x","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"x = x1 - x2","function_tokens":["x","=","x1","-","x2"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L138-L138","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"(referenceLong, referenceLat) = referencePoint","function_tokens":["(","referenceLong",",","referenceLat",")","=","referencePoint"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L27-L27","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/Format.hs","language":"haskell","identifier":"unmarshalFormat","parameters":"x","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"unmarshalFormat x\n   | x == al_FORMAT_MONO8 = Mono8\n   | x == al_FORMAT_MONO16 = Mono16\n   | x == al_FORMAT_STEREO8 = Stereo8\n   | x == al_FORMAT_STEREO16 = Stereo16\n   | otherwise = error (\"unmarshalFormat: illegal value \" ++ show x)","function_tokens":["unmarshalFormat","x","|","x","==","al_FORMAT_MONO8","=","Mono8","|","x","==","al_FORMAT_MONO16","=","Mono16","|","x","==","al_FORMAT_STEREO8","=","Stereo8","|","x","==","al_FORMAT_STEREO16","=","Stereo16","|","otherwise","=","error","(","\"unmarshalFormat: illegal value \"","++","show","x",")"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/Format.hs#L44-L49","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/Format.hs","hash_val":57519,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"startWith","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"startWith    = foldStream (\\_ a -> a)","function_tokens":["startWith","=","foldStream","(","\\","_","a","->","a",")"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L145-L145","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"colorAsIndex256","parameters":"","argument_list":"","return_statement":"","docstring":"Convert a Byline color to an index into a terminal 256-color palette.  @since 1.0.0.0","docstring_summary":"Convert a Byline color to an index into a terminal 256-color palette.","docstring_tokens":["Convert","a","Byline","color","to","an","index","into","a","terminal","256","-","color","palette","."],"function":"colorAsIndex256 = \\case\n  ColorCode i c -> ANSI.xtermSystem i c\n  ColorRGB c -> nearestColor c term256Locations\n\n-- | Convert a Byline color to a 'C.Colour'.  If the color is\n-- specified using an ANSI color name then return that color code\n-- instead.  This allows the terminal to pick the color on its own.\n--\n-- @since 1.0.0.0","function_tokens":["colorAsIndex256","=","\\","case","ColorCode","i","c","->","ANSI","xtermSystem","i","c","ColorRGB","c","->","nearestColor","c","term256Locations","-- | Convert a Byline color to a 'C.Colour'.  If the color is","-- specified using an ANSI color name then return that color code","-- instead.  This allows the terminal to pick the color on its own.","--","-- @since 1.0.0.0"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L103-L112","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"toError","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"toError   = runError (pure . throwError) (pure . pure)","function_tokens":["toError","=","runError","(","pure",".","throwError",")","(","pure",".","pure",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L90-L90","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"runError","parameters":"fail leaf m","argument_list":"","return_statement":"","docstring":"Run an 'Error' effect, applying the first continuation to uncaught errors and the second continuation to successful computations\u2019 results.  @ 'runError' j k ('pure' a) = k a @ @ 'runError' j k ('throwError' e) = j e @ @ 'runError' j k ('throwError' e \\`'catchError'\\` 'pure') = k e @  @since 1.1.0.0","docstring_summary":"Run an 'Error' effect, applying the first continuation to uncaught errors and the second continuation to successful computations\u2019 results.","docstring_tokens":["Run","an","Error","effect","applying","the","first","continuation","to","uncaught","errors","and","the","second","continuation","to","successful","computations\u2019","results","."],"function":"runError fail leaf m = runErrorC m fail leaf","function_tokens":["runError","fail","leaf","m","=","runErrorC","m","fail","leaf"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L46-L46","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"CutC f <*> CutC a = CutC $ \\ cons nil fail ->\n    f (\\ f' fs -> a (cons . f') fs fail) nil fail","function_tokens":["CutC","f","<*>","CutC","a","=","CutC","$","\\","cons","nil","fail","->","f","(","\\","f'","fs","->","a","(","cons",".","f'",")","fs","fail",")","nil","fail"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L74-L75","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Config\/Internal.hs","language":"haskell","identifier":"ancestors","parameters":"","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------ All ancestors of a dir (including that dir)","docstring_summary":"------------------------------------------------------------------------------ All ancestors of a dir (including that dir)","docstring_tokens":["------------------------------------------------------------------------------","All","ancestors","of","a","dir","(","including","that","dir",")"],"function":"ancestors = map joinPath . reverse . dropWhile null . inits . splitPath","function_tokens":["ancestors","=","map","joinPath",".","reverse",".","dropWhile","null",".","inits",".","splitPath"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Config\/Internal.hs#L15-L15","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Config\/Internal.hs","hash_val":57053,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printImport","parameters":"_ (GHC.IEModuleContents _ modu)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printImport _ (GHC.IEModuleContents _ modu) = do\n    putText \"module\"\n    space\n    putText . GHC.moduleNameString $ GHC.unLoc modu","function_tokens":["printImport","_","(","GHC","IEModuleContents","_","modu",")","=","do","putText","\"module\"","space","putText",".","GHC","moduleNameString","$","GHC","unLoc","modu"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L333-L337","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"referenceLong","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"referenceLong = radians 0","function_tokens":["referenceLong","=","radians","0"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L21-L21","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"isHiding","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"isHiding = maybe False fst . GHC.ideclHiding","function_tokens":["isHiding","=","maybe","False","fst",".","GHC","ideclHiding"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L421-L421","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Effect\/Reader\/Labelled.hs","language":"haskell","identifier":"asks","parameters":"f","argument_list":"","return_statement":"","docstring":"Project a function out of the current environment value.  @ 'asks' @label f = 'fmap' f ('ask' @label) @  @since 1.0.2.0","docstring_summary":"Project a function out of the current environment value.","docstring_tokens":["Project","a","function","out","of","the","current","environment","value","."],"function":"asks f = runUnderLabel @label (R.asks f)","function_tokens":["asks","f","=","runUnderLabel","@","label","(","R","asks","f",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Effect\/Reader\/Labelled.hs#L45-L45","hash_key":"fused-effects\/fused-effects:src\/Control\/Effect\/Reader\/Labelled.hs","hash_val":56885,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"dst","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"dst = run . runError (pure . pure . throwError) (pure . runError (pure . throwError) (pure . pure))","function_tokens":["dst","=","run",".","runError","(","pure",".","pure",".","throwError",")","(","pure",".","runError","(","pure",".","throwError",")","(","pure",".","pure",")",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L112-L112","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"predicate","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"predicate = Fn.fn Gen.bool","function_tokens":["predicate","=","Fn","fn","Gen","bool"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L110-L110","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"spell-music\/temporal-media","sha":"b0508a6444714ac64d970d505e27f66daefc8ff1","path":"src\/Temporal\/Class.hs","language":"haskell","identifier":"melMap","parameters":"f xs","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"melMap f xs = mel $ fmap f xs","function_tokens":["melMap","f","xs","=","mel","$","fmap","f","xs"],"url":"https:\/\/github.com\/spell-music\/temporal-media\/blob\/b0508a6444714ac64d970d505e27f66daefc8ff1\/src\/Temporal\/Class.hs#L74-L74","hash_key":"spell-music\/temporal-media:src\/Temporal\/Class.hs","hash_val":63772,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Extensions.hs","language":"haskell","identifier":"alcExtensions","parameters":"device","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------ Contains a list of available context extensions.","docstring_summary":"------------------------------------------------------------------------------ Contains a list of available context extensions.","docstring_tokens":["------------------------------------------------------------------------------","Contains","a","list","of","available","context","extensions","."],"function":"alcExtensions device = makeGettableStateVar $\n   fmap words $ getString (Just device) Extensions","function_tokens":["alcExtensions","device","=","makeGettableStateVar","$","fmap","words","$","getString","(","Just","device",")","Extensions"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Extensions.hs#L42-L43","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Extensions.hs","hash_val":63214,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"ieMerge","parameters":"l@(GHC.IEVar _ _)      _","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ieMerge l@(GHC.IEVar _ _)      _                  = Just l","function_tokens":["ieMerge","l","@","(","GHC","IEVar","_","_",")","_","=","Just","l"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L460-L460","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"runCutA","parameters":"","argument_list":"","return_statement":"","docstring":"Run a 'Cut' effect, returning all its results in an 'Alternative' collection.  @since 1.0.0.0","docstring_summary":"Run a 'Cut' effect, returning all its results in an 'Alternative' collection.","docstring_tokens":["Run","a","Cut","effect","returning","all","its","results","in","an","Alternative","collection","."],"function":"runCutA = runCut (fmap . (<|>) . pure) (pure empty) (pure empty)","function_tokens":["runCutA","=","runCut","(","fmap",".","(","<|>",")",".","pure",")","(","pure","empty",")","(","pure","empty",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L56-L56","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"examples\/colors.hs","language":"haskell","identifier":"example","parameters":"","argument_list":"","return_statement":"","docstring":"Simple example.","docstring_summary":"Simple example.","docstring_tokens":["Simple","example","."],"function":"example = do\n  let colors = [black, red, yellow, green, blue, cyan, magenta, white]\n  let styles = [id, underline, bold, bold . underline]\n  let intensity = [id, vivid]\n  let fgbg = [id, swapFgBg]\n  let mods = [ (text \"byline\" &) <$> [fb . fg (i c) . s | c <- colors] | fb <- fgbg, i <- intensity, s <- styles]\n  mapM_ (sayLn . fold) mods\n\n-- | Main.","function_tokens":["example","=","do","let","colors","=","[","black",",","red",",","yellow",",","green",",","blue",",","cyan",",","magenta",",","white","]","let","styles","=","[","id",",","underline",",","bold",",","bold",".","underline","]","let","intensity","=","[","id",",","vivid","]","let","fgbg","=","[","id",",","swapFgBg","]","let","mods","=","[","(","text","\"byline\"","&",")","<$>","[","fb",".","fg","(","i","c",")",".","s","|","c","<-","colors","]","|","fb","<-","fgbg",",","i","<-","intensity",",","s","<-","styles","]","mapM_","(","sayLn",".","fold",")","mods","-- | Main."],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/examples\/colors.hs#L24-L33","hash_key":"pjones\/byline:examples\/colors.hs","hash_val":60086,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"rho'","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"rho' = sqrt (c - 2 * n * (sin referenceLat)) \/ n","function_tokens":["rho'","=","sqrt","(","c","-","2","*","n","*","(","sin","referenceLat",")",")","\/","n"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L63-L63","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/GHC.hs","language":"haskell","identifier":"showOutputable","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"showOutputable = GHC.showPpr baseDynFlags","function_tokens":["showOutputable","=","GHC","showPpr","baseDynFlags"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/GHC.hs#L74-L74","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/GHC.hs","hash_val":55906,"partition":"test"}
{"repo":"ekmett\/intern","sha":"6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1","path":"Data\/Interned\/Internal\/String.hs","language":"haskell","identifier":"hashWithSalt","parameters":"s (IS i _)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"hashWithSalt s (IS i _) = hashWithSalt s i","function_tokens":["hashWithSalt","s","(","IS","i","_",")","=","hashWithSalt","s","i"],"url":"https:\/\/github.com\/ekmett\/intern\/blob\/6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1\/Data\/Interned\/Internal\/String.hs#L29-L29","hash_key":"ekmett\/intern:Data\/Interned\/Internal\/String.hs","hash_val":60522,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"mergeByName","parameters":"imports0","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mergeByName imports0 = Map.fromListWith\n    -- Note that ideally every NonEmpty will just have a single entry and we\n    -- will be able to merge everything into that entry.  Exotic imports can\n    -- mess this up, though.  So they end up in the tail of the list.\n    (\\(x :| xs) (y :| ys) -> case ieMerge (GHC.unLoc x) (GHC.unLoc y) of\n      Just z  -> (x $> z) :| (xs ++ ys)  -- Keep source from `x`\n      Nothing -> x :| (xs ++ y : ys))\n    [(GHC.ieName $ GHC.unLoc imp, imp :| []) | imp <- imports0]","function_tokens":["mergeByName","imports0","=","Map","fromListWith","-- Note that ideally every NonEmpty will just have a single entry and we","-- will be able to merge everything into that entry.  Exotic imports can","-- mess this up, though.  So they end up in the tail of the list.","(","\\","(","x",":|","xs",")","(","y",":|","ys",")","->","case","ieMerge","(","GHC","unLoc","x",")","(","GHC","unLoc","y",")","of","Just","z","->","(","x","$>","z",")",":|","(","xs","++","ys",")","-- Keep source from `x`","Nothing","->","x",":|","(","xs","++","y",":","ys",")",")","[","(","GHC","ieName","$","GHC","unLoc","imp",",","imp",":|","[","]",")","|","imp","<-","imports0","]"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L441-L448","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Trace\/Printing.hs","language":"haskell","identifier":"alg","parameters":"hdl sig ctx","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"alg hdl sig ctx = case sig of\n    L (Trace s) -> ctx <$ liftIO (hPutStrLn stderr s)\n    R other     -> TraceC (alg (runTrace . hdl) other ctx)","function_tokens":["alg","hdl","sig","ctx","=","case","sig","of","L","(","Trace","s",")","->","ctx","<$","liftIO","(","hPutStrLn","stderr","s",")","R","other","->","TraceC","(","alg","(","runTrace",".","hdl",")","other","ctx",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Trace\/Printing.hs#L52-L55","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Trace\/Printing.hs","hash_val":65180,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"dropE","parameters":"n ve","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"dropE n ve = VarT $ \\a -> do\n    (eb, ve') <- runVarT ve a\n    case eb of\n        Nothing -> return (Nothing, dropE n ve')\n        Just  _ -> return (Nothing, dropE (n-1) ve')\n\n-- | Inhibit all 'Event's that don't pass the predicate.","function_tokens":["dropE","n","ve","=","VarT","$","\\","a","->","do","(","eb",",","ve'",")","<-","runVarT","ve","a","case","eb","of","Nothing","->","return","(","Nothing",",","dropE","n","ve'",")","Just","_","->","return","(","Nothing",",","dropE","(","n","-","1",")","ve'",")","-- | Inhibit all 'Event's that don't pass the predicate."],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L163-L170","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Completion.hs","language":"haskell","identifier":"go","parameters":"prev f","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"go prev f = case prev of\n      (_, []) -> runCompletionFunction f input\n      _ -> pure prev","function_tokens":["go","prev","f","=","case","prev","of","(","_",",","[","]",")","->","runCompletionFunction","f","input","_","->","pure","prev"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Completion.hs#L116-L118","hash_key":"pjones\/byline:src\/Byline\/Internal\/Completion.hs","hash_val":58960,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Effect\/Fresh.hs","language":"haskell","identifier":"fresh","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"fresh = send Fresh","function_tokens":["fresh","=","send","Fresh"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Effect\/Fresh.hs#L36-L36","hash_key":"fused-effects\/fused-effects:src\/Control\/Effect\/Fresh.hs","hash_val":56787,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"withRSST","parameters":"f m","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"withRSST f m = RSST $ \\r (s,w) ->\n    let (r',s') = f r s\n    in  runRSST' m r' (s',w)","function_tokens":["withRSST","f","m","=","RSST","$","\\","r","(","s",",","w",")","->","let","(","r'",",","s'",")","=","f","r","s","in","runRSST'","m","r'","(","s'",",","w",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L118-L120","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"mrkkrp\/zip","sha":"770801e246a6914e1b583e03d204046fc56f22d8","path":"Codec\/Archive\/Zip\/Unix.hs","language":"haskell","identifier":"fromFileMode","parameters":"cmode","argument_list":"","return_statement":"","docstring":"Convert external attributes to the file info. The function assumes a regular file and keeps DOS attributes untouched.  >>> fromFileMode 0o0755 2179792896  @since 1.4.0","docstring_summary":"Convert external attributes to the file info. The function assumes a regular file and keeps DOS attributes untouched.  >>> fromFileMode 0o0755 2179792896","docstring_tokens":["Convert","external","attributes","to","the","file","info",".","The","function","assumes","a","regular","file","and","keeps","DOS","attributes","untouched",".",">>>","fromFileMode","0o0755","2179792896"],"function":"fromFileMode cmode = (0o100000 .|. fromIntegral cmode) `shiftL` 16","function_tokens":["fromFileMode","cmode","=","(","0o100000",".|.","fromIntegral","cmode",")","`","shiftL","`","16"],"url":"https:\/\/github.com\/mrkkrp\/zip\/blob\/770801e246a6914e1b583e03d204046fc56f22d8\/Codec\/Archive\/Zip\/Unix.hs#L40-L40","hash_key":"mrkkrp\/zip:Codec\/Archive\/Zip\/Unix.hs","hash_val":55982,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Ordering.hs","language":"haskell","identifier":"compareImports","parameters":"i0 i1","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------ Compare imports for sorting.  Cannot easily be a lawful instance due to case insensitivity.","docstring_summary":"------------------------------------------------------------------------------ Compare imports for sorting.  Cannot easily be a lawful instance due to case insensitivity.","docstring_tokens":["------------------------------------------------------------------------------","Compare","imports","for","sorting",".","Cannot","easily","be","a","lawful","instance","due","to","case","insensitivity","."],"function":"compareImports i0 i1 =\n    ideclName i0 `compareOutputableCI` ideclName i1 <>\n    fmap showOutputable (ideclPkgQual i0) `compare`\n        fmap showOutputable (ideclPkgQual i1) <>\n    compareOutputableCI i0 i1","function_tokens":["compareImports","i0","i1","=","ideclName","i0","`","compareOutputableCI","`","ideclName","i1","<>","fmap","showOutputable","(","ideclPkgQual","i0",")","`","compare","`","fmap","showOutputable","(","ideclPkgQual","i1",")","<>","compareOutputableCI","i0","i1"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Ordering.hs#L32-L36","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Ordering.hs","hash_val":63296,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"liftIO","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"liftIO = lift . liftIO","function_tokens":["liftIO","=","lift",".","liftIO"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L124-L124","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"writer","parameters":"(a,w)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"writer (a,w) = tell w >> return a","function_tokens":["writer","(","a",",","w",")","=","tell","w",">>","return","a"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L172-L172","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"ieMerge","parameters":"l@(GHC.IEThingAll _ _) _","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ieMerge l@(GHC.IEThingAll _ _) _                  = Just l","function_tokens":["ieMerge","l","@","(","GHC","IEThingAll","_","_",")","_","=","Just","l"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L464-L464","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"runEmpty","parameters":"nil leaf (EmptyC m)","argument_list":"","return_statement":"","docstring":"Run an 'Empty' effect, returning the first continuation for 'empty' programs and applying the second to successful results.  @ 'runEmpty' j k 'empty' = j @ @ 'runEmpty' j k ('pure' a) = k a @  @since 1.1.0.0","docstring_summary":"Run an 'Empty' effect, returning the first continuation for 'empty' programs and applying the second to successful results.","docstring_tokens":["Run","an","Empty","effect","returning","the","first","continuation","for","empty","programs","and","applying","the","second","to","successful","results","."],"function":"runEmpty nil leaf (EmptyC m) = m nil leaf","function_tokens":["runEmpty","nil","leaf","(","EmptyC","m",")","=","m","nil","leaf"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L43-L43","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/Listener.hs","language":"haskell","identifier":"makeListenerVar","parameters":"pname size reader writer","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------","docstring_summary":"------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------"],"function":"makeListenerVar pname size reader writer =\n   makeStateVar\n      (allocaArray size $ \\buf -> do\n          getListenerfv pname buf\n          reader buf)\n      (writer pname)","function_tokens":["makeListenerVar","pname","size","reader","writer","=","makeStateVar","(","allocaArray","size","$","\\","buf","->","do","getListenerfv","pname","buf","reader","buf",")","(","writer","pname",")"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/Listener.hs#L150-L155","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/Listener.hs","hash_val":62741,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"mergeImportsTail","parameters":"(x : y : ys)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mergeImportsTail (x : y : ys)\n      | canMergeImport (GHC.unLoc x) (GHC.unLoc y) = mergeImportsTail ((mergeModuleImport x y) : ys)\n      | otherwise = x : mergeImportsTail (y : ys)","function_tokens":["mergeImportsTail","(","x",":","y",":","ys",")","|","canMergeImport","(","GHC","unLoc","x",")","(","GHC","unLoc","y",")","=","mergeImportsTail","(","(","mergeModuleImport","x","y",")",":","ys",")","|","otherwise","=","x",":","mergeImportsTail","(","y",":","ys",")"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L369-L371","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"groups","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"groups = moduleImportGroups m","function_tokens":["groups","=","moduleImportGroups","m"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L116-L116","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"pairToList","parameters":"(key, value)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"pairToList (key, value) = [key, value]","function_tokens":["pairToList","(","key",",","value",")","=","[","key",",","value","]"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L101-L101","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"isovector\/do-notation","sha":"919d3326fd191411cc507b74bc3eaffe0cdec1ce","path":"src\/Language\/Haskell\/DoNotation.hs","language":"haskell","identifier":"return","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"return = pure","function_tokens":["return","=","pure"],"url":"https:\/\/github.com\/isovector\/do-notation\/blob\/919d3326fd191411cc507b74bc3eaffe0cdec1ce\/src\/Language\/Haskell\/DoNotation.hs#L45-L45","hash_key":"isovector\/do-notation:src\/Language\/Haskell\/DoNotation.hs","hash_val":58433,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"evalRSST","parameters":"m r s","argument_list":"","return_statement":"","docstring":"^computation yielding final value and output","docstring_summary":"^computation yielding final value and output","docstring_tokens":["^computation","yielding","final","value","and","output"],"function":"evalRSST m r s = do\n    ~(a, (_, w)) <- runRSST' m r (s,mempty)\n    return (a, w)\n\n-- | Evaluate a computation with the given initial state and environment,\n-- returning the final state and output, discarding the final value.","function_tokens":["evalRSST","m","r","s","=","do","~","(","a",",","(","_",",","w",")",")","<-","runRSST'","m","r","(","s",",","mempty",")","return","(","a",",","w",")","-- | Evaluate a computation with the given initial state and environment,","-- returning the final state and output, discarding the final value."],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L98-L104","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"spell-music\/temporal-media","sha":"b0508a6444714ac64d970d505e27f66daefc8ff1","path":"src\/Temporal\/Class.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"Parallel composition. Play two tracks simultaneously.","docstring_summary":"Parallel composition. Play two tracks simultaneously.","docstring_tokens":["Parallel","composition",".","Play","two","tracks","simultaneously","."],"function":"a =:= b = har [a, b]","function_tokens":["a","=:=","b","=","har","[","a",",","b","]"],"url":"https:\/\/github.com\/spell-music\/temporal-media\/blob\/b0508a6444714ac64d970d505e27f66daefc8ff1\/src\/Temporal\/Class.hs#L34-L34","hash_key":"spell-music\/temporal-media:src\/Temporal\/Class.hs","hash_val":63772,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Simulation.hs","language":"haskell","identifier":"simulate","parameters":"s f","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"simulate s f = do\n      BylineT (modify $ \\st -> st {precedingPrompt = renderText Plain s})\n      simfun <- BylineT (gets simulationFunction)\n      BylineT (lift simfun) >>= \\case\n        SimulatedInput t -> f t\n        SimulatedEOF -> BylineT empty\n\n-- | Discharge the 'MonadByline' effect using the given 'SimulationFunction'.\n--\n-- @since 1.0.0.0","function_tokens":["simulate","s","f","=","do","BylineT","(","modify","$","\\","st","->","st","{","precedingPrompt","=","renderText","Plain","s","}",")","simfun","<-","BylineT","(","gets","simulationFunction",")","BylineT","(","lift","simfun",")",">>=","\\","case","SimulatedInput","t","->","f","t","SimulatedEOF","->","BylineT","empty","-- | Discharge the 'MonadByline' effect using the given 'SimulationFunction'.","--","-- @since 1.0.0.0"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Simulation.hs#L150-L160","hash_key":"pjones\/byline:src\/Byline\/Internal\/Simulation.hs","hash_val":62617,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/GHC.hs","language":"haskell","identifier":"dropBeforeAndAfter","parameters":"loc","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"dropBeforeAndAfter loc = dropBeforeLocated (Just loc) . dropAfterLocated (Just loc)","function_tokens":["dropBeforeAndAfter","loc","=","dropBeforeLocated","(","Just","loc",")",".","dropAfterLocated","(","Just","loc",")"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/GHC.hs#L68-L68","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/GHC.hs","hash_val":55906,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"noevent","parameters":"","argument_list":"","return_statement":"","docstring":"A synonym for the @Maybe@ constructor @Nothing@.","docstring_summary":"A synonym for the","docstring_tokens":["A","synonym","for","the"],"function":"noevent = Nothing","function_tokens":["noevent","=","Nothing"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L70-L70","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"alpha","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"alpha = acos $ cos lat * (cos (lambda\/2))","function_tokens":["alpha","=","acos","$","cos","lat","*","(","cos","(","lambda","\/","2",")",")"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L36-L36","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"(_, s', w) = runRSS m r s","function_tokens":["(","_",",","s'",",","w",")","=","runRSS","m","r","s"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L71-L71","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"example","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"example = testGroup \"parser\"\n  [ testGroup \"parse\"\n    [ testProperty \"returns pure values at the end of input\" . property $ do\n      a <- forAll genFactor\n      run (runNonDetA (parse \"\" (pure a))) === [a]\n\n    , testProperty \"fails if input remains\" . property $ do\n      c  <- forAll Gen.alphaNum\n      cs <- forAll (Gen.string (Range.linear 0 10) Gen.alphaNum)\n      a  <- forAll genFactor\n      run (runNonDetA (parse (c:cs) (pure a))) === []\n    ]\n\n  , testGroup \"satisfy\"\n    [ testProperty \"matches with a predicate\" . property $ do\n      c <- forAll Gen.alphaNum\n      f <- (. ord) <$> Fn.forAllFn predicate\n      run (runNonDetA (parse [c] (satisfy f))) === [c | f c]\n\n    , testProperty \"fails at end of input\" . property $ do\n      f <- (. ord) <$> Fn.forAllFn predicate\n      run (runNonDetA (parse \"\" (satisfy f))) === []\n\n    , testProperty \"fails if input remains\" . property $ do\n      (c1, c2) <- forAll ((,) <$> Gen.alphaNum <*> Gen.alphaNum)\n      f <- (. ord) <$> Fn.forAllFn predicate\n      run (runNonDetA (parse [c1, c2] (satisfy f))) === []\n\n    , testProperty \"consumes input\" . property $ do\n      c1 <- forAll Gen.alphaNum\n      c2 <- forAll Gen.alphaNum\n      f <- (. ord) <$> Fn.forAllFn predicate\n      run (runNonDetA (parse [c1, c2] ((,) <$> satisfy f <*> satisfy f))) === [(c1, c2) | f c1, f c2]\n    ]\n\n  , testGroup \"factor\"\n    [ testProperty \"matches positive integers\" . property $ do\n      a <- forAll genFactor\n      run (runCutA (parse (show (abs a)) factor)) === [abs a]\n\n    , testProperty \"matches parenthesized expressions\" . property $ do\n      as <- forAll (Gen.sized (arbNested genFactor))\n      run (runCutA (parse ('(' : intercalate \"+\" (intercalate \"*\" . map (show . abs) . (1:) <$> [0]:as) ++ \")\") factor)) === [sum (map (product . map abs) as)]\n    ]\n\n  , testGroup \"term\"\n    [ testProperty \"matches factors\" . property $ do\n      a <- forAll genFactor\n      run (runCutA (parse (show (abs a)) term)) === [abs a]\n\n    , testProperty \"matches multiplication\" . property $ do\n      as <- forAll genFactors\n      run (runCutA (parse (intercalate \"*\" (show . abs <$> 1:as)) term)) === [product (map abs as)]\n    ]\n\n  , testGroup \"expr\"\n    [ testProperty \"matches factors\" . property $ do\n      a <- forAll genFactor\n      run (runCutA (parse (show (abs a)) expr)) === [abs a]\n\n    , testProperty \"matches multiplication\" . property $ do\n      as <- forAll genFactors\n      run (runCutA (parse (intercalate \"*\" (show . abs <$> 1:as)) expr)) === [product (map abs as)]\n\n    , testProperty \"matches addition\" . property $ do\n      as <- forAll genFactors\n      run (runCutA (parse (intercalate \"+\" (show . abs <$> 0:as)) expr)) === [sum (map abs as)]\n\n    , testProperty \"respects order of operations\" . property $ do\n      as <- forAll (Gen.sized (arbNested (Gen.integral (Range.linear 0 100))))\n      run (runCutA (parse (intercalate \"+\" (intercalate \"*\" . map (show . abs) . (1:) <$> [0]:as)) expr)) === [sum (map (product . map abs) as)]\n    ]\n  ]\n  where\n  arbNested :: Gen a -> Range.Size -> Gen [[a]]\n  arbNested _ 0 = pure []\n  arbNested g n = do\n    m <- Gen.integral (Range.linear 0 10)\n    let n' = n `div` (m + 1)\n    replicateM (Range.unSize m) (Gen.list (Range.singleton (Range.unSize n')) g)\n\n  predicate = Fn.fn Gen.bool\n  genFactor = Gen.integral (Range.linear 0 100)\n  genFactors = Gen.list (Range.linear 0 10) genFactor","function_tokens":["example","=","testGroup","\"parser\"","[","testGroup","\"parse\"","[","testProperty","\"returns pure values at the end of input\"",".","property","$","do","a","<-","forAll","genFactor","run","(","runNonDetA","(","parse","\"\"","(","pure","a",")",")",")","===","[","a","]",",","testProperty","\"fails if input remains\"",".","property","$","do","c","<-","forAll","Gen","alphaNum","cs","<-","forAll","(","Gen","string","(","Range","linear","0","10",")","Gen","alphaNum",")","a","<-","forAll","genFactor","run","(","runNonDetA","(","parse","(","c",":","cs",")","(","pure","a",")",")",")","===","[","]","]",",","testGroup","\"satisfy\"","[","testProperty","\"matches with a predicate\"",".","property","$","do","c","<-","forAll","Gen","alphaNum","f","<-","(",".","ord",")","<$>","Fn","forAllFn","predicate","run","(","runNonDetA","(","parse","[","c","]","(","satisfy","f",")",")",")","===","[","c","|","f","c","]",",","testProperty","\"fails at end of input\"",".","property","$","do","f","<-","(",".","ord",")","<$>","Fn","forAllFn","predicate","run","(","runNonDetA","(","parse","\"\"","(","satisfy","f",")",")",")","===","[","]",",","testProperty","\"fails if input remains\"",".","property","$","do","(","c1",",","c2",")","<-","forAll","(","(",",",")","<$>","Gen","alphaNum","<*>","Gen","alphaNum",")","f","<-","(",".","ord",")","<$>","Fn","forAllFn","predicate","run","(","runNonDetA","(","parse","[","c1",",","c2","]","(","satisfy","f",")",")",")","===","[","]",",","testProperty","\"consumes input\"",".","property","$","do","c1","<-","forAll","Gen","alphaNum","c2","<-","forAll","Gen","alphaNum","f","<-","(",".","ord",")","<$>","Fn","forAllFn","predicate","run","(","runNonDetA","(","parse","[","c1",",","c2","]","(","(",",",")","<$>","satisfy","f","<*>","satisfy","f",")",")",")","===","[","(","c1",",","c2",")","|","f","c1",",","f","c2","]","]",",","testGroup","\"factor\"","[","testProperty","\"matches positive integers\"",".","property","$","do","a","<-","forAll","genFactor","run","(","runCutA","(","parse","(","show","(","abs","a",")",")","factor",")",")","===","[","abs","a","]",",","testProperty","\"matches parenthesized expressions\"",".","property","$","do","as","<-","forAll","(","Gen","sized","(","arbNested","genFactor",")",")","run","(","runCutA","(","parse","(","'('",":","intercalate","\"+\"","(","intercalate","\"*\"",".","map","(","show",".","abs",")",".","(","1",":",")","<$>","[","0","]",":","as",")","++","\")\"",")","factor",")",")","===","[","sum","(","map","(","product",".","map","abs",")","as",")","]","]",",","testGroup","\"term\"","[","testProperty","\"matches factors\"",".","property","$","do","a","<-","forAll","genFactor","run","(","runCutA","(","parse","(","show","(","abs","a",")",")","term",")",")","===","[","abs","a","]",",","testProperty","\"matches multiplication\"",".","property","$","do","as","<-","forAll","genFactors","run","(","runCutA","(","parse","(","intercalate","\"*\"","(","show",".","abs","<$>","1",":","as",")",")","term",")",")","===","[","product","(","map","abs","as",")","]","]",",","testGroup","\"expr\"","[","testProperty","\"matches factors\"",".","property","$","do","a","<-","forAll","genFactor","run","(","runCutA","(","parse","(","show","(","abs","a",")",")","expr",")",")","===","[","abs","a","]",",","testProperty","\"matches multiplication\"",".","property","$","do","as","<-","forAll","genFactors","run","(","runCutA","(","parse","(","intercalate","\"*\"","(","show",".","abs","<$>","1",":","as",")",")","expr",")",")","===","[","product","(","map","abs","as",")","]",",","testProperty","\"matches addition\"",".","property","$","do","as","<-","forAll","genFactors","run","(","runCutA","(","parse","(","intercalate","\"+\"","(","show",".","abs","<$>","0",":","as",")",")","expr",")",")","===","[","sum","(","map","abs","as",")","]",",","testProperty","\"respects order of operations\"",".","property","$","do","as","<-","forAll","(","Gen","sized","(","arbNested","(","Gen","integral","(","Range","linear","0","100",")",")",")",")","run","(","runCutA","(","parse","(","intercalate","\"+\"","(","intercalate","\"*\"",".","map","(","show",".","abs",")",".","(","1",":",")","<$>","[","0","]",":","as",")",")","expr",")",")","===","[","sum","(","map","(","product",".","map","abs",")","as",")","]","]","]","where","arbNested","::","Gen","a","->","Range","Size","->","Gen","[","[","a","]","]","arbNested","_","0","=","pure","[","]","arbNested","g","n","=","do","m","<-","Gen","integral","(","Range","linear","0","10",")","let","n'","=","n","`","div","`","(","m","+","1",")","replicateM","(","Range","unSize","m",")","(","Gen","list","(","Range","singleton","(","Range","unSize","n'",")",")","g",")","predicate","=","Fn","fn","Gen","bool","genFactor","=","Gen","integral","(","Range","linear","0","100",")","genFactors","=","Gen","list","(","Range","linear","0","10",")","genFactor"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L29-L115","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"ghulette\/language-c-comments","sha":"64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865","path":"examples\/Main.hs","language":"haskell","identifier":"col","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"col  = posColumn posn","function_tokens":["col","=","posColumn","posn"],"url":"https:\/\/github.com\/ghulette\/language-c-comments\/blob\/64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865\/examples\/Main.hs#L15-L15","hash_key":"ghulette\/language-c-comments:examples\/Main.hs","hash_val":57320,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"tell","parameters":"w","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"tell w = RSST $ \\_ (s, ow) ->\n        let nw = ow <> w\n        in  return ((), (s, nw))","function_tokens":["tell","w","=","RSST","$","\\","_","(","s",",","ow",")","->","let","nw","=","ow","<>","w","in","return","(","(",")",",","(","s",",","nw",")",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L173-L175","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"bothE","parameters":"f va vb","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"bothE f va vb = (\\ea eb -> f <$> ea <*> eb) <$> va <*> vb","function_tokens":["bothE","f","va","vb","=","(","\\","ea","eb","->","f","<$>","ea","<*>","eb",")","<$>","va","<*>","vb"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L182-L182","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"spell-music\/temporal-media","sha":"b0508a6444714ac64d970d505e27f66daefc8ff1","path":"src\/Temporal\/Class.hs","language":"haskell","identifier":"loopBy","parameters":"n","argument_list":"","return_statement":"","docstring":"Repeats the given audio segment several times.","docstring_summary":"Repeats the given audio segment several times.","docstring_tokens":["Repeats","the","given","audio","segment","several","times","."],"function":"loopBy n = mel . replicate n","function_tokens":["loopBy","n","=","mel",".","replicate","n"],"url":"https:\/\/github.com\/spell-music\/temporal-media\/blob\/b0508a6444714ac64d970d505e27f66daefc8ff1\/src\/Temporal\/Class.hs#L43-L43","hash_key":"spell-music\/temporal-media:src\/Temporal\/Class.hs","hash_val":63772,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"ellipsis","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ellipsis = case wildcard of\n          GHC.IEWildcard _position -> [putText \"..\"]\n          GHC.NoIEWildcard         -> []","function_tokens":["ellipsis","=","case","wildcard","of","GHC","IEWildcard","_position","->","[","putText","\"..\"","]","GHC","NoIEWildcard","->","[","]"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L340-L343","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"examples\/colors.hs","language":"haskell","identifier":"main","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"main = runBylineT example >> pure ()","function_tokens":["main","=","runBylineT","example",">>","pure","(",")"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/examples\/colors.hs#L34-L34","hash_key":"pjones\/byline:examples\/colors.hs","hash_val":60086,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"albers","parameters":"referencePoint (long, lat)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"albers referencePoint (long, lat) = (rho * (sin theta), rho' - rho * (cos theta))\n    where n = (sin phi1 + sin phi2)\/2\n          theta = n * (long - referenceLong)\n          c = (cos phi1)^2 + 2 * n * (sin phi1)\n          rho = sqrt (c - 2 * n * (sin lat)) \/ n\n          rho' = sqrt (c - 2 * n * (sin referenceLat)) \/ n\n          phi1 = (radians 20) -- standard parallels @ 20, 50 degrees\n          phi2 = (radians 50)\n          (referenceLong, referenceLat) = referencePoint \n\n-- | Helper to project given a `Polygon`.","function_tokens":["albers","referencePoint","(","long",",","lat",")","=","(","rho","*","(","sin","theta",")",",","rho'","-","rho","*","(","cos","theta",")",")","where","n","=","(","sin","phi1","+","sin","phi2",")","\/","2","theta","=","n","*","(","long","-","referenceLong",")","c","=","(","cos","phi1",")","^","2","+","2","*","n","*","(","sin","phi1",")","rho","=","sqrt","(","c","-","2","*","n","*","(","sin","lat",")",")","\/","n","rho'","=","sqrt","(","c","-","2","*","n","*","(","sin","referenceLat",")",")","\/","n","phi1","=","(","radians","20",")","-- standard parallels @ 20, 50 degrees","phi2","=","(","radians","50",")","(","referenceLong",",","referenceLat",")","=","referencePoint","-- | Helper to project given a `Polygon`."],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L58-L69","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"padNames","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"padNames = align' \/= None && padModuleNames'","function_tokens":["padNames","=","align'","\/=","None","&&","padModuleNames'"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L152-L152","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printImport","parameters":"_ (GHC.IEThingAbs _ name)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printImport _ (GHC.IEThingAbs _ name) = do\n    printIeWrappedName name","function_tokens":["printImport","_","(","GHC","IEThingAbs","_","name",")","=","do","printIeWrappedName","name"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L327-L329","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"changes","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"changes = foldMap (formatGroup maxCols align moduleStats) groups","function_tokens":["changes","=","foldMap","(","formatGroup","maxCols","align","moduleStats",")","groups"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L118-L118","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"prepareImportList","parameters":"","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------ Cleans up an import item list.  * Sorts import items. * Sort inner import lists, e.g. `import Control.Monad (Monad (return, join))` * Removes duplicates from import lists.","docstring_summary":"------------------------------------------------------------------------------ Cleans up an import item list.  * Sorts import items. * Sort inner import lists, e.g. `import Control.Monad (Monad (return, join))` * Removes duplicates from import lists.","docstring_tokens":["------------------------------------------------------------------------------","Cleans","up","an","import","item","list",".","*","Sorts","import","items",".","*","Sort","inner","import","lists","e",".","g",".","import","Control",".","Monad","(","Monad","(","return","join","))","*","Removes","duplicates","from","import","lists","."],"function":"prepareImportList =\n  sortBy compareLIE . map (fmap prepareInner) .\n  concatMap (toList . snd) . Map.toAscList . mergeByName\n where\n  mergeByName\n      :: [GHC.LIE GHC.GhcPs]\n      -> Map.Map GHC.RdrName (NonEmpty (GHC.LIE GHC.GhcPs))\n  mergeByName imports0 = Map.fromListWith\n    -- Note that ideally every NonEmpty will just have a single entry and we\n    -- will be able to merge everything into that entry.  Exotic imports can\n    -- mess this up, though.  So they end up in the tail of the list.\n    (\\(x :| xs) (y :| ys) -> case ieMerge (GHC.unLoc x) (GHC.unLoc y) of\n      Just z  -> (x $> z) :| (xs ++ ys)  -- Keep source from `x`\n      Nothing -> x :| (xs ++ y : ys))\n    [(GHC.ieName $ GHC.unLoc imp, imp :| []) | imp <- imports0]\n\n  prepareInner :: GHC.IE GHC.GhcPs -> GHC.IE GHC.GhcPs\n  prepareInner = \\case\n    -- Simplify `A ()` to `A`.\n    GHC.IEThingWith x n GHC.NoIEWildcard [] -> GHC.IEThingAbs x n\n    GHC.IEThingWith x n w ns ->\n      GHC.IEThingWith x n w (sortBy (compareWrappedName `on` GHC.unLoc) ns)\n    ie -> ie\n\n  -- Merge two import items, assuming they have the same name.\n  ieMerge :: GHC.IE GHC.GhcPs -> GHC.IE GHC.GhcPs -> Maybe (GHC.IE GHC.GhcPs)\n  ieMerge l@(GHC.IEVar _ _)      _                  = Just l\n  ieMerge _                  r@(GHC.IEVar _ _)      = Just r\n  ieMerge (GHC.IEThingAbs _ _)   r                  = Just r\n  ieMerge l                  (GHC.IEThingAbs _ _)   = Just l\n  ieMerge l@(GHC.IEThingAll _ _) _                  = Just l\n  ieMerge _                  r@(GHC.IEThingAll _ _) = Just r\n  ieMerge (GHC.IEThingWith x0 n0 w0 ns0) (GHC.IEThingWith _ _ w1 ns1)\n    | w0 \/= w1  = Nothing\n    | otherwise = Just $\n        -- TODO: sort the `ns0 ++ ns1`?\n        GHC.IEThingWith x0 n0 w0 (nubOn GHC.lieWrappedName $ ns0 ++ ns1)\n  ieMerge _ _ = Nothing\n\n\n--------------------------------------------------------------------------------","function_tokens":["prepareImportList","=","sortBy","compareLIE",".","map","(","fmap","prepareInner",")",".","concatMap","(","toList",".","snd",")",".","Map","toAscList",".","mergeByName","where","mergeByName","::","[","GHC","LIE","GHC","GhcPs","]","->","Map","Map","GHC","RdrName","(","NonEmpty","(","GHC","LIE","GHC","GhcPs",")",")","mergeByName","imports0","=","Map","fromListWith","-- Note that ideally every NonEmpty will just have a single entry and we","-- will be able to merge everything into that entry.  Exotic imports can","-- mess this up, though.  So they end up in the tail of the list.","(","\\","(","x",":|","xs",")","(","y",":|","ys",")","->","case","ieMerge","(","GHC","unLoc","x",")","(","GHC","unLoc","y",")","of","Just","z","->","(","x","$>","z",")",":|","(","xs","++","ys",")","-- Keep source from `x`","Nothing","->","x",":|","(","xs","++","y",":","ys",")",")","[","(","GHC","ieName","$","GHC","unLoc","imp",",","imp",":|","[","]",")","|","imp","<-","imports0","]","prepareInner","::","GHC","IE","GHC","GhcPs","->","GHC","IE","GHC","GhcPs","prepareInner","=","\\","case","-- Simplify `A ()` to `A`.","GHC","IEThingWith","x","n","GHC","NoIEWildcard","[","]","->","GHC","IEThingAbs","x","n","GHC","IEThingWith","x","n","w","ns","->","GHC","IEThingWith","x","n","w","(","sortBy","(","compareWrappedName","`","on","`","GHC","unLoc",")","ns",")","ie","->","ie","-- Merge two import items, assuming they have the same name.","ieMerge","::","GHC","IE","GHC","GhcPs","->","GHC","IE","GHC","GhcPs","->","Maybe","(","GHC","IE","GHC","GhcPs",")","ieMerge","l","@","(","GHC","IEVar","_","_",")","_","=","Just","l","ieMerge","_","r","@","(","GHC","IEVar","_","_",")","=","Just","r","ieMerge","(","GHC","IEThingAbs","_","_",")","r","=","Just","r","ieMerge","l","(","GHC","IEThingAbs","_","_",")","=","Just","l","ieMerge","l","@","(","GHC","IEThingAll","_","_",")","_","=","Just","l","ieMerge","_","r","@","(","GHC","IEThingAll","_","_",")","=","Just","r","ieMerge","(","GHC","IEThingWith","x0","n0","w0","ns0",")","(","GHC","IEThingWith","_","_","w1","ns1",")","|","w0","\/=","w1","=","Nothing","|","otherwise","=","Just","$","-- TODO: sort the `ns0 ++ ns1`?","GHC","IEThingWith","x0","n0","w0","(","nubOn","GHC","lieWrappedName","$","ns0","++","ns1",")","ieMerge","_","_","=","Nothing","--------------------------------------------------------------------------------"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L434-L475","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"get","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"get = RSST $ \\_ (s,w) -> return (s,(s,w))","function_tokens":["get","=","RSST","$","\\","_","(","s",",","w",")","->","return","(","s",",","(","s",",","w",")",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L159-L159","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"alg","parameters":"hdl sig ctx","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"alg hdl sig ctx = CutC $ \\ cons\u00a0nil fail -> case sig of\n    L Cutfail        -> fail\n    L (Call m)       -> runCut cons nil nil (hdl (m <$ ctx))\n    R (L (L Empty))  -> nil\n    R (L (R Choose)) -> cons (True <$ ctx) (cons (False <$ ctx) nil)\n    R (R other)      -> thread (dst ~<~ hdl) other (pure ctx) >>= run . runCut (coerce cons) (coerce nil) (coerce fail)\n    where\n    dst :: Applicative m => CutC Identity (CutC m a) -> m (CutC Identity a)\n    dst = run . runCut (fmap . liftA2 (<|>) . runCut (fmap . (<|>) . pure) (pure empty) (pure cutfail)) (pure (pure empty)) (pure (pure cutfail))","function_tokens":["alg","hdl","sig","ctx","=","CutC","$","\\","cons","il ","ail ","> ","ase ","ig ","f","L","Cutfail","->","fail","L","(","Call","m",")","->","runCut","cons","nil","nil","(","hdl","(","m","<$","ctx",")",")","R","(","L","(","L","Empty",")",")","->","nil","R","(","L","(","R","Choose",")",")","->","cons","(","True","<$","ctx",")","(","cons","(","False","<$","ctx",")","nil",")","R","(","R","other",")","->","thread","(","dst","~<~","hdl",")","other","(","pure","ctx",")",">>=","run",".","runCut","(","coerce","cons",")","(","coerce","nil",")","(","coerce","fail",")","where","dst","::","Applicative","m","=>","CutC","Identity","(","CutC","m","a",")","->","m","(","CutC","Identity","a",")","dst","=","run",".","runCut","(","fmap",".","liftA2","(","<|>",")",".","runCut","(","fmap",".","(","<|>",")",".","pure",")","(","pure","empty",")","(","pure","cutfail",")",")","(","pure","(","pure","empty",")",")","(","pure","(","pure","cutfail",")",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L114-L123","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"(a,s',w') = f r s","function_tokens":["(","a",",","s'",",","w'",")","=","f","r","s"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L44-L44","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"colors","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"colors =\n      C.sRGB\n        <$> [0.0, 0.2 .. 1.0]\n        <*> [0.0, 0.2 .. 1.0]\n        <*> [0.0, 0.2 .. 1.0]","function_tokens":["colors","=","C","sRGB","<$>","[","0.0",",","0.2","..","1.0","]","<*>","[","0.0",",","0.2","..","1.0","]","<*>","[","0.0",",","0.2","..","1.0","]"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L173-L177","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"throwError","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"throwError = lift . throwError","function_tokens":["throwError","=","lift",".","throwError"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L186-L186","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"prepareInner","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"prepareInner = \\case\n    -- Simplify `A ()` to `A`.\n    GHC.IEThingWith x n GHC.NoIEWildcard [] -> GHC.IEThingAbs x n\n    GHC.IEThingWith x n w ns ->\n      GHC.IEThingWith x n w (sortBy (compareWrappedName `on` GHC.unLoc) ns)\n    ie -> ie\n\n  -- Merge two import items, assuming they have the same name.","function_tokens":["prepareInner","=","\\","case","-- Simplify `A ()` to `A`.","GHC","IEThingWith","x","n","GHC","NoIEWildcard","[","]","->","GHC","IEThingAbs","x","n","GHC","IEThingWith","x","n","w","ns","->","GHC","IEThingWith","x","n","w","(","sortBy","(","compareWrappedName","`","on","`","GHC","unLoc",")","ns",")","ie","->","ie","-- Merge two import items, assuming they have the same name."],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L451-L459","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"ieMerge","parameters":"_ _","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ieMerge _ _ = Nothing","function_tokens":["ieMerge","_","_","=","Nothing"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L471-L471","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"littow","parameters":"(long, lat)","argument_list":"","return_statement":"","docstring":"Littow retroazimuthal + conformal projection","docstring_summary":"Littow retroazimuthal + conformal projection","docstring_tokens":["Littow","retroazimuthal","+","conformal","projection"],"function":"littow (long, lat) = ((sin(long - referenceLong)\/(cos lat)), (cos (long - referenceLong) * (tan lat)))\n    where referenceLong = radians 0\n\n-- | Craig retroazimuthal projection\n-- (works on a subset of the world)","function_tokens":["littow","(","long",",","lat",")","=","(","(","sin","(","long","-","referenceLong",")","\/","(","cos","lat",")",")",",","(","cos","(","long","-","referenceLong",")","*","(","tan","lat",")",")",")","where","referenceLong","=","radians","0","-- | Craig retroazimuthal projection","-- (works on a subset of the world)"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L20-L25","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"switchGo","parameters":"vInner v","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"switchGo vInner v = VarT $ \\a -> runVarT v a >>= \\case\n          (Nothing, vOuter) -> do\n            (mayB, vInner1) <- runVarT vInner a\n            return (mayB, switchGo vInner1 vOuter)\n          (Just vInner2, vOuter) -> do\n            (mayB, vInner3) <- runVarT (Just <$> vInner2) a\n            return (mayB, switchGo vInner3 vOuter)\n\n--------------------------------------------------------------------------------\n-- Bubbling\n--------------------------------------------------------------------------------\n-- | Produce events of a stream @v@ only when an event stream @h@ produces an\n-- event.\n-- @v@ and @h@ maintain state while cold.","function_tokens":["switchGo","vInner","v","=","VarT","$","\\","a","->","runVarT","v","a",">>=","\\","case","(","Nothing",",","vOuter",")","->","do","(","mayB",",","vInner1",")","<-","runVarT","vInner","a","return","(","mayB",",","switchGo","vInner1","vOuter",")","(","Just","vInner2",",","vOuter",")","->","do","(","mayB",",","vInner3",")","<-","runVarT","(","Just","<$>","vInner2",")","a","return","(","mayB",",","switchGo","vInner3","vOuter",")","--------------------------------------------------------------------------------","-- Bubbling","--------------------------------------------------------------------------------","-- | Produce events of a stream @v@ only when an event stream @h@ produces an","-- event.","-- @v@ and @h@ maintain state while cold."],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L261-L275","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"mergeImports","parameters":"(h :| (t : ts))","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mergeImports (h :| (t : ts))\n  | canMergeImport (GHC.unLoc h) (GHC.unLoc t) = mergeImports (mergeModuleImport h t :| ts)\n  | otherwise = h :| mergeImportsTail (t : ts)\n  where\n    mergeImportsTail (x : y : ys)\n      | canMergeImport (GHC.unLoc x) (GHC.unLoc y) = mergeImportsTail ((mergeModuleImport x y) : ys)\n      | otherwise = x : mergeImportsTail (y : ys)\n    mergeImportsTail xs = xs\n\n\n--------------------------------------------------------------------------------","function_tokens":["mergeImports","(","h",":|","(","t",":","ts",")",")","|","canMergeImport","(","GHC","unLoc","h",")","(","GHC","unLoc","t",")","=","mergeImports","(","mergeModuleImport","h","t",":|","ts",")","|","otherwise","=","h",":|","mergeImportsTail","(","t",":","ts",")","where","mergeImportsTail","(","x",":","y",":","ys",")","|","canMergeImport","(","GHC","unLoc","x",")","(","GHC","unLoc","y",")","=","mergeImportsTail","(","(","mergeModuleImport","x","y",")",":","ys",")","|","otherwise","=","x",":","mergeImportsTail","(","y",":","ys",")","mergeImportsTail","xs","=","xs","--------------------------------------------------------------------------------"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L365-L376","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"event","parameters":"","argument_list":"","return_statement":"","docstring":"A synonym for the @Maybe@ constructor @Just@.","docstring_summary":"A synonym for the","docstring_tokens":["A","synonym","for","the"],"function":"event = Just","function_tokens":["event","=","Just"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L66-L66","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"anyE","parameters":"vs","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"anyE vs = VarT $ \\a -> do\n  outs <- mapM (`runVarT` a) vs\n  let f (eb, vs1) (eb1, v) = (msum [eb, eb1], vs1 ++ [v])\n  return (anyE <$> foldl' f (Nothing, []) outs)\n--------------------------------------------------------------------------------\n-- Primitive event streams\n--------------------------------------------------------------------------------\n-- | Produce the given event value once and then inhibit forever.","function_tokens":["anyE","vs","=","VarT","$","\\","a","->","do","outs","<-","mapM","(","`","runVarT","`","a",")","vs","let","f","(","eb",",","vs1",")","(","eb1",",","v",")","=","(","msum","[","eb",",","eb1","]",",","vs1","++","[","v","]",")","return","(","anyE","<$>","foldl'","f","(","Nothing",",","[","]",")","outs",")","--------------------------------------------------------------------------------","-- Primitive event streams","--------------------------------------------------------------------------------","-- | Produce the given event value once and then inhibit forever."],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L189-L197","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"basvandijk\/threads","sha":"9df9493a2efd63a8290e2460c1c294b6fd02ee4e","path":"Setup.hs","language":"haskell","identifier":"haddockHook'","parameters":"ckageDescription \u2192 LocalBuildInfo \u2192 UserHooks \u2192 HaddockFlags \u2192 IO ()\nhaddockHook' pkg lbi","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"haddockHook' \u2237 PackageDescription \u2192 LocalBuildInfo \u2192 UserHooks \u2192 HaddockFlags \u2192 IO ()\nhaddockHook' pkg lbi =\n  haddockHook simpleUserHooks pkg (lbi { withPrograms = p })\n  where\n    p = userSpecifyArgs \"haddock\" [\"--optghc=-D__HADDOCK__\"] (withPrograms lbi)\n\n\n-- The End ---------------------------------------------------------------------","function_tokens":["haddockHook'","\u2237 P","ckageDescription \u2192","Loc","lBuildInfo \u2192 U","erH","oks \u2192 Had","ock","lags \u2192 IO ()","","","","","haddockHook'","pkg","lbi","=","haddockHook","simpleUserHooks","pkg","(","lbi","{","withPrograms","=","p","}",")","where","p","=","userSpecifyArgs","\"haddock\"","[","\"--optghc=-D__HADDOCK__\"","]","(","withPrograms","lbi",")","-- The End ---------------------------------------------------------------------"],"url":"https:\/\/github.com\/basvandijk\/threads\/blob\/9df9493a2efd63a8290e2460c1c294b6fd02ee4e\/Setup.hs#L38-L45","hash_key":"basvandijk\/threads:Setup.hs","hash_val":57967,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"destroyContext","parameters":"","argument_list":"","return_statement":"","docstring":"Destroy the given context. Note that the the correct way to destroy a context is to first release it by setting 'currentContext' to 'Nothing'. Applications should not attempt to destroy a current context, doing so will not work and will result in an 'ALCInvalidOperation' error.","docstring_summary":"Destroy the given context. Note that the the correct way to destroy a context is to first release it by setting 'currentContext' to 'Nothing'. Applications should not attempt to destroy a current context, doing so will not work and will result in an 'ALCInvalidOperation' error.","docstring_tokens":["Destroy","the","given","context",".","Note","that","the","the","correct","way","to","destroy","a","context","is","to","first","release","it","by","setting","currentContext","to","Nothing",".","Applications","should","not","attempt","to","destroy","a","current","context","doing","so","will","not","work","and","will","result","in","an","ALCInvalidOperation","error","."],"function":"destroyContext = liftIO . fmap (const ()) . alcDestroyContext . marshalContext","function_tokens":["destroyContext","=","liftIO",".","fmap","(","const","(",")",")",".","alcDestroyContext",".","marshalContext"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L167-L167","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"isSource","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"isSource = (==) GHC.IsBoot . GHC.ideclSource","function_tokens":["isSource","=","(","==",")","GHC","IsBoot",".","GHC","ideclSource"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L424-L424","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"basvandijk\/threads","sha":"9df9493a2efd63a8290e2460c1c294b6fd02ee4e","path":"Setup.hs","language":"haskell","identifier":"main","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"main = defaultMainWithHooks hooks\n  where\n    hooks = simpleUserHooks { haddockHook = haddockHook' }\n\n-- Define __HADDOCK__ for CPP when running haddock.","function_tokens":["main","=","defaultMainWithHooks","hooks","where","hooks","=","simpleUserHooks","{","haddockHook","=","haddockHook'","}","-- Define __HADDOCK__ for CPP when running haddock."],"url":"https:\/\/github.com\/basvandijk\/threads\/blob\/9df9493a2efd63a8290e2460c1c294b6fd02ee4e\/Setup.hs#L33-L38","hash_key":"basvandijk\/threads:Setup.hs","hash_val":57967,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"project","parameters":"f","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"project f = fmap (f . toRadians)","function_tokens":["project","f","=","fmap","(","f",".","toRadians",")"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L70-L70","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"m <|> n = RSST $ \\r s -> runRSST' m r s <|> runRSST' n r s","function_tokens":["m","<|>","n","=","RSST","$","\\","r","s","->","runRSST'","m","r","s","<|>","runRSST'","n","r","s"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L145-L145","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"mokus0\/erf-native","sha":"e371ba6821b2d9f18d19d010b863e5eb00ef681a","path":"src\/Data\/Number\/Erf.hs","language":"haskell","identifier":"normcdf","parameters":"x","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"normcdf x = erfc(-x \/ sqrt 2) \/ 2","function_tokens":["normcdf","x","=","erfc","(","-","x","\/","sqrt","2",")","\/","2"],"url":"https:\/\/github.com\/mokus0\/erf-native\/blob\/e371ba6821b2d9f18d19d010b863e5eb00ef681a\/src\/Data\/Number\/Erf.hs#L24-L24","hash_key":"mokus0\/erf-native:src\/Data\/Number\/Erf.hs","hash_val":59144,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/GHC.hs","language":"haskell","identifier":"dropBeforeLocated","parameters":"loc xs","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"dropBeforeLocated loc xs = case loc of\n  Just (L (RealSrcSpan rloc _) _) ->\n    filter (\\(L x _) -> srcSpanStartLine rloc <= srcSpanEndLine x) xs\n  _ -> xs","function_tokens":["dropBeforeLocated","loc","xs","=","case","loc","of","Just","(","L","(","RealSrcSpan","rloc","_",")","_",")","->","filter","(","\\","(","L","x","_",")","->","srcSpanStartLine","rloc","<=","srcSpanEndLine","x",")","xs","_","->","xs"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/GHC.hs#L62-L67","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/GHC.hs","hash_val":55906,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"toEmpty","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"toEmpty   = runEmpty (pure empty) (pure . pure)","function_tokens":["toEmpty","=","runEmpty","(","pure","empty",")","(","pure",".","pure",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L119-L119","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/Listener.hs","language":"haskell","identifier":"listenerf","parameters":"","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------","docstring_summary":"------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------"],"function":"listenerf = alListenerf . marshalGetPName","function_tokens":["listenerf","=","alListenerf",".","marshalGetPName"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/Listener.hs#L119-L119","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/Listener.hs","hash_val":62741,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"alg","parameters":"hdl sig ctx","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"alg hdl sig ctx = ErrorC $ \\ fail leaf -> case sig of\n    L (L (Throw e))   -> fail e\n    L (R (Catch m h)) -> runError (runError fail leaf . lower . h) leaf (lower m)\n    R other           -> thread (dst ~<~ hdl) other (pure ctx) >>= run . runError (coerce fail) (coerce leaf)\n    where\n    lower = hdl . (<$ ctx)\n    dst :: Applicative m => ErrorC e Identity (ErrorC e m a) -> m (ErrorC e Identity a)\n    dst = run . runError (pure . pure . throwError) (pure . runError (pure . throwError) (pure . pure))","function_tokens":["alg","hdl","sig","ctx","=","ErrorC","$","\\","fail","leaf","->","case","sig","of","L","(","L","(","Throw","e",")",")","->","fail","e","L","(","R","(","Catch","m","h",")",")","->","runError","(","runError","fail","leaf",".","lower",".","h",")","leaf","(","lower","m",")","R","other","->","thread","(","dst","~<~","hdl",")","other","(","pure","ctx",")",">>=","run",".","runError","(","coerce","fail",")","(","coerce","leaf",")","where","lower","=","hdl",".","(","<$","ctx",")","dst","::","Applicative","m","=>","ErrorC","e","Identity","(","ErrorC","e","m","a",")","->","m","(","ErrorC","e","Identity","a",")","dst","=","run",".","runError","(","pure",".","pure",".","throwError",")","(","pure",".","runError","(","pure",".","throwError",")","(","pure",".","pure",")",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L105-L113","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"exhaustive","parameters":"(\"\", a)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"exhaustive (\"\", a) = pure a","function_tokens":["exhaustive","(","\"\"",",","a",")","=","pure","a"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L134-L134","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"ekmett\/intern","sha":"6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1","path":"Data\/Interned\/Internal\/String.hs","language":"haskell","identifier":"compare","parameters":"(IS i _) (IS j _)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"compare (IS i _) (IS j _) = compare i j","function_tokens":["compare","(","IS","i","_",")","(","IS","j","_",")","=","compare","i","j"],"url":"https:\/\/github.com\/ekmett\/intern\/blob\/6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1\/Data\/Interned\/Internal\/String.hs#L23-L23","hash_key":"ekmett\/intern:Data\/Interned\/Internal\/String.hs","hash_val":60522,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"makeContextCurrent","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"makeContextCurrent =\n   fmap (const ()) . alcMakeContextCurrent . marshalContext . maybe nullContext id","function_tokens":["makeContextCurrent","=","fmap","(","const","(",")",")",".","alcMakeContextCurrent",".","marshalContext",".","maybe","nullContext","id"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L129-L130","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"ghulette\/language-c-comments","sha":"64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865","path":"examples\/Main.hs","language":"haskell","identifier":"printComment","parameters":"c","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printComment c = do\n  let posn = commentPosition c\n      file = posFile posn\n      row  = posRow posn\n      col  = posColumn posn\n      fmt  = show $ commentFormat c\n  printf \"(%d:%d) %s %s\\n\" row col file fmt\n  putStrLn $ commentText c\n  putStrLn $ commentTextWithoutMarks c\n  putStrLn \"---\"","function_tokens":["printComment","c","=","do","let","posn","=","commentPosition","c","file","=","posFile","posn","row","=","posRow","posn","col","=","posColumn","posn","fmt","=","show","$","commentFormat","c","printf","\"(%d:%d) %s %s\\n\"","row","col","file","fmt","putStrLn","$","commentText","c","putStrLn","$","commentTextWithoutMarks","c","putStrLn","\"---\""],"url":"https:\/\/github.com\/ghulette\/language-c-comments\/blob\/64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865\/examples\/Main.hs#L11-L22","hash_key":"ghulette\/language-c-comments:examples\/Main.hs","hash_val":57320,"partition":"test"}
{"repo":"mokus0\/erf-native","sha":"e371ba6821b2d9f18d19d010b863e5eb00ef681a","path":"src\/Data\/Number\/Erf.hs","language":"haskell","identifier":"erf","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"erf  = Impl.erff","function_tokens":["erf","=","Impl","erff"],"url":"https:\/\/github.com\/mokus0\/erf-native\/blob\/e371ba6821b2d9f18d19d010b863e5eb00ef681a\/src\/Data\/Number\/Erf.hs#L31-L31","hash_key":"mokus0\/erf-native:src\/Data\/Number\/Erf.hs","hash_val":59144,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"execEmpty","parameters":"","argument_list":"","return_statement":"","docstring":"Run an 'Empty' effect, replacing its result with a 'Bool' indicating whether control exited normally.  This is convenient for using 'empty' to signal early returns when all you need to know is whether control exited normally or not, and not what value it exited with.  @ 'execEmpty' = 'runEmpty' ('pure' 'False') ('const' ('pure' 'True')) @ @ 'execEmpty' ('pure' a) = 'pure' 'True' @ @ 'execEmpty' 'empty' = 'pure' 'False' @  @since 1.1.0.0","docstring_summary":"Run an 'Empty' effect, replacing its result with a 'Bool' indicating whether control exited normally.  This is convenient for using 'empty' to signal early returns when all you need to know is whether control exited normally or not, and not what value it exited with.","docstring_tokens":["Run","an","Empty","effect","replacing","its","result","with","a","Bool","indicating","whether","control","exited","normally",".","This","is","convenient","for","using","empty","to","signal","early","returns","when","all","you","need","to","know","is","whether","control","exited","normally","or","not","and","not","what","value","it","exited","with","."],"function":"execEmpty = runEmpty (pure False) (const (pure True))","function_tokens":["execEmpty","=","runEmpty","(","pure","False",")","(","const","(","pure","True",")",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L75-L75","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"liftIO","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"liftIO = lift . liftIO","function_tokens":["liftIO","=","lift",".","liftIO"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L156-L156","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"ieMerge","parameters":"_                  r@(GHC.IEVar _ _)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ieMerge _                  r@(GHC.IEVar _ _)      = Just r","function_tokens":["ieMerge","_","r","@","(","GHC","IEVar","_","_",")","=","Just","r"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L461-L461","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"spell-music\/temporal-media","sha":"b0508a6444714ac64d970d505e27f66daefc8ff1","path":"src\/Temporal\/Class.hs","language":"haskell","identifier":"har","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"har = foldl1 (=:=)","function_tokens":["har","=","foldl1","(","=:=",")"],"url":"https:\/\/github.com\/spell-music\/temporal-media\/blob\/b0508a6444714ac64d970d505e27f66daefc8ff1\/src\/Temporal\/Class.hs#L35-L35","hash_key":"spell-music\/temporal-media:src\/Temporal\/Class.hs","hash_val":63772,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"magenta","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"magenta = ColorCode ANSI.Dull ANSI.Magenta","function_tokens":["magenta","=","ColorCode","ANSI","Dull","ANSI","Magenta"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L52-L52","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"cot","parameters":"","argument_list":"","return_statement":"","docstring":"central meridian @ dc","docstring_summary":"central meridian","docstring_tokens":["central","meridian"],"function":"cot = (1\/) . tan","function_tokens":["cot","=","(","1","\/",")",".","tan"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L52-L52","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"fromEmpty","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"fromEmpty = runEmpty (error \"mfix (EmptyC): empty\") pure","function_tokens":["fromEmpty","=","runEmpty","(","error","\"mfix (EmptyC): empty\"",")","pure"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L120-L120","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Completion.hs","language":"haskell","identifier":"runCompletionFunctions","parameters":"fs input","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"runCompletionFunctions fs input =\n  foldlM go (mempty, mempty) fs\n  where\n    go ::\n      (String, [Haskeline.Completion]) ->\n      CompletionFunc m ->\n      m (String, [Haskeline.Completion])\n    go prev f = case prev of\n      (_, []) -> runCompletionFunction f input\n      _ -> pure prev","function_tokens":["runCompletionFunctions","fs","input","=","foldlM","go","(","mempty",",","mempty",")","fs","where","go","::","(","String",",","[","Haskeline","Completion","]",")","->","CompletionFunc","m","->","m","(","String",",","[","Haskeline","Completion","]",")","go","prev","f","=","case","prev","of","(","_",",","[","]",")","->","runCompletionFunction","f","input","_","->","pure","prev"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Completion.hs#L109-L118","hash_key":"pjones\/byline:src\/Byline\/Internal\/Completion.hs","hash_val":58960,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printImport","parameters":"_ (GHC.IEDoc _ _)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printImport _ (GHC.IEDoc _ _) =\n    error \"Language.Haskell.Stylish.Printer.Imports.printImportExport: unhandled case 'IEDoc'\"","function_tokens":["printImport","_","(","GHC","IEDoc","_","_",")","=","error","\"Language.Haskell.Stylish.Printer.Imports.printImportExport: unhandled case 'IEDoc'\""],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L347-L348","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"takeE","parameters":"n ve","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"takeE n ve = VarT $ \\a -> do\n    (eb, ve') <- runVarT ve a\n    case eb of\n        Nothing -> return (Nothing, takeE n ve')\n        Just  b -> return (Just b, takeE (n-1) ve')\n\n-- | Inhibit the first n occurences of an 'Event'.","function_tokens":["takeE","n","ve","=","VarT","$","\\","a","->","do","(","eb",",","ve'",")","<-","runVarT","ve","a","case","eb","of","Nothing","->","return","(","Nothing",",","takeE","n","ve'",")","Just","b","->","return","(","Just","b",",","takeE","(","n","-","1",")","ve'",")","-- | Inhibit the first n occurences of an 'Event'."],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L153-L160","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printImport","parameters":"_ (GHC.IEVar _ name)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printImport _ (GHC.IEVar _ name) = do\n    printIeWrappedName name","function_tokens":["printImport","_","(","GHC","IEVar","_","name",")","=","do","printIeWrappedName","name"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L325-L327","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Extensions.hs","language":"haskell","identifier":"alcVersion","parameters":"","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------ Contains the \\\"\/major\/.\/minor\/\\\" specification revision for this implementation.","docstring_summary":"------------------------------------------------------------------------------ Contains the \\\"\/major\/.\/minor\/\\\" specification revision for this implementation.","docstring_tokens":["------------------------------------------------------------------------------","Contains","the","\\","\/","major","\/",".","\/","minor","\/","\\","specification","revision","for","this","implementation","."],"function":"alcVersion =\n   makeGettableStateVar $\n      liftM2 makeVersionString\n             (getInteger Nothing MajorVersion)\n             (getInteger Nothing MinorVersion)","function_tokens":["alcVersion","=","makeGettableStateVar","$","liftM2","makeVersionString","(","getInteger","Nothing","MajorVersion",")","(","getInteger","Nothing","MinorVersion",")"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Extensions.hs#L84-L88","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Extensions.hs","hash_val":63214,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"n","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"n = (sin phi1 + sin phi2)\/2","function_tokens":["n","=","(","sin","phi1","+","sin","phi2",")","\/","2"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L59-L59","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/PeekPoke.hs","language":"haskell","identifier":"peek3","parameters":"f ptr","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"peek3 f ptr = do\n   x <- peekElemOff ptr 0\n   y <- peekElemOff ptr 1\n   z <- peekElemOff ptr 2\n   return $ f x y z","function_tokens":["peek3","f","ptr","=","do","x","<-","peekElemOff","ptr","0","y","<-","peekElemOff","ptr","1","z","<-","peekElemOff","ptr","2","return","$","f","x","y","z"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/PeekPoke.hs#L44-L50","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/PeekPoke.hs","hash_val":65272,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"factor","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"factor\n  =   read <$> some digit\n  <|> parens expr","function_tokens":["factor","=","read","<$>","some","digit","<|>","parens","expr"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L164-L166","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/GHC.hs","language":"haskell","identifier":"deepAnnComments","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"deepAnnComments = everything (++) (mkQ [] priorAndFollowing)","function_tokens":["deepAnnComments","=","everything","(","++",")","(","mkQ","[","]","priorAndFollowing",")"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/GHC.hs#L81-L81","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/GHC.hs","hash_val":55906,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"CutC l <|> CutC r = CutC (\\ cons nil fail -> l cons (r cons nil fail) fail)","function_tokens":["CutC","l","<|>","CutC","r","=","CutC","(","\\","cons","nil","fail","->","l","cons","(","r","cons","nil","fail",")","fail",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L82-L82","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"examples\/colors.hs","language":"haskell","identifier":"intensity","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"intensity = [id, vivid]","function_tokens":["intensity","=","[","id",",","vivid","]"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/examples\/colors.hs#L27-L27","hash_key":"pjones\/byline:examples\/colors.hs","hash_val":60086,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"fromError","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"fromError = runError (const (error \"mfix (ErrorC): throwError\")) pure","function_tokens":["fromError","=","runError","(","const","(","error","\"mfix (ErrorC): throwError\"",")",")","pure"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L91-L91","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ErrorC a1 *> ErrorC a2 = ErrorC $ \\ fail -> a1 fail . const . a2 fail","function_tokens":["ErrorC","a1","*>","ErrorC","a2","=","ErrorC","$","\\","fail","->","a1","fail",".","const",".","a2","fail"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L64-L64","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"somethingFollows","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"somethingFollows =\n                    isJust (GHC.ideclAs decl) || isHiding decl ||\n                    not (null $ GHC.ideclHiding decl)","function_tokens":["somethingFollows","=","isJust","(","GHC","ideclAs","decl",")","||","isHiding","decl","||","not","(","null","$","GHC","ideclHiding","decl",")"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L183-L185","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Ordering.hs","language":"haskell","identifier":"nameKey","parameters":"n","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------","docstring_summary":"------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------"],"function":"nameKey n = case showOutputable n of\n    o@('(' : _)             -> (2, o)\n    o@(o0 : _) | isUpper o0 -> (0, o)\n    o                       -> (1, o)\n\n\n--------------------------------------------------------------------------------","function_tokens":["nameKey","n","=","case","showOutputable","n","of","o","@","(","'('",":","_",")","->","(","2",",","o",")","o","@","(","o0",":","_",")","|","isUpper","o0","->","(","0",",","o",")","o","->","(","1",",","o",")","--------------------------------------------------------------------------------"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Ordering.hs#L64-L71","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Ordering.hs","hash_val":63296,"partition":"test"}
{"repo":"ekmett\/intern","sha":"6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1","path":"Data\/Interned\/Internal\/String.hs","language":"haskell","identifier":"identify","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"identify = IS","function_tokens":["identify","=","IS"],"url":"https:\/\/github.com\/ekmett\/intern\/blob\/6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1\/Data\/Interned\/Internal\/String.hs#L37-L37","hash_key":"ekmett\/intern:Data\/Interned\/Internal\/String.hs","hash_val":60522,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"processContext","parameters":"","argument_list":"","return_statement":"","docstring":"The current context is the only context accessible to state changes by AL commands (aside from state changes affecting shared objects). However, multiple contexts can be processed at the same time. To indicate that a context should be processed (i.e. that internal execution state like offset increments are supposed to be performed), the application has to use 'processContext'. Repeated calls to 'processContext' are legal, and do not affect a context that is already marked as processing. The default state of a context created by 'createContext' is that it is processing.","docstring_summary":"The current context is the only context accessible to state changes by AL commands (aside from state changes affecting shared objects). However, multiple contexts can be processed at the same time. To indicate that a context should be processed (i.e. that internal execution state like offset increments are supposed to be performed), the application has to use 'processContext'. Repeated calls to 'processContext' are legal, and do not affect a context that is already marked as processing. The default state of a context created by 'createContext' is that it is processing.","docstring_tokens":["The","current","context","is","the","only","context","accessible","to","state","changes","by","AL","commands","(","aside","from","state","changes","affecting","shared","objects",")",".","However","multiple","contexts","can","be","processed","at","the","same","time",".","To","indicate","that","a","context","should","be","processed","(","i",".","e",".","that","internal","execution","state","like","offset","increments","are","supposed","to","be","performed",")","the","application","has","to","use","processContext",".","Repeated","calls","to","processContext","are","legal","and","do","not","affect","a","context","that","is","already","marked","as","processing",".","The","default","state","of","a","context","created","by","createContext","is","that","it","is","processing","."],"function":"processContext = liftIO . fmap (const ()) . alcProcessContext . marshalContext","function_tokens":["processContext","=","liftIO",".","fmap","(","const","(",")",")",".","alcProcessContext",".","marshalContext"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L144-L144","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"state","parameters":"f","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"state f = RSST $ \\_ (s,w) -> case f s of\n                                      (a,s') -> return (a, (s', w))","function_tokens":["state","f","=","RSST","$","\\","_","(","s",",","w",")","->","case","f","s","of","(","a",",","s'",")","->","return","(","a",",","(","s'",",","w",")",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L161-L166","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ErrorC a <|> ErrorC b = ErrorC $ \\ fail leaf -> a fail leaf <|> b fail leaf","function_tokens":["ErrorC","a","<|>","ErrorC","b","=","ErrorC","$","\\","fail","leaf","->","a","fail","leaf","<|>","b","fail","leaf"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L74-L74","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"mfix","parameters":"f","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mfix f = EmptyC $ \\ nil leaf ->\n    mfix (toEmpty . f . run . fromEmpty)\n    >>= run . runEmpty (coerce nil) (coerce leaf)\n    where\n    toEmpty   = runEmpty (pure empty) (pure . pure)\n    fromEmpty = runEmpty (error \"mfix (EmptyC): empty\") pure","function_tokens":["mfix","f","=","EmptyC","$","\\","nil","leaf","->","mfix","(","toEmpty",".","f",".","run",".","fromEmpty",")",">>=","run",".","runEmpty","(","coerce","nil",")","(","coerce","leaf",")","where","toEmpty","=","runEmpty","(","pure","empty",")","(","pure",".","pure",")","fromEmpty","=","runEmpty","(","error","\"mfix (EmptyC): empty\"",")","pure"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L115-L121","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"craig","parameters":"referencePoint (long, lat)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"craig referencePoint (long, lat) = (long - referenceLong, y)\n    where (referenceLong, referenceLat) = referencePoint\n          y = if long - referenceLong == 0 then expr else (long - referenceLong)\/(sin(long - referenceLong)) * expr\n          expr = ((sin lat) * (cos (long - referenceLong)) - (tan referenceLat) * (cos lat)) \n\n-- | Winkel Tripel projection (standard for the National Geographic Society since","function_tokens":["craig","referencePoint","(","long",",","lat",")","=","(","long","-","referenceLong",",","y",")","where","(","referenceLong",",","referenceLat",")","=","referencePoint","y","=","if","long","-","referenceLong","==","0","then","expr","else","(","long","-","referenceLong",")","\/","(","sin","(","long","-","referenceLong",")",")","*","expr","expr","=","(","(","sin","lat",")","*","(","cos","(","long","-","referenceLong",")",")","-","(","tan","referenceLat",")","*","(","cos","lat",")",")","-- | Winkel Tripel projection (standard for the National Geographic Society since "],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L26-L32","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ErrorC a1 <* ErrorC a2 = ErrorC $ \\ fail leaf -> a1 fail (a2 fail . const . leaf)","function_tokens":["ErrorC","a1","<*","ErrorC","a2","=","ErrorC","$","\\","fail","leaf","->","a1","fail","(","a2","fail",".","const",".","leaf",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L67-L67","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"char","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"char = satisfy . (==)","function_tokens":["char","=","satisfy",".","(","==",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L123-L123","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"washingtonDC","parameters":"","argument_list":"","return_statement":"","docstring":"For use as a reference point in certain projections.","docstring_summary":"For use as a reference point in certain projections.","docstring_tokens":["For","use","as","a","reference","point","in","certain","projections","."],"function":"washingtonDC = over _2 radians $ over _1 radians (38.9072, -77.0369)","function_tokens":["washingtonDC","=","over","_2","radians","$","over","_1","radians","(","38.9072",",","-","77.0369",")"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L12-L12","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"isovector\/do-notation","sha":"919d3326fd191411cc507b74bc3eaffe0cdec1ce","path":"src\/Language\/Haskell\/DoNotation.hs","language":"haskell","identifier":"pure","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"pure = P.pure","function_tokens":["pure","=","P","pure"],"url":"https:\/\/github.com\/isovector\/do-notation\/blob\/919d3326fd191411cc507b74bc3eaffe0cdec1ce\/src\/Language\/Haskell\/DoNotation.hs#L50-L50","hash_key":"isovector\/do-notation:src\/Language\/Haskell\/DoNotation.hs","hash_val":58433,"partition":"test"}
{"repo":"mokus0\/erf-native","sha":"e371ba6821b2d9f18d19d010b863e5eb00ef681a","path":"src\/Data\/Number\/Erf.hs","language":"haskell","identifier":"erfc","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"erfc = Impl.erfc","function_tokens":["erfc","=","Impl","erfc"],"url":"https:\/\/github.com\/mokus0\/erf-native\/blob\/e371ba6821b2d9f18d19d010b863e5eb00ef681a\/src\/Data\/Number\/Erf.hs#L28-L28","hash_key":"mokus0\/erf-native:src\/Data\/Number\/Erf.hs","hash_val":59144,"partition":"test"}
{"repo":"spell-music\/temporal-media","sha":"b0508a6444714ac64d970d505e27f66daefc8ff1","path":"src\/Temporal\/Class.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"(+|) = del","function_tokens":["(","+|",")","=","del"],"url":"https:\/\/github.com\/spell-music\/temporal-media\/blob\/b0508a6444714ac64d970d505e27f66daefc8ff1\/src\/Temporal\/Class.hs#L55-L55","hash_key":"spell-music\/temporal-media:src\/Temporal\/Class.hs","hash_val":63772,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"digit","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"digit = satisfy isDigit","function_tokens":["digit","=","satisfy","isDigit"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L126-L126","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"ieMerge","parameters":"(GHC.IEThingAbs _ _)   r","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ieMerge (GHC.IEThingAbs _ _)   r                  = Just r","function_tokens":["ieMerge","(","GHC","IEThingAbs","_","_",")","r","=","Just","r"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L462-L462","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"z","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"z = z1 - z2","function_tokens":["z","=","z1","-","z2"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L140-L140","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"nearestColor","parameters":"(r, g, b) table","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"nearestColor (r, g, b) table =\n  case listToMaybe (sortColors $ distances table) of\n    Nothing -> minBound -- Should never happen.\n    Just (c, _) -> c\n  where\n    location :: (Double, Double, Double)\n    location = C.cieXYZView (C.sRGB24 r g b)\n    distance :: (Double, Double, Double) -> (Double, Double, Double) -> Double\n    distance (x1, y1, z1) (x2, y2, z2) = sqrt ((x ** 2) + (y ** 2) + (z ** 2))\n      where\n        x = x1 - x2\n        y = y1 - y2\n        z = z1 - z2\n    distances :: [(a, (Double, Double, Double))] -> [(a, Double)]\n    distances = map (second (distance location))\n    sortColors :: [(a, Double)] -> [(a, Double)]\n    sortColors = sortBy (comparing snd)\n\n-- | Get the CIE locations for the standard ANSI colors.\n--\n-- Locations are based on the default xterm colors.  See also:\n--\n--  * <http:\/\/en.wikipedia.org\/wiki\/ANSI_escape_code>\n--  * <http:\/\/en.wikipedia.org\/wiki\/Color_difference>\n--\n-- @since 1.0.0.0","function_tokens":["nearestColor","(","r",",","g",",","b",")","table","=","case","listToMaybe","(","sortColors","$","distances","table",")","of","Nothing","->","minBound","-- Should never happen.","Just","(","c",",","_",")","->","c","where","location","::","(","Double",",","Double",",","Double",")","location","=","C","cieXYZView","(","C","sRGB24","r","g","b",")","distance","::","(","Double",",","Double",",","Double",")","->","(","Double",",","Double",",","Double",")","->","Double","distance","(","x1",",","y1",",","z1",")","(","x2",",","y2",",","z2",")","=","sqrt","(","(","x","**","2",")","+","(","y","**","2",")","+","(","z","**","2",")",")","where","x","=","x1","-","x2","y","=","y1","-","y2","z","=","z1","-","z2","distances","::","[","(","a",",","(","Double",",","Double",",","Double",")",")","]","->","[","(","a",",","Double",")","]","distances","=","map","(","second","(","distance","location",")",")","sortColors","::","[","(","a",",","Double",")","]","->","[","(","a",",","Double",")","]","sortColors","=","sortBy","(","comparing","snd",")","-- | Get the CIE locations for the standard ANSI colors.","--","-- Locations are based on the default xterm colors.  See also:","--","--  * <http:\/\/en.wikipedia.org\/wiki\/ANSI_escape_code>","--  * <http:\/\/en.wikipedia.org\/wiki\/Color_difference>","--","-- @since 1.0.0.0"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L128-L154","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"mfix","parameters":"f","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mfix f = CutC $ \\ cons nil fail -> mfix\n    (toCut . f . run . fromCut)\n    >>= run . runCut (fmap . cons) (pure nil) (pure fail) where\n    toCut = runCut (fmap . (<|>) . pure) (pure empty) (pure cutfail)\n    fromCut = runCut (<$) (error \"mfix CutC: empty\") (error \"mfix CutC: cutfail\")","function_tokens":["mfix","f","=","CutC","$","\\","cons","nil","fail","->","mfix","(","toCut",".","f",".","run",".","fromCut",")",">>=","run",".","runCut","(","fmap",".","cons",")","(","pure","nil",")","(","pure","fail",")","where","toCut","=","runCut","(","fmap",".","(","<|>",")",".","pure",")","(","pure","empty",")","(","pure","cutfail",")","fromCut","=","runCut","(","<$",")","(","error","\"mfix CutC: empty\"",")","(","error","\"mfix CutC: cutfail\"",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L96-L101","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"runRSS","parameters":"m r s","argument_list":"","return_statement":"","docstring":"Unwrap an RSS computation as a function. (The inverse of 'rws'.)","docstring_summary":"Unwrap an RSS computation as a function. (The inverse of 'rws'.)","docstring_tokens":["Unwrap","an","RSS","computation","as","a","function",".","(","The","inverse","of","rws",".",")"],"function":"runRSS m r s = runIdentity (runRSST m r s)","function_tokens":["runRSS","m","r","s","=","runIdentity","(","runRSST","m","r","s",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L50-L50","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"group","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"group\n      = NonEmpty.sortBy (compareImports `on` GHC.unLoc) rawGroup\n      & mergeImports","function_tokens":["group","=","NonEmpty","sortBy","(","compareImports","`","on","`","GHC","unLoc",")","rawGroup","&","mergeImports"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L144-L146","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Extensions.hs","language":"haskell","identifier":"alcProcAddress","parameters":"maybeDevice funcName","argument_list":"","return_statement":"","docstring":"The application is expected to verify the applicability of an extension or core function entry point before requesting it by name, by use of 'alcIsExtensionPresent'. Extension entry points can be retrieved using 'alcProcAddress'. Entry points can be device specific, but are not context specific. Using 'Nothing' as the device does not guarantee that the entry point is returned, even if available for one of the available devices.","docstring_summary":"The application is expected to verify the applicability of an extension or core function entry point before requesting it by name, by use of 'alcIsExtensionPresent'. Extension entry points can be retrieved using 'alcProcAddress'. Entry points can be device specific, but are not context specific. Using 'Nothing' as the device does not guarantee that the entry point is returned, even if available for one of the available devices.","docstring_tokens":["The","application","is","expected","to","verify","the","applicability","of","an","extension","or","core","function","entry","point","before","requesting","it","by","name","by","use","of","alcIsExtensionPresent",".","Extension","entry","points","can","be","retrieved","using","alcProcAddress",".","Entry","points","can","be","device","specific","but","are","not","context","specific",".","Using","Nothing","as","the","device","does","not","guarantee","that","the","entry","point","is","returned","even","if","available","for","one","of","the","available","devices","."],"function":"alcProcAddress maybeDevice funcName =\n   makeGettableStateVar .\n      withALCString funcName .\n         alcGetProcAddress . marshalDevice . maybe nullDevice id $ maybeDevice","function_tokens":["alcProcAddress","maybeDevice","funcName","=","makeGettableStateVar",".","withALCString","funcName",".","alcGetProcAddress",".","marshalDevice",".","maybe","nullDevice","id","$","maybeDevice"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Extensions.hs#L55-L58","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Extensions.hs","hash_val":63214,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Tabs.hs","language":"haskell","identifier":"removeTabs","parameters":"spaces","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------","docstring_summary":"------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------"],"function":"removeTabs spaces = concatMap removeTabs'\n  where\n    removeTabs' '\\t' = replicate spaces ' '\n    removeTabs' x    = [x]\n\n\n--------------------------------------------------------------------------------","function_tokens":["removeTabs","spaces","=","concatMap","removeTabs'","where","removeTabs'","'\\t'","=","replicate","spaces","' '","removeTabs'","x","=","[","x","]","--------------------------------------------------------------------------------"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Tabs.hs#L13-L20","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Tabs.hs","hash_val":59604,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"imports","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"imports = GHC.unLoc limports","function_tokens":["imports","=","GHC","unLoc","limports"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L225-L225","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"satisfy","parameters":"p","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"satisfy p = send (Satisfy p)","function_tokens":["satisfy","p","=","send","(","Satisfy","p",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L120-L120","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"ghulette\/language-c-comments","sha":"64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865","path":"examples\/Main.hs","language":"haskell","identifier":"main","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"main = do\n  putStrLn $ show SingleLine\n  [file] <- getArgs\n  cmnts <- comments file\n  mapM_ printComment cmnts","function_tokens":["main","=","do","putStrLn","$","show","SingleLine","[","file","]","<-","getArgs","cmnts","<-","comments","file","mapM_","printComment","cmnts"],"url":"https:\/\/github.com\/ghulette\/language-c-comments\/blob\/64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865\/examples\/Main.hs#L23-L27","hash_key":"ghulette\/language-c-comments:examples\/Main.hs","hash_val":57320,"partition":"test"}
{"repo":"ekmett\/intern","sha":"6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1","path":"Data\/Interned\/Internal\/String.hs","language":"haskell","identifier":"cache","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"cache = stringCache","function_tokens":["cache","=","stringCache"],"url":"https:\/\/github.com\/ekmett\/intern\/blob\/6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1\/Data\/Interned\/Internal\/String.hs#L38-L38","hash_key":"ekmett\/intern:Data\/Interned\/Internal\/String.hs","hash_val":60522,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"mergeImportsTail","parameters":"xs","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mergeImportsTail xs = xs","function_tokens":["mergeImportsTail","xs","=","xs"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L372-L372","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Effect\/State.hs","language":"haskell","identifier":"state","parameters":"f","argument_list":"","return_statement":"","docstring":"Compute a new state and a value in a single step.  @ 'state' f = 'gets' f '>>=' \\\\ (s, a) -> 'put' s '>>' 'pure' a @  @since 1.0.2.0","docstring_summary":"Compute a new state and a value in a single step.","docstring_tokens":["Compute","a","new","state","and","a","value","in","a","single","step","."],"function":"state f = do\n  (s', a) <- gets f\n  a <$ put s'","function_tokens":["state","f","=","do","(","s'",",","a",")","<-","gets","f","a","<$","put","s'"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Effect\/State.hs#L105-L108","hash_key":"fused-effects\/fused-effects:src\/Control\/Effect\/State.hs","hash_val":56406,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"empty","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"empty = RSST $ \\_ _ -> empty","function_tokens":["empty","=","RSST","$","\\","_","_","->","empty"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L144-L144","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"mokus0\/erf-native","sha":"e371ba6821b2d9f18d19d010b863e5eb00ef681a","path":"src\/Data\/Number\/Erf.hs","language":"haskell","identifier":"erfc","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"erfc = Impl.erfcf","function_tokens":["erfc","=","Impl","erfcf"],"url":"https:\/\/github.com\/mokus0\/erf-native\/blob\/e371ba6821b2d9f18d19d010b863e5eb00ef681a\/src\/Data\/Number\/Erf.hs#L32-L32","hash_key":"mokus0\/erf-native:src\/Data\/Number\/Erf.hs","hash_val":59144,"partition":"test"}
{"repo":"sebastiaanvisser\/fclabels","sha":"b2c6d1d6677f301cd8e24dfa835494a55f034b8c","path":"src\/Data\/Label\/Failing.hs","language":"haskell","identifier":"get","parameters":"l","argument_list":"","return_statement":"","docstring":"Getter for a lens that can fail. When the field to which the lens points is not accessible the getter returns 'Nothing'.","docstring_summary":"Getter for a lens that can fail. When the field to which the lens points is not accessible the getter returns 'Nothing'.","docstring_tokens":["Getter","for","a","lens","that","can","fail",".","When","the","field","to","which","the","lens","points","is","not","accessible","the","getter","returns","Nothing","."],"function":"get l = runKleisli (Poly.get l)","function_tokens":["get","l","=","runKleisli","(","Poly","get","l",")"],"url":"https:\/\/github.com\/sebastiaanvisser\/fclabels\/blob\/b2c6d1d6677f301cd8e24dfa835494a55f034b8c\/src\/Data\/Label\/Failing.hs#L60-L60","hash_key":"sebastiaanvisser\/fclabels:src\/Data\/Label\/Failing.hs","hash_val":56785,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"phi1","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"phi1 = (radians 20)","function_tokens":["phi1","=","(","radians","20",")"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L64-L64","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"mfix","parameters":"f","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mfix f = ErrorC $ \\ fail leaf ->\n    mfix (toError . f . run . fromError)\n    >>= run . runError (pure . fail) (pure . leaf)\n    where\n    toError   = runError (pure . throwError) (pure . pure)\n    fromError = runError (const (error \"mfix (ErrorC): throwError\")) pure","function_tokens":["mfix","f","=","ErrorC","$","\\","fail","leaf","->","mfix","(","toError",".","f",".","run",".","fromError",")",">>=","run",".","runError","(","pure",".","fail",")","(","pure",".","leaf",")","where","toError","=","runError","(","pure",".","throwError",")","(","pure",".","pure",")","fromError","=","runError","(","const","(","error","\"mfix (ErrorC): throwError\"",")",")","pure"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L86-L92","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"ansiColorLocations","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ansiColorLocations =\n  [ (ANSI.Black, (0.0, 0.0, 0.0)),\n    (ANSI.Red, (0.2518, 0.1298, 0.0118)),\n    (ANSI.Green, (0.2183, 0.4366, 0.0728)),\n    (ANSI.Yellow, (0.4701, 0.5664, 0.0846)),\n    (ANSI.Blue, (0.1543, 0.0617, 0.8126)),\n    (ANSI.Magenta, (0.3619, 0.1739, 0.592)),\n    (ANSI.Cyan, (0.3285, 0.4807, 0.653)),\n    (ANSI.White, (0.7447, 0.7835, 0.8532))\n  ]","function_tokens":["ansiColorLocations","=","[","(","ANSI","Black",",","(","0.0",",","0.0",",","0.0",")",")",",","(","ANSI","Red",",","(","0.2518",",","0.1298",",","0.0118",")",")",",","(","ANSI","Green",",","(","0.2183",",","0.4366",",","0.0728",")",")",",","(","ANSI","Yellow",",","(","0.4701",",","0.5664",",","0.0846",")",")",",","(","ANSI","Blue",",","(","0.1543",",","0.0617",",","0.8126",")",")",",","(","ANSI","Magenta",",","(","0.3619",",","0.1739",",","0.592",")",")",",","(","ANSI","Cyan",",","(","0.3285",",","0.4807",",","0.653",")",")",",","(","ANSI","White",",","(","0.7447",",","0.7835",",","0.8532",")",")","]"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L155-L164","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"kaizhang\/matrices","sha":"4d85abd72aecce03284c597497fbe6154d8919bd","path":"src\/Data\/Matrix\/Mutable.hs","language":"haskell","identifier":"write","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"write = MG.write","function_tokens":["write","=","MG","write"],"url":"https:\/\/github.com\/kaizhang\/matrices\/blob\/4d85abd72aecce03284c597497fbe6154d8919bd\/src\/Data\/Matrix\/Mutable.hs#L33-L33","hash_key":"kaizhang\/matrices:src\/Data\/Matrix\/Mutable.hs","hash_val":64671,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printQualified","parameters":"Options{..} padNames stats ldecl","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printQualified Options{..} padNames stats ldecl = do\n    putText \"import\" >> space\n\n    case (isSource decl, isAnySource stats) of\n      (True, _) -> putText \"{-# SOURCE #-}\" >> space\n      (_, True) -> putText \"              \" >> space\n      _         -> pure ()\n\n    when (GHC.ideclSafe decl) (putText \"safe\" >> space)\n\n    let module_ = do\n            moduleNamePosition <- length <$> getCurrentLine\n            forM_ (GHC.ideclPkgQual decl) $ \\pkg ->\n                putText (stringLiteral pkg) >> space\n            putText (importModuleName decl)\n\n            -- Only print spaces if something follows.\n            let somethingFollows =\n                    isJust (GHC.ideclAs decl) || isHiding decl ||\n                    not (null $ GHC.ideclHiding decl)\n            when (padNames && somethingFollows) $ putText $ replicate\n                (isLongestImport stats - importModuleNameLength decl)\n                ' '\n            pure moduleNamePosition\n\n    moduleNamePosition <-\n        case (postQualified, isQualified decl, isAnyQualified stats) of\n            (False, True , _   ) -> putText \"qualified\" *> space *> module_\n            (False, _    , True) -> putText \"         \" *> space *> module_\n            (True , True , _   ) -> module_ <* space <* putText \"qualified\"\n            _                    -> module_\n\n    beforeAliasPosition <- length <$> getCurrentLine\n    forM_ (GHC.ideclAs decl) $ \\lname -> do\n        space >> putText \"as\" >> space\n        putText . GHC.moduleNameString $ GHC.unLoc lname\n\n    afterAliasPosition <- length <$> getCurrentLine\n\n    when (isHiding decl) (space >> putText \"hiding\")\n\n    let putOffset = putText $ replicate offset ' '\n        offset = case listPadding of\n            LPConstant n -> n\n            LPModuleName -> moduleNamePosition\n\n    pure ()\n\n    case snd <$> GHC.ideclHiding decl of\n        Nothing -> pure ()\n        Just limports | null (GHC.unLoc limports) -> case emptyListAlign of\n            RightAfter -> modifyCurrentLine trimRight >> space >> putText \"()\"\n            Inherit -> case listAlign of\n                NewLine -> do\n                    modifyCurrentLine trimRight\n                    newline >> putOffset >> putText \"()\"\n                _ -> space >> putText \"()\"\n\n        Just limports -> do\n            let imports = GHC.unLoc limports\n                printedImports = flagEnds $ -- [P ()]\n                    (printImport separateLists) . GHC.unLoc <$>\n                    prepareImportList imports\n\n            -- Since we might need to output the import module name several times, we\n            -- need to save it to a variable:\n            wrapPrefix <- case listAlign of\n                AfterAlias -> pure $ replicate (afterAliasPosition + 1) ' '\n                WithAlias -> pure $ replicate (beforeAliasPosition + 1) ' '\n                Repeat -> fmap (++ \" (\") getCurrentLine\n                WithModuleName -> pure $ replicate (moduleNamePosition + offset) ' '\n                NewLine -> pure $ replicate offset ' '\n\n            -- Helper\n            let doSpaceSurround = when spaceSurround space\n\n            -- Try to put everything on one line.\n            let printAsSingleLine = forM_ printedImports $ \\(imp, start, end) -> do\n                    when start $ putText \"(\" >> doSpaceSurround\n                    imp\n                    if end then doSpaceSurround >> putText \")\" else comma >> space\n\n            -- Try to put everything one by one, wrapping if that fails.\n            let printAsInlineWrapping wprefix = forM_ printedImports $\n                    \\(imp, start, end) ->\n                    patchForRepeatHiding $ wrapping\n                       (do\n                         if start then putText \"(\" >> doSpaceSurround else space\n                         imp\n                         if end then doSpaceSurround >> putText \")\" else comma)\n                      (do\n                        case listAlign of\n                            -- In 'Repeat' mode, end lines with ')' rather than ','.\n                            Repeat | not start -> modifyCurrentLine . withLast $\n                                \\c -> if c == ',' then ')' else c\n                            _ | start && spaceSurround ->\n                                -- Only necessary if spaceSurround is enabled.\n                                modifyCurrentLine trimRight\n                            _ -> pure ()\n                        newline\n                        void wprefix\n                        case listAlign of\n                          -- '(' already included in repeat\n                          Repeat         -> pure ()\n                          -- Print the much needed '('\n                          _ | start      -> putText \"(\" >> doSpaceSurround\n                          -- Don't bother aligning if we're not in inline mode.\n                          _ | longListAlign \/= Inline -> pure ()\n                          -- 'Inline + AfterAlias' is really where we want to be careful\n                          -- with spacing.\n                          AfterAlias -> space >> doSpaceSurround\n                          WithModuleName -> pure ()\n                          WithAlias -> pure ()\n                          NewLine -> pure ()\n                        imp\n                        if end then doSpaceSurround >> putText \")\" else comma)\n\n            -- Put everything on a separate line.  'spaceSurround' can be\n            -- ignored.\n            let printAsMultiLine = forM_ printedImports $ \\(imp, start, end) -> do\n                    when start $ modifyCurrentLine trimRight  -- We added some spaces.\n                    newline\n                    putOffset\n                    if start then putText \"( \" else putText \", \"\n                    imp\n                    when end $ newline >> putOffset >> putText \")\"\n\n            case longListAlign of\n              Multiline -> wrapping\n                (space >> printAsSingleLine)\n                printAsMultiLine\n              Inline | NewLine <- listAlign -> do\n                modifyCurrentLine trimRight\n                newline >> putOffset >> printAsInlineWrapping (putText wrapPrefix)\n              Inline -> space >> printAsInlineWrapping (putText wrapPrefix)\n              InlineWithBreak -> wrapping\n                (space >> printAsSingleLine)\n                (do\n                  modifyCurrentLine trimRight\n                  newline >> putOffset >> printAsInlineWrapping putOffset)\n              InlineToMultiline -> wrapping\n                (space >> printAsSingleLine)\n                (wrapping\n                  (do\n                    modifyCurrentLine trimRight\n                    newline >> putOffset >> printAsSingleLine)\n                  printAsMultiLine)\n  where\n    decl = GHC.unLoc ldecl\n\n    -- We cannot wrap\/repeat 'hiding' imports since then we would get multiple\n    -- imports hiding different things.\n    patchForRepeatHiding = case listAlign of\n        Repeat | isHiding decl -> withColumns Nothing\n        _                      -> id\n\n\n--------------------------------------------------------------------------------","function_tokens":["printQualified","Options","{","..","}","padNames","stats","ldecl","=","do","putText","\"import\"",">>","space","case","(","isSource","decl",",","isAnySource","stats",")","of","(","True",",","_",")","->","putText","\"{-# SOURCE #-}\"",">>","space","(","_",",","True",")","->","putText","\"              \"",">>","space","_","->","pure","(",")","when","(","GHC","ideclSafe","decl",")","(","putText","\"safe\"",">>","space",")","let","module_","=","do","moduleNamePosition","<-","length","<$>","getCurrentLine","forM_","(","GHC","ideclPkgQual","decl",")","$","\\","pkg","->","putText","(","stringLiteral","pkg",")",">>","space","putText","(","importModuleName","decl",")","-- Only print spaces if something follows.","let","somethingFollows","=","isJust","(","GHC","ideclAs","decl",")","||","isHiding","decl","||","not","(","null","$","GHC","ideclHiding","decl",")","when","(","padNames","&&","somethingFollows",")","$","putText","$","replicate","(","isLongestImport","stats","-","importModuleNameLength","decl",")","' '","pure","moduleNamePosition","moduleNamePosition","<-","case","(","postQualified",",","isQualified","decl",",","isAnyQualified","stats",")","of","(","False",",","True",",","_",")","->","putText","\"qualified\"","*>","space","*>","module_","(","False",",","_",",","True",")","->","putText","\"         \"","*>","space","*>","module_","(","True",",","True",",","_",")","->","module_","<*","space","<*","putText","\"qualified\"","_","->","module_","beforeAliasPosition","<-","length","<$>","getCurrentLine","forM_","(","GHC","ideclAs","decl",")","$","\\","lname","->","do","space",">>","putText","\"as\"",">>","space","putText",".","GHC","moduleNameString","$","GHC","unLoc","lname","afterAliasPosition","<-","length","<$>","getCurrentLine","when","(","isHiding","decl",")","(","space",">>","putText","\"hiding\"",")","let","putOffset","=","putText","$","replicate","offset","' '","offset","=","case","listPadding","of","LPConstant","n","->","n","LPModuleName","->","moduleNamePosition","pure","(",")","case","snd","<$>","GHC","ideclHiding","decl","of","Nothing","->","pure","(",")","Just","limports","|","null","(","GHC","unLoc","limports",")","->","case","emptyListAlign","of","RightAfter","->","modifyCurrentLine","trimRight",">>","space",">>","putText","\"()\"","Inherit","->","case","listAlign","of","NewLine","->","do","modifyCurrentLine","trimRight","newline",">>","putOffset",">>","putText","\"()\"","_","->","space",">>","putText","\"()\"","Just","limports","->","do","let","imports","=","GHC","unLoc","limports","printedImports","=","flagEnds","$","-- [P ()]","(","printImport","separateLists",")",".","GHC","unLoc","<$>","prepareImportList","imports","-- Since we might need to output the import module name several times, we","-- need to save it to a variable:","wrapPrefix","<-","case","listAlign","of","AfterAlias","->","pure","$","replicate","(","afterAliasPosition","+","1",")","' '","WithAlias","->","pure","$","replicate","(","beforeAliasPosition","+","1",")","' '","Repeat","->","fmap","(","++","\" (\"",")","getCurrentLine","WithModuleName","->","pure","$","replicate","(","moduleNamePosition","+","offset",")","' '","NewLine","->","pure","$","replicate","offset","' '","-- Helper","let","doSpaceSurround","=","when","spaceSurround","space","-- Try to put everything on one line.","let","printAsSingleLine","=","forM_","printedImports","$","\\","(","imp",",","start",",","end",")","->","do","when","start","$","putText","\"(\"",">>","doSpaceSurround","imp","if","end","then","doSpaceSurround",">>","putText","\")\"","else","comma",">>","space","-- Try to put everything one by one, wrapping if that fails.","let","printAsInlineWrapping","wprefix","=","forM_","printedImports","$","\\","(","imp",",","start",",","end",")","->","patchForRepeatHiding","$","wrapping","(","do","if","start","then","putText","\"(\"",">>","doSpaceSurround","else","space","imp","if","end","then","doSpaceSurround",">>","putText","\")\"","else","comma",")","(","do","case","listAlign","of","-- In 'Repeat' mode, end lines with ')' rather than ','.","Repeat","|","not","start","->","modifyCurrentLine",".","withLast","$","\\","c","->","if","c","==","','","then","')'","else","c","_","|","start","&&","spaceSurround","->","-- Only necessary if spaceSurround is enabled.","modifyCurrentLine","trimRight","_","->","pure","(",")","newline","void","wprefix","case","listAlign","of","-- '(' already included in repeat","Repeat","->","pure","(",")","-- Print the much needed '('","_","|","start","->","putText","\"(\"",">>","doSpaceSurround","-- Don't bother aligning if we're not in inline mode.","_","|","longListAlign","\/=","Inline","->","pure","(",")","-- 'Inline + AfterAlias' is really where we want to be careful","-- with spacing.","AfterAlias","->","space",">>","doSpaceSurround","WithModuleName","->","pure","(",")","WithAlias","->","pure","(",")","NewLine","->","pure","(",")","imp","if","end","then","doSpaceSurround",">>","putText","\")\"","else","comma",")","-- Put everything on a separate line.  'spaceSurround' can be","-- ignored.","let","printAsMultiLine","=","forM_","printedImports","$","\\","(","imp",",","start",",","end",")","->","do","when","start","$","modifyCurrentLine","trimRight","-- We added some spaces.","newline","putOffset","if","start","then","putText","\"( \"","else","putText","\", \"","imp","when","end","$","newline",">>","putOffset",">>","putText","\")\"","case","longListAlign","of","Multiline","->","wrapping","(","space",">>","printAsSingleLine",")","printAsMultiLine","Inline","|","NewLine","<-","listAlign","->","do","modifyCurrentLine","trimRight","newline",">>","putOffset",">>","printAsInlineWrapping","(","putText","wrapPrefix",")","Inline","->","space",">>","printAsInlineWrapping","(","putText","wrapPrefix",")","InlineWithBreak","->","wrapping","(","space",">>","printAsSingleLine",")","(","do","modifyCurrentLine","trimRight","newline",">>","putOffset",">>","printAsInlineWrapping","putOffset",")","InlineToMultiline","->","wrapping","(","space",">>","printAsSingleLine",")","(","wrapping","(","do","modifyCurrentLine","trimRight","newline",">>","putOffset",">>","printAsSingleLine",")","printAsMultiLine",")","where","decl","=","GHC","unLoc","ldecl","-- We cannot wrap\/repeat 'hiding' imports since then we would get multiple","-- imports hiding different things.","patchForRepeatHiding","=","case","listAlign","of","Repeat","|","isHiding","decl","->","withColumns","Nothing","_","->","id","--------------------------------------------------------------------------------"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L166-L324","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Tabs.hs","language":"haskell","identifier":"removeTabs'","parameters":"'\\t'","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"removeTabs' '\\t' = replicate spaces ' '","function_tokens":["removeTabs'","'\\t'","=","replicate","spaces","' '"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Tabs.hs#L15-L15","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Tabs.hs","hash_val":59604,"partition":"test"}
{"repo":"sebastiaanvisser\/fclabels","sha":"b2c6d1d6677f301cd8e24dfa835494a55f034b8c","path":"src\/Data\/Label\/Total.hs","language":"haskell","identifier":"lifted","parameters":"a b","argument_list":"","return_statement":"","docstring":"Lifted lens composition.  For example, useful when specialized to lists:  > :: (f :-> [o]) > -> (o :-> [a]) > -> (f :-> [a])","docstring_summary":"Lifted lens composition.  For example, useful when specialized to lists:  > :: (f :-> [o]) > -> (o :-> [a]) > -> (f :-> [a])","docstring_tokens":["Lifted","lens","composition",".","For","example","useful","when","specialized","to","lists",":",">","::","(","f",":","-",">","[","o","]",")",">","-",">","(","o",":","-",">","[","a","]",")",">","-",">","(","f",":","-",">","[","a","]",")"],"function":"lifted a b = lens (get b <=< get a) (modify a . liftM . modify b)","function_tokens":["lifted","a","b","=","lens","(","get","b","<=<","get","a",")","(","modify","a",".","liftM",".","modify","b",")"],"url":"https:\/\/github.com\/sebastiaanvisser\/fclabels\/blob\/b2c6d1d6677f301cd8e24dfa835494a55f034b8c\/src\/Data\/Label\/Total.hs#L90-L90","hash_key":"sebastiaanvisser\/fclabels:src\/Data\/Label\/Total.hs","hash_val":65100,"partition":"test"}
{"repo":"sebastiaanvisser\/fclabels","sha":"b2c6d1d6677f301cd8e24dfa835494a55f034b8c","path":"src\/Data\/Label\/Failing.hs","language":"haskell","identifier":"modify","parameters":"l m","argument_list":"","return_statement":"","docstring":"Modifier for a lens that can fail. When the field to which the lens points is not accessible this function returns 'Left'.","docstring_summary":"Modifier for a lens that can fail. When the field to which the lens points is not accessible this function returns 'Left'.","docstring_tokens":["Modifier","for","a","lens","that","can","fail",".","When","the","field","to","which","the","lens","points","is","not","accessible","this","function","returns","Left","."],"function":"modify l m = runKleisli (Poly.modify l . arr (arr m,))","function_tokens":["modify","l","m","=","runKleisli","(","Poly","modify","l",".","arr","(","arr","m",",",")",")"],"url":"https:\/\/github.com\/sebastiaanvisser\/fclabels\/blob\/b2c6d1d6677f301cd8e24dfa835494a55f034b8c\/src\/Data\/Label\/Failing.hs#L66-L66","hash_key":"sebastiaanvisser\/fclabels:src\/Data\/Label\/Failing.hs","hash_val":56785,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"importModuleNameLength","parameters":"imp","argument_list":"","return_statement":"","docstring":"Computes length till module name, includes package name. TODO: this should reuse code with the printer","docstring_summary":"Computes length till module name, includes package name. TODO: this should reuse code with the printer","docstring_tokens":["Computes","length","till","module","name","includes","package","name",".","TODO",":","this","should","reuse","code","with","the","printer"],"function":"importModuleNameLength imp =\n    (case GHC.ideclPkgQual imp of\n        Nothing -> 0\n        Just sl -> 1 + length (stringLiteral sl)) +\n    (length $ importModuleName imp)","function_tokens":["importModuleNameLength","imp","=","(","case","GHC","ideclPkgQual","imp","of","Nothing","->","0","Just","sl","->","1","+","length","(","stringLiteral","sl",")",")","+","(","length","$","importModuleName","imp",")"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L402-L406","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"exhaustive","parameters":"_","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"exhaustive _       = empty","function_tokens":["exhaustive","_","=","empty"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L135-L135","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"kaizhang\/matrices","sha":"4d85abd72aecce03284c597497fbe6154d8919bd","path":"src\/Data\/Matrix\/Mutable.hs","language":"haskell","identifier":"takeRow","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"takeRow = MG.takeRow","function_tokens":["takeRow","=","MG","takeRow"],"url":"https:\/\/github.com\/kaizhang\/matrices\/blob\/4d85abd72aecce03284c597497fbe6154d8919bd\/src\/Data\/Matrix\/Mutable.hs#L30-L30","hash_key":"kaizhang\/matrices:src\/Data\/Matrix\/Mutable.hs","hash_val":64671,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"black","parameters":"","argument_list":"","return_statement":"","docstring":"Standard ANSI color by name.  @since 1.0.0.0","docstring_summary":"Standard ANSI color by name.","docstring_tokens":["Standard","ANSI","color","by","name","."],"function":"black = ColorCode ANSI.Dull ANSI.Black","function_tokens":["black","=","ColorCode","ANSI","Dull","ANSI","Black"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L47-L47","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Ordering.hs","language":"haskell","identifier":"compareWrappedName","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"compareWrappedName = comparing nameKey","function_tokens":["compareWrappedName","=","comparing","nameKey"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Ordering.hs#L59-L59","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Ordering.hs","hash_val":63296,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"(>>) = (*>)","function_tokens":["(",">>",")","=","(","*>",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L107-L107","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"mzero","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mzero = empty","function_tokens":["mzero","=","empty"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L136-L136","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"runCutM","parameters":"leaf","argument_list":"","return_statement":"","docstring":"Run a 'Cut' effect, mapping results into a 'Monoid'.  @since 1.0.0.0","docstring_summary":"Run a 'Cut' effect, mapping results into a 'Monoid'.","docstring_tokens":["Run","a","Cut","effect","mapping","results","into","a","Monoid","."],"function":"runCutM leaf = runCut (fmap . mappend . leaf) (pure mempty) (pure mempty)","function_tokens":["runCutM","leaf","=","runCut","(","fmap",".","mappend",".","leaf",")","(","pure","mempty",")","(","pure","mempty",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L63-L63","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/Listener.hs","language":"haskell","identifier":"listenerPosition","parameters":"","argument_list":"","return_statement":"","docstring":"'listenerPosition' contains the current location of the listener in the world coordinate system. Any 3-tuple of valid float values is allowed. Implementation behavior on encountering NaN and infinity is not defined. The initial position is ('Vertex3' 0 0 0).","docstring_summary":"'listenerPosition' contains the current location of the listener in the world coordinate system. Any 3-tuple of valid float values is allowed. Implementation behavior on encountering NaN and infinity is not defined. The initial position is ('Vertex3' 0 0 0).","docstring_tokens":["listenerPosition","contains","the","current","location","of","the","listener","in","the","world","coordinate","system",".","Any","3","-","tuple","of","valid","float","values","is","allowed",".","Implementation","behavior","on","encountering","NaN","and","infinity","is","not","defined",".","The","initial","position","is","(","Vertex3","0","0","0",")","."],"function":"listenerPosition = makeListenerVar GetPosition 3 (peek3 Vertex3) listener3f","function_tokens":["listenerPosition","=","makeListenerVar","GetPosition","3","(","peek3","Vertex3",")","listener3f"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/Listener.hs#L59-L59","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/Listener.hs","hash_val":62741,"partition":"test"}
{"repo":"isovector\/do-notation","sha":"919d3326fd191411cc507b74bc3eaffe0cdec1ce","path":"src\/Language\/Haskell\/DoNotation.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"a >> b = a >>= const b","function_tokens":["a",">>","b","=","a",">>=","const","b"],"url":"https:\/\/github.com\/isovector\/do-notation\/blob\/919d3326fd191411cc507b74bc3eaffe0cdec1ce\/src\/Language\/Haskell\/DoNotation.hs#L67-L67","hash_key":"isovector\/do-notation:src\/Language\/Haskell\/DoNotation.hs","hash_val":58433,"partition":"test"}
{"repo":"ghulette\/language-c-comments","sha":"64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865","path":"examples\/Main.hs","language":"haskell","identifier":"file","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"file = posFile posn","function_tokens":["file","=","posFile","posn"],"url":"https:\/\/github.com\/ghulette\/language-c-comments\/blob\/64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865\/examples\/Main.hs#L13-L13","hash_key":"ghulette\/language-c-comments:examples\/Main.hs","hash_val":57320,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/PeekPoke.hs","language":"haskell","identifier":"poke1","parameters":"ptr x","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"poke1 ptr x =\n   pokeElemOff ptr 0 x","function_tokens":["poke1","ptr","x","=","pokeElemOff","ptr","0","x"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/PeekPoke.hs#L31-L32","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/PeekPoke.hs","hash_val":65272,"partition":"test"}
{"repo":"mokus0\/erf-native","sha":"e371ba6821b2d9f18d19d010b863e5eb00ef681a","path":"src\/Data\/Number\/Erf.hs","language":"haskell","identifier":"erf","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"erf  = Impl.erf","function_tokens":["erf","=","Impl","erf"],"url":"https:\/\/github.com\/mokus0\/erf-native\/blob\/e371ba6821b2d9f18d19d010b863e5eb00ef681a\/src\/Data\/Number\/Erf.hs#L27-L27","hash_key":"mokus0\/erf-native:src\/Data\/Number\/Erf.hs","hash_val":59144,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"acc'","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"acc' = f acc a","function_tokens":["acc'","=","f","acc","a"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L119-L119","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"(<*>) = ap","function_tokens":["(","<*>",")","=","ap"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L141-L141","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"ekmett\/intern","sha":"6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1","path":"Data\/Interned\/Internal\/String.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"IS i _ == IS j _ = i == j","function_tokens":["IS","i","_","==","IS","j","_","=","i","==","j"],"url":"https:\/\/github.com\/ekmett\/intern\/blob\/6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1\/Data\/Interned\/Internal\/String.hs#L20-L20","hash_key":"ekmett\/intern:Data\/Interned\/Internal\/String.hs","hash_val":60522,"partition":"test"}
{"repo":"mokus0\/erf-native","sha":"e371ba6821b2d9f18d19d010b863e5eb00ef681a","path":"src\/Data\/Number\/Erf.hs","language":"haskell","identifier":"erf","parameters":"x","argument_list":"","return_statement":"","docstring":"^@normcdf x = erfc(-x \/ sqrt 2) \/ 2@ All the functions are inter-related, here's some defaults.","docstring_summary":"^","docstring_tokens":["^"],"function":"erf x = 1 - erfc x","function_tokens":["erf","x","=","1","-","erfc","x"],"url":"https:\/\/github.com\/mokus0\/erf-native\/blob\/e371ba6821b2d9f18d19d010b863e5eb00ef681a\/src\/Data\/Number\/Erf.hs#L21-L21","hash_key":"mokus0\/erf-native:src\/Data\/Number\/Erf.hs","hash_val":59144,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/Listener.hs","language":"haskell","identifier":"getListenerfv","parameters":"","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------","docstring_summary":"------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------"],"function":"getListenerfv = alGetListenerfv . marshalGetPName","function_tokens":["getListenerfv","=","alGetListenerfv",".","marshalGetPName"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/Listener.hs#L141-L141","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/Listener.hs","hash_val":62741,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"EmptyC a <* EmptyC b = EmptyC $ \\ nil leaf ->\n    a nil (b nil . const . leaf)","function_tokens":["EmptyC","a","<*","EmptyC","b","=","EmptyC","$","\\","nil","leaf","->","a","nil","(","b","nil",".","const",".","leaf",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L98-L99","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/GHC.hs","language":"haskell","identifier":"baseDynFlags","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"baseDynFlags = defaultDynFlags GHCEx.fakeSettings GHCEx.fakeLlvmConfig","function_tokens":["baseDynFlags","=","defaultDynFlags","GHCEx","fakeSettings","GHCEx","fakeLlvmConfig"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/GHC.hs#L71-L71","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/GHC.hs","hash_val":55906,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/QueryUtils.hs","language":"haskell","identifier":"marshalStringName","parameters":"x","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"marshalStringName x = case x of\n   Vendor -> al_VENDOR\n   Renderer -> al_RENDERER\n   Version -> al_VERSION\n   Extensions -> al_EXTENSIONS\n   ALErrorCategory e -> e","function_tokens":["marshalStringName","x","=","case","x","of","Vendor","->","al_VENDOR","Renderer","->","al_RENDERER","Version","->","al_VERSION","Extensions","->","al_EXTENSIONS","ALErrorCategory","e","->","e"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/QueryUtils.hs#L111-L118","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/QueryUtils.hs","hash_val":62378,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"evalEmpty","parameters":"","argument_list":"","return_statement":"","docstring":"Run an 'Empty' effect, discarding its result.  This is convenient for using 'empty' to signal early returns without needing to know whether control exited normally or not.  @ 'evalEmpty' = 'runEmpty' ('pure' ()) ('const' ('pure' ())) @  @since 1.1.0.0","docstring_summary":"Run an 'Empty' effect, discarding its result.  This is convenient for using 'empty' to signal early returns without needing to know whether control exited normally or not.","docstring_tokens":["Run","an","Empty","effect","discarding","its","result",".","This","is","convenient","for","using","empty","to","signal","early","returns","without","needing","to","know","whether","control","exited","normally","or","not","."],"function":"evalEmpty = runEmpty (pure ()) (const (pure ()))","function_tokens":["evalEmpty","=","runEmpty","(","pure","(",")",")","(","const","(","pure","(",")",")",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L56-L56","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"isovector\/do-notation","sha":"919d3326fd191411cc507b74bc3eaffe0cdec1ce","path":"src\/Language\/Haskell\/DoNotation.hs","language":"haskell","identifier":"pure","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"pure = ireturn","function_tokens":["pure","=","ireturn"],"url":"https:\/\/github.com\/isovector\/do-notation\/blob\/919d3326fd191411cc507b74bc3eaffe0cdec1ce\/src\/Language\/Haskell\/DoNotation.hs#L53-L53","hash_key":"isovector\/do-notation:src\/Language\/Haskell\/DoNotation.hs","hash_val":58433,"partition":"test"}
{"repo":"spell-music\/temporal-media","sha":"b0508a6444714ac64d970d505e27f66daefc8ff1","path":"src\/Temporal\/Class.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"Infix 'str' function.","docstring_summary":"Infix 'str' function.","docstring_tokens":["Infix","str","function","."],"function":"(*|) = str","function_tokens":["(","*|",")","=","str"],"url":"https:\/\/github.com\/spell-music\/temporal-media\/blob\/b0508a6444714ac64d970d505e27f66daefc8ff1\/src\/Temporal\/Class.hs#L59-L59","hash_key":"spell-music\/temporal-media:src\/Temporal\/Class.hs","hash_val":63772,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Tabs.hs","language":"haskell","identifier":"removeTabs'","parameters":"x","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"removeTabs' x    = [x]","function_tokens":["removeTabs'","x","=","[","x","]"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Tabs.hs#L16-L16","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Tabs.hs","hash_val":59604,"partition":"test"}
{"repo":"ekmett\/intern","sha":"6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1","path":"Data\/Interned\/Internal\/String.hs","language":"haskell","identifier":"fromString","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"fromString = intern","function_tokens":["fromString","=","intern"],"url":"https:\/\/github.com\/ekmett\/intern\/blob\/6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1\/Data\/Interned\/Internal\/String.hs#L17-L17","hash_key":"ekmett\/intern:Data\/Interned\/Internal\/String.hs","hash_val":60522,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printImports","parameters":"maxCols align ls m","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------","docstring_summary":"------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------"],"function":"printImports maxCols align ls m = Editor.apply changes ls\n  where\n    groups = moduleImportGroups m\n    moduleStats = foldMap importStats . fmap GHC.unLoc $ concatMap toList groups\n    changes = foldMap (formatGroup maxCols align moduleStats) groups","function_tokens":["printImports","maxCols","align","ls","m","=","Editor","apply","changes","ls","where","groups","=","moduleImportGroups","m","moduleStats","=","foldMap","importStats",".","fmap","GHC","unLoc","$","concatMap","toList","groups","changes","=","foldMap","(","formatGroup","maxCols","align","moduleStats",")","groups"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L114-L120","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"printedImports","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"printedImports = flagEnds $ -- [P ()]\n                    (printImport separateLists) . GHC.unLoc <$>\n                    prepareImportList imports","function_tokens":["printedImports","=","flagEnds","$","-- [P ()]","(","printImport","separateLists",")",".","GHC","unLoc","<$>","prepareImportList","imports"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L226-L228","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"EmptyC f <*> EmptyC a = EmptyC $ \\ nil leaf ->\n    f nil (\\ f' -> a nil (leaf . f'))","function_tokens":["EmptyC","f","<*>","EmptyC","a","=","EmptyC","$","\\","nil","leaf","->","f","nil","(","\\","f'","->","a","nil","(","leaf",".","f'",")",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L86-L87","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"genFactor","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"genFactor = Gen.integral (Range.linear 0 100)","function_tokens":["genFactor","=","Gen","integral","(","Range","linear","0","100",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L111-L111","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"dst","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"dst = run . runCut (fmap . liftA2 (<|>) . runCut (fmap . (<|>) . pure) (pure empty) (pure cutfail)) (pure (pure empty)) (pure (pure cutfail))","function_tokens":["dst","=","run",".","runCut","(","fmap",".","liftA2","(","<|>",")",".","runCut","(","fmap",".","(","<|>",")",".","pure",")","(","pure","empty",")","(","pure","cutfail",")",")","(","pure","(","pure","empty",")",")","(","pure","(","pure","cutfail",")",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L122-L122","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Simulation.hs","language":"haskell","identifier":"liftByline","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"liftByline = evalPrimF","function_tokens":["liftByline","=","evalPrimF"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Simulation.hs#L115-L115","hash_key":"pjones\/byline:src\/Byline\/Internal\/Simulation.hs","hash_val":62617,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/Listener.hs","language":"haskell","identifier":"listenerVector6","parameters":"n (x, y)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"listenerVector6 n (x, y) = withArray [x, y] $ listenerfv n","function_tokens":["listenerVector6","n","(","x",",","y",")","=","withArray","[","x",",","y","]","$","listenerfv","n"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/Listener.hs#L130-L130","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/Listener.hs","hash_val":62741,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"runCut","parameters":"cons nil fail (CutC runCutC)","argument_list":"","return_statement":"","docstring":"Run a 'Cut' effect with continuations respectively interpreting 'pure' \/ '<|>', 'empty', and 'cutfail'.  @ runCut cons nil fail ('pure' a '<|>' 'empty') = cons a nil @ @ runCut cons nil fail 'cutfail' = fail @ @ runCut cons nil fail ('call' 'cutfail') = nil @  @since 1.0.0.0","docstring_summary":"Run a 'Cut' effect with continuations respectively interpreting 'pure' \/ '<|>', 'empty', and 'cutfail'.","docstring_tokens":["Run","a","Cut","effect","with","continuations","respectively","interpreting","pure","\/","<|",">","empty","and","cutfail","."],"function":"runCut cons nil fail (CutC runCutC) = runCutC cons nil fail","function_tokens":["runCut","cons","nil","fail","(","CutC","runCutC",")","=","runCutC","cons","nil","fail"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L49-L49","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"phi1","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"phi1 = radians 45","function_tokens":["phi1","=","radians","45"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L50-L50","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"ekmett\/intern","sha":"6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1","path":"Data\/Interned\/Internal\/String.hs","language":"haskell","identifier":"describe","parameters":"(c:cs)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"describe (c:cs) = Cons c cs","function_tokens":["describe","(","c",":","cs",")","=","Cons","c","cs"],"url":"https:\/\/github.com\/ekmett\/intern\/blob\/6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1\/Data\/Interned\/Internal\/String.hs#L35-L35","hash_key":"ekmett\/intern:Data\/Interned\/Internal\/String.hs","hash_val":60522,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"expr","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"expr = do\n  i <- term\n  call ((i +) <$ char '+' <* cut <*> expr\n    <|> pure i)","function_tokens":["expr","=","do","i","<-","term","call","(","(","i","+",")","<$","char","'+'","<*","cut","<*>","expr","<|>","pure","i",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L152-L157","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"ekmett\/intern","sha":"6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1","path":"Data\/Interned\/Internal\/String.hs","language":"haskell","identifier":"hashWithSalt","parameters":"s Nil","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"hashWithSalt s Nil         = s `hashWithSalt` (0 :: Int)","function_tokens":["hashWithSalt","s","Nil","=","s","`","hashWithSalt","`","(","0","::","Int",")"],"url":"https:\/\/github.com\/ekmett\/intern\/blob\/6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1\/Data\/Interned\/Internal\/String.hs#L45-L45","hash_key":"ekmett\/intern:Data\/Interned\/Internal\/String.hs","hash_val":60522,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"startingWith","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"startingWith = startWith","function_tokens":["startingWith","=","startWith"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L146-L146","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"src","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"src = fromMaybe (error \"importBlock: missing location\") .\n        GHC.srcSpanToRealSrcSpan . GHC.getLocA","function_tokens":["src","=","fromMaybe","(","error","\"importBlock: missing location\"",")",".","GHC","srcSpanToRealSrcSpan",".","GHC","getLocA"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L132-L133","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"ekmett\/intern","sha":"6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1","path":"Data\/Interned\/Internal\/String.hs","language":"haskell","identifier":"describe","parameters":"[]","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"describe []     = Nil","function_tokens":["describe","[","]","=","Nil"],"url":"https:\/\/github.com\/ekmett\/intern\/blob\/6ec6afc2b7c3c165bc29fae5a0d2f59a17afe9a1\/Data\/Interned\/Internal\/String.hs#L36-L36","hash_key":"ekmett\/intern:Data\/Interned\/Internal\/String.hs","hash_val":60522,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/Listener.hs","language":"haskell","identifier":"listener3f","parameters":"n x","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------","docstring_summary":"------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------"],"function":"listener3f n x = with x $ listenerfv n","function_tokens":["listener3f","n","x","=","with","x","$","listenerfv","n"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/Listener.hs#L127-L127","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/Listener.hs","hash_val":62741,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"defaultOptions","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"defaultOptions = Options\n    { importAlign     = Global\n    , listAlign       = AfterAlias\n    , padModuleNames  = True\n    , longListAlign   = Inline\n    , emptyListAlign  = Inherit\n    , listPadding     = LPConstant 4\n    , separateLists   = True\n    , spaceSurround   = False\n    , postQualified   = False\n    }","function_tokens":["defaultOptions","=","Options","{","importAlign","=","Global",",","listAlign","=","AfterAlias",",","padModuleNames","=","True",",","longListAlign","=","Inline",",","emptyListAlign","=","Inherit",",","listPadding","=","LPConstant","4",",","separateLists","=","True",",","spaceSurround","=","False",",","postQualified","=","False","}"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L62-L72","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"distance","parameters":"(x1, y1, z1) (x2, y2, z2)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"distance (x1, y1, z1) (x2, y2, z2) = sqrt ((x ** 2) + (y ** 2) + (z ** 2))\n      where\n        x = x1 - x2\n        y = y1 - y2\n        z = z1 - z2","function_tokens":["distance","(","x1",",","y1",",","z1",")","(","x2",",","y2",",","z2",")","=","sqrt","(","(","x","**","2",")","+","(","y","**","2",")","+","(","z","**","2",")",")","where","x","=","x1","-","x2","y","=","y1","-","y2","z","=","z1","-","z2"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L136-L141","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Simulation.hs","language":"haskell","identifier":"evalPrimF","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"evalPrimF = Free.iterM go\n  where\n    go :: PrimF (BylineT m a) -> BylineT m a\n    go = \\case\n      Say _ k -> k\n      AskLn s d k -> simulate s $ \\t ->\n        if Text.null t\n          then k (fromMaybe t d)\n          else k t\n      AskChar s k -> simulate s $ \\t ->\n        if Text.null t\n          then BylineT empty\n          else k (Text.head t)\n      AskPassword s _ k -> simulate s k\n      PushCompFunc f k ->\n        BylineT\n          ( lift . modify $ \\st ->\n              st {completionFunctions = f : completionFunctions st}\n          )\n          >> k\n      PopCompFunc k ->\n        BylineT\n          ( lift . modify $ \\st ->\n              case completionFunctions st of\n                [] -> st {completionFunctions = []}\n                _ : xs -> st {completionFunctions = xs}\n          )\n          >> k\n    simulate :: Stylized Text -> (Text -> BylineT m b) -> BylineT m b\n    simulate s f = do\n      BylineT (modify $ \\st -> st {precedingPrompt = renderText Plain s})\n      simfun <- BylineT (gets simulationFunction)\n      BylineT (lift simfun) >>= \\case\n        SimulatedInput t -> f t\n        SimulatedEOF -> BylineT empty\n\n-- | Discharge the 'MonadByline' effect using the given 'SimulationFunction'.\n--\n-- @since 1.0.0.0","function_tokens":["evalPrimF","=","Free","iterM","go","where","go","::","PrimF","(","BylineT","m","a",")","->","BylineT","m","a","go","=","\\","case","Say","_","k","->","k","AskLn","s","d","k","->","simulate","s","$","\\","t","->","if","Text","null","t","then","k","(","fromMaybe","t","d",")","else","k","t","AskChar","s","k","->","simulate","s","$","\\","t","->","if","Text","null","t","then","BylineT","empty","else","k","(","Text","head","t",")","AskPassword","s","_","k","->","simulate","s","k","PushCompFunc","f","k","->","BylineT","(","lift",".","modify","$","\\","st","->","st","{","completionFunctions","=","f",":","completionFunctions","st","}",")",">>","k","PopCompFunc","k","->","BylineT","(","lift",".","modify","$","\\","st","->","case","completionFunctions","st","of","[","]","->","st","{","completionFunctions","=","[","]","}","_",":","xs","->","st","{","completionFunctions","=","xs","}",")",">>","k","simulate","::","Stylized","Text","->","(","Text","->","BylineT","m","b",")","->","BylineT","m","b","simulate","s","f","=","do","BylineT","(","modify","$","\\","st","->","st","{","precedingPrompt","=","renderText","Plain","s","}",")","simfun","<-","BylineT","(","gets","simulationFunction",")","BylineT","(","lift","simfun",")",">>=","\\","case","SimulatedInput","t","->","f","t","SimulatedEOF","->","BylineT","empty","-- | Discharge the 'MonadByline' effect using the given 'SimulationFunction'.","--","-- @since 1.0.0.0"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Simulation.hs#L121-L160","hash_key":"pjones\/byline:src\/Byline\/Internal\/Simulation.hs","hash_val":62617,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Effect\/Cull.hs","language":"haskell","identifier":"cull","parameters":"m","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"cull m = send (Cull m)","function_tokens":["cull","m","=","send","(","Cull","m",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Effect\/Cull.hs#L39-L39","hash_key":"fused-effects\/fused-effects:src\/Control\/Effect\/Cull.hs","hash_val":61623,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"theta","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"theta = n * (long - referenceLong)","function_tokens":["theta","=","n","*","(","long","-","referenceLong",")"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L60-L60","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"foldStream","parameters":"f acc","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------ Collecting ------------------------------------------------------------------------------ Like a left fold over all the stream's produced values.","docstring_summary":"------------------------------------------------------------------------------ Collecting ------------------------------------------------------------------------------ Like a left fold over all the stream's produced values.","docstring_tokens":["------------------------------------------------------------------------------","Collecting","------------------------------------------------------------------------------","Like","a","left","fold","over","all","the","stream","s","produced","values","."],"function":"foldStream f acc = VarT $ \\e ->\n    case e of\n      Just  a -> let acc' = f acc a\n                 in return (acc', foldStream f acc')\n      Nothing -> return (acc, foldStream f acc)\n\n\n-- | Produces the given value until the input events produce a value, then\n-- produce that value until a new input event produces. This always holds\n-- the last produced value, starting with the given value.\n--\n-- @\n-- time '>>>' 'Control.Varying.Time.after' 3 '>>>' 'startingWith' 0\n-- @\n--\n-- >>> :{\n-- let v = onWhen (== 3) >>> startingWith 0\n-- in testVarOver v [0, 1, 2, 3, 4]\n-- >>> :}\n-- 0\n-- 0\n-- 0\n-- 3\n-- 3","function_tokens":["foldStream","f","acc","=","VarT","$","\\","e","->","case","e","of","Just","a","->","let","acc'","=","f","acc","a","in","return","(","acc'",",","foldStream","f","acc'",")","Nothing","->","return","(","acc",",","foldStream","f","acc",")","-- | Produces the given value until the input events produce a value, then","-- produce that value until a new input event produces. This always holds","-- the last produced value, starting with the given value.","--","-- @","-- time '>>>' 'Control.Varying.Time.after' 3 '>>>' 'startingWith' 0","-- @","--","-- >>> :{","-- let v = onWhen (== 3) >>> startingWith 0","-- in testVarOver v [0, 1, 2, 3, 4]","-- >>> :}","-- 0","-- 0","-- 0","-- 3","-- 3"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L117-L141","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"sebastiaanvisser\/fclabels","sha":"b2c6d1d6677f301cd8e24dfa835494a55f034b8c","path":"src\/Data\/Label\/Total.hs","language":"haskell","identifier":"set","parameters":"","argument_list":"","return_statement":"","docstring":"Get the setter function from a lens.","docstring_summary":"Get the setter function from a lens.","docstring_tokens":["Get","the","setter","function","from","a","lens","."],"function":"set = curry . Poly.set","function_tokens":["set","=","curry",".","Poly","set"],"url":"https:\/\/github.com\/sebastiaanvisser\/fclabels\/blob\/b2c6d1d6677f301cd8e24dfa835494a55f034b8c\/src\/Data\/Label\/Total.hs#L69-L69","hash_key":"sebastiaanvisser\/fclabels:src\/Data\/Label\/Total.hs","hash_val":65100,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"bonne","parameters":"(long, lat)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"bonne (long, lat) = (rho * (sin e), (cot phi1 - rho * (cos e)))\n    where rho = (cot phi1) + phi1 - lat\n          e = (long - meridian) * (cos lat) \/ rho\n          phi1 = radians 45 -- standard parallel @ 45 N \n          meridian = radians (-77.0369) -- central meridian @ dc\n          cot = (1\/) . tan\n\n-- | Albers projection for a given reference point. To make it usable you can\n-- use\n-- > ablers washingtonDC","function_tokens":["bonne","(","long",",","lat",")","=","(","rho","*","(","sin","e",")",",","(","cot","phi1","-","rho","*","(","cos","e",")",")",")","where","rho","=","(","cot","phi1",")","+","phi1","-","lat","e","=","(","long","-","meridian",")","*","(","cos","lat",")","\/","rho","phi1","=","radians","45","-- standard parallel @ 45 N ","meridian","=","radians","(","-","77.0369",")","-- central meridian @ dc","cot","=","(","1","\/",")",".","tan","-- | Albers projection for a given reference point. To make it usable you can","-- use","-- > ablers washingtonDC"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L47-L57","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"filterE","parameters":"p v","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"filterE p v = (join . (check <$>)) <$> v\n  where check b = if p b then Just b else Nothing\n--------------------------------------------------------------------------------\n-- Using multiple streams\n--------------------------------------------------------------------------------\n-- | Combine two 'Event' streams. Produces an event only when both streams proc\n-- at the same time.","function_tokens":["filterE","p","v","=","(","join",".","(","check","<$>",")",")","<$>","v","where","check","b","=","if","p","b","then","Just","b","else","Nothing","--------------------------------------------------------------------------------","-- Using multiple streams","--------------------------------------------------------------------------------","-- | Combine two 'Event' streams. Produces an event only when both streams proc","-- at the same time."],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L172-L179","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"EmptyC a *> EmptyC b = EmptyC $ \\ nil ->\n    a nil . const . b nil","function_tokens":["EmptyC","a","*>","EmptyC","b","=","EmptyC","$","\\","nil","->","a","nil",".","const",".","b","nil"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L94-L95","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"kaizhang\/matrices","sha":"4d85abd72aecce03284c597497fbe6154d8919bd","path":"src\/Data\/Matrix\/Mutable.hs","language":"haskell","identifier":"new","parameters":"","argument_list":"","return_statement":"","docstring":"Create a mutable matrix without initialization","docstring_summary":"Create a mutable matrix without initialization","docstring_tokens":["Create","a","mutable","matrix","without","initialization"],"function":"new = MG.new","function_tokens":["new","=","MG","new"],"url":"https:\/\/github.com\/kaizhang\/matrices\/blob\/4d85abd72aecce03284c597497fbe6154d8919bd\/src\/Data\/Matrix\/Mutable.hs#L46-L46","hash_key":"kaizhang\/matrices:src\/Data\/Matrix\/Mutable.hs","hash_val":64671,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"nubOn","parameters":"f","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"nubOn f = go Set.empty\n where\n  go _   []              = []\n  go acc (x : xs)\n    | y `Set.member` acc = go acc xs\n    | otherwise          = x : go (Set.insert y acc) xs\n   where\n    y = f x","function_tokens":["nubOn","f","=","go","Set","empty","where","go","_","[","]","=","[","]","go","acc","(","x",":","xs",")","|","y","`","Set","member","`","acc","=","go","acc","xs","|","otherwise","=","x",":","go","(","Set","insert","y","acc",")","xs","where","y","=","f","x"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L476-L483","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"stringLiteral","parameters":"sl","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------","docstring_summary":"------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------"],"function":"stringLiteral sl = case GHC.sl_st sl of\n    GHC.NoSourceText -> show . GHC.unpackFS $ GHC.sl_fs sl\n    GHC.SourceText s -> s\n\n\n--------------------------------------------------------------------------------","function_tokens":["stringLiteral","sl","=","case","GHC","sl_st","sl","of","GHC","NoSourceText","->","show",".","GHC","unpackFS","$","GHC","sl_fs","sl","GHC","SourceText","s","->","s","--------------------------------------------------------------------------------"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L411-L417","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"examples\/colors.hs","language":"haskell","identifier":"colors","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"colors = [black, red, yellow, green, blue, cyan, magenta, white]","function_tokens":["colors","=","[","black",",","red",",","yellow",",","green",",","blue",",","cyan",",","magenta",",","white","]"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/examples\/colors.hs#L25-L25","hash_key":"pjones\/byline:examples\/colors.hs","hash_val":60086,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"lift","parameters":"m","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"lift m = ErrorC $ \\ _ leaf -> m >>= leaf","function_tokens":["lift","m","=","ErrorC","$","\\","_","leaf","->","m",">>=","leaf"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L101-L101","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"red","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"red = ColorCode ANSI.Dull ANSI.Red","function_tokens":["red","=","ColorCode","ANSI","Dull","ANSI","Red"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L48-L48","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"pure","parameters":"a","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"pure a = RSST $ \\_ s -> pure (a, s)","function_tokens":["pure","a","=","RSST","$","\\","_","s","->","pure","(","a",",","s",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L140-L140","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"never","parameters":"","argument_list":"","return_statement":"","docstring":"Never produces any 'Event' values.  @ 'never' = 'pure' 'Nothing' @","docstring_summary":"Never produces any 'Event' values.","docstring_tokens":["Never","produces","any","Event","values","."],"function":"never = pure Nothing","function_tokens":["never","=","pure","Nothing"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L206-L206","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"lower","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"lower = hdl . (<$ ctx)","function_tokens":["lower","=","hdl",".","(","<$","ctx",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L110-L110","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"CutC a >>= f = CutC $ \\ cons nil fail ->\n    a (\\ a' as -> runCut cons as fail (f a')) nil fail","function_tokens":["CutC","a",">>=","f","=","CutC","$","\\","cons","nil","fail","->","a","(","\\","a'","as","->","runCut","cons","as","fail","(","f","a'",")",")","nil","fail"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L86-L87","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"vivid","parameters":"(ColorCode _ c)","argument_list":"","return_statement":"","docstring":"Intensify an ANSI color.","docstring_summary":"Intensify an ANSI color.","docstring_tokens":["Intensify","an","ANSI","color","."],"function":"vivid (ColorCode _ c) = ColorCode ANSI.Vivid c","function_tokens":["vivid","(","ColorCode","_","c",")","=","ColorCode","ANSI","Vivid","c"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L58-L58","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"onUnique","parameters":"","argument_list":"","return_statement":"","docstring":"Triggers an @'Event' a@ when the input is distinct from the previous input.  @ 'use' b 'onUnique' :: ('Eq' x, 'Monad' m) => 'VarT' m x ('Event' b) @","docstring_summary":"Triggers an","docstring_tokens":["Triggers","an"],"function":"onUnique = VarT $ \\a -> return (Just a, trigger a)\n    where trigger a' = VarT $ \\a'' -> let e = if a' == a''\n                                             then Nothing\n                                             else Just a''\n                                   in return (e, trigger a'')\n\n-- | Triggers an @'Event' a@ when the condition is met.","function_tokens":["onUnique","=","VarT","$","\\","a","->","return","(","Just","a",",","trigger","a",")","where","trigger","a'","=","VarT","$","\\","a''","->","let","e","=","if","a'","==","a''","then","Nothing","else","Just","a''","in","return","(","e",",","trigger","a''",")","-- | Triggers an @'Event' a@ when the condition is met."],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L103-L110","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"fmap","parameters":"f m","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"fmap f m = RSST $ \\r s ->\n        fmap (\\ ~(a, (s', w)) -> (f a, (s', w))) $ runRSST' m r s","function_tokens":["fmap","f","m","=","RSST","$","\\","r","s","->","fmap","(","\\","~","(","a",",","(","s'",",","w",")",")","->","(","f","a",",","(","s'",",","w",")",")",")","$","runRSST'","m","r","s"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L123-L124","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"projectMap","parameters":"p","argument_list":"","return_statement":"","docstring":"Helper to apply a projection given a `Map`.","docstring_summary":"Helper to apply a projection given a `Map`.","docstring_tokens":["Helper","to","apply","a","projection","given","a","Map","."],"function":"projectMap p = over (labelledDistricts) (fmap (over _1  (fmap (project p))))","function_tokens":["projectMap","p","=","over","(","labelledDistricts",")","(","fmap","(","over","_1","(","fmap","(","project","p",")",")",")",")"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L74-L74","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"onTrue","parameters":"","argument_list":"","return_statement":"","docstring":"Triggers an @'Event' ()@ when the input value is 'True'.  @ 'use' b 'onTrue' :: 'Monad' m => 'VarT' m 'Bool' ('Event' b) @","docstring_summary":"Triggers an","docstring_tokens":["Triggers","an"],"function":"onTrue = var $ \\b -> if b then Just () else Nothing","function_tokens":["onTrue","=","var","$","\\","b","->","if","b","then","Just","(",")","else","Nothing"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L94-L94","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Effect\/State.hs","language":"haskell","identifier":"put","parameters":"s","argument_list":"","return_statement":"","docstring":"Replace the state value with a new value.  @ runState a ('put' b '>>' m) = runState b m @  @since 0.1.0.0","docstring_summary":"Replace the state value with a new value.","docstring_tokens":["Replace","the","state","value","with","a","new","value","."],"function":"put s = send (Put s)","function_tokens":["put","s","=","send","(","Put","s",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Effect\/State.hs#L68-L68","hash_key":"fused-effects\/fused-effects:src\/Control\/Effect\/State.hs","hash_val":56406,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/QueryUtils.hs","language":"haskell","identifier":"getString","parameters":"n","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"getString n = alGetString (marshalStringName n) >>= peekALString","function_tokens":["getString","n","=","alGetString","(","marshalStringName","n",")",">>=","peekALString"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/QueryUtils.hs#L119-L119","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/QueryUtils.hs","hash_val":62378,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"EmptyC a >>= f = EmptyC $ \\ nil leaf ->\n    a nil (runEmpty nil leaf . f)","function_tokens":["EmptyC","a",">>=","f","=","EmptyC","$","\\","nil","leaf","->","a","nil","(","runEmpty","nil","leaf",".","f",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L103-L104","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/GHC.hs","language":"haskell","identifier":"getStartLineUnsafe","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"getStartLineUnsafe = srcSpanStartLine . unsafeGetRealSrcSpan","function_tokens":["getStartLineUnsafe","=","srcSpanStartLine",".","unsafeGetRealSrcSpan"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/GHC.hs#L50-L50","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/GHC.hs","hash_val":55906,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"use","parameters":"a v","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------ Generating events from values ------------------------------------------------------------------------------  @ 'use' :: 'Monad' m => b -> 'VarT' m a ('Event' x) -> 'VarT' m a ('Event' b) @  Populates a varying Event with a value. This is meant to be used with the various @on...@ event triggers. For example, @ 'use' 1 'onTrue' @ produces values of @'Event' 1@ when the input value is 'True'.","docstring_summary":"------------------------------------------------------------------------------ Generating events from values ------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------","Generating","events","from","values","------------------------------------------------------------------------------"],"function":"use a v = (a <$) <$> v","function_tokens":["use","a","v","=","(","a","<$",")","<$>","v"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L86-L86","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/ALCboolean.hs","language":"haskell","identifier":"unmarshalALCboolean","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"unmarshalALCboolean = (\/= alc_FALSE)","function_tokens":["unmarshalALCboolean","=","(","\/=","alc_FALSE",")"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/ALCboolean.hs#L30-L30","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/ALCboolean.hs","hash_val":55829,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"stats","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"stats = case align' of\n        Global -> moduleStats {isAnyQualified = True}\n        File   -> moduleStats\n        Group  -> foldMap importStats unLocatedGroup\n        None   -> mempty","function_tokens":["stats","=","case","align'","of","Global","->","moduleStats","{","isAnyQualified","=","True","}","File","->","moduleStats","Group","->","foldMap","importStats","unLocatedGroup","None","->","mempty"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L154-L160","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"spell-music\/temporal-media","sha":"b0508a6444714ac64d970d505e27f66daefc8ff1","path":"src\/Temporal\/Class.hs","language":"haskell","identifier":"harMap","parameters":"f xs","argument_list":"","return_statement":"","docstring":"Transforms a sequence and then applies a har.","docstring_summary":"Transforms a sequence and then applies a har.","docstring_tokens":["Transforms","a","sequence","and","then","applies","a","har","."],"function":"harMap f xs = har $ fmap f xs","function_tokens":["harMap","f","xs","=","har","$","fmap","f","xs"],"url":"https:\/\/github.com\/spell-music\/temporal-media\/blob\/b0508a6444714ac64d970d505e27f66daefc8ff1\/src\/Temporal\/Class.hs#L78-L78","hash_key":"spell-music\/temporal-media:src\/Temporal\/Class.hs","hash_val":63772,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"module_","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"module_ = do\n            moduleNamePosition <- length <$> getCurrentLine\n            forM_ (GHC.ideclPkgQual decl) $ \\pkg ->\n                putText (stringLiteral pkg) >> space\n            putText (importModuleName decl)\n\n            -- Only print spaces if something follows.\n            let somethingFollows =\n                    isJust (GHC.ideclAs decl) || isHiding decl ||\n                    not (null $ GHC.ideclHiding decl)\n            when (padNames && somethingFollows) $ putText $ replicate\n                (isLongestImport stats - importModuleNameLength decl)\n                ' '\n            pure moduleNamePosition","function_tokens":["module_","=","do","moduleNamePosition","<-","length","<$>","getCurrentLine","forM_","(","GHC","ideclPkgQual","decl",")","$","\\","pkg","->","putText","(","stringLiteral","pkg",")",">>","space","putText","(","importModuleName","decl",")","-- Only print spaces if something follows.","let","somethingFollows","=","isJust","(","GHC","ideclAs","decl",")","||","isHiding","decl","||","not","(","null","$","GHC","ideclHiding","decl",")","when","(","padNames","&&","somethingFollows",")","$","putText","$","replicate","(","isLongestImport","stats","-","importModuleNameLength","decl",")","' '","pure","moduleNamePosition"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L176-L191","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"liftA2","parameters":"f (EmptyC a) (EmptyC b)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"liftA2 f (EmptyC a) (EmptyC b) = EmptyC $ \\ nil leaf ->\n    a nil (\\ a' -> b nil (leaf . f a'))","function_tokens":["liftA2","f","(","EmptyC","a",")","(","EmptyC","b",")","=","EmptyC","$","\\","nil","leaf","->","a","nil","(","\\","a'","->","b","nil","(","leaf",".","f","a'",")",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L90-L91","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Error\/Church.hs","language":"haskell","identifier":"","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ErrorC a >>= f = ErrorC $ \\ fail leaf -> a fail (runError fail leaf . f)","function_tokens":["ErrorC","a",">>=","f","=","ErrorC","$","\\","fail","leaf","->","a","fail","(","runError","fail","leaf",".","f",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Error\/Church.hs#L78-L78","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Error\/Church.hs","hash_val":62036,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"term","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"term = do\n  i <- factor\n  call ((i *) <$ char '*' <* cut <*> term\n    <|> pure i)","function_tokens":["term","=","do","i","<-","factor","call","(","(","i","*",")","<$","char","'*'","<*","cut","<*>","term","<|>","pure","i",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L158-L163","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"step","parameters":"columns","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------","docstring_summary":"------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------"],"function":"step columns = makeStep \"Imports (ghc-lib-parser)\" . printImports columns","function_tokens":["step","columns","=","makeStep","\"Imports (ghc-lib-parser)\"",".","printImports","columns"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L109-L109","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"isQualified","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"isQualified = (\/=) GHC.NotQualified . GHC.ideclQualified","function_tokens":["isQualified","=","(","\/=",")","GHC","NotQualified",".","GHC","ideclQualified"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L418-L418","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"decl","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"decl = GHC.unLoc ldecl","function_tokens":["decl","=","GHC","unLoc","ldecl"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L314-L314","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/TrailingWhitespace.hs","language":"haskell","identifier":"step","parameters":"","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------","docstring_summary":"------------------------------------------------------------------------------","docstring_tokens":["------------------------------------------------------------------------------"],"function":"step = makeStep \"TrailingWhitespace\" $ \\ls _ -> map dropTrailingWhitespace' ls\n  where\n    dropTrailingWhitespace' l = case l of\n      -- Preserve page breaks\n      \"\\12\" -> l\n      _     -> dropTrailingWhitespace l","function_tokens":["step","=","makeStep","\"TrailingWhitespace\"","$","\\","ls","_","->","map","dropTrailingWhitespace'","ls","where","dropTrailingWhitespace'","l","=","case","l","of","-- Preserve page breaks","\"\\12\"","->","l","_","->","dropTrailingWhitespace","l"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/TrailingWhitespace.hs#L22-L27","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/TrailingWhitespace.hs","hash_val":57534,"partition":"test"}
{"repo":"sebastiaanvisser\/fclabels","sha":"b2c6d1d6677f301cd8e24dfa835494a55f034b8c","path":"src\/Data\/Label\/Total.hs","language":"haskell","identifier":"get","parameters":"","argument_list":"","return_statement":"","docstring":"Get the getter function from a lens.","docstring_summary":"Get the getter function from a lens.","docstring_tokens":["Get","the","getter","function","from","a","lens","."],"function":"get = Poly.get","function_tokens":["get","=","Poly","get"],"url":"https:\/\/github.com\/sebastiaanvisser\/fclabels\/blob\/b2c6d1d6677f301cd8e24dfa835494a55f034b8c\/src\/Data\/Label\/Total.hs#L59-L59","hash_key":"sebastiaanvisser\/fclabels:src\/Data\/Label\/Total.hs","hash_val":65100,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"marshalContextAttribute","parameters":"a","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"marshalContextAttribute a = case a of\n   Frequency f -> (alc_FREQUENCY, round f)\n   Refresh r -> (alc_REFRESH, round r)\n   Sync s -> (alc_SYNC, fromIntegral (marshalALCboolean s))\n   MonoSources m -> (alc_MONO_SOURCES, fromIntegral m)\n   StereoSources s -> (alc_STEREO_SOURCES, fromIntegral s)","function_tokens":["marshalContextAttribute","a","=","case","a","of","Frequency","f","->","(","alc_FREQUENCY",",","round","f",")","Refresh","r","->","(","alc_REFRESH",",","round","r",")","Sync","s","->","(","alc_SYNC",",","fromIntegral","(","marshalALCboolean","s",")",")","MonoSources","m","->","(","alc_MONO_SOURCES",",","fromIntegral","m",")","StereoSources","s","->","(","alc_STEREO_SOURCES",",","fromIntegral","s",")"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L72-L79","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"green","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"green = ColorCode ANSI.Dull ANSI.Green","function_tokens":["green","=","ColorCode","ANSI","Dull","ANSI","Green"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L49-L49","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"yellow","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"yellow = ColorCode ANSI.Dull ANSI.Yellow","function_tokens":["yellow","=","ColorCode","ANSI","Dull","ANSI","Yellow"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L50-L50","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/QueryUtils.hs","language":"haskell","identifier":"marshalGetPName","parameters":"x","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"marshalGetPName x = case x of\n   GetDistanceModel -> al_DISTANCE_MODEL\n   GetDopplerFactor -> al_DOPPLER_FACTOR\n   GetSpeedOfSound -> al_SPEED_OF_SOUND\n\n   GetPosition -> al_POSITION\n   GetVelocity -> al_VELOCITY\n   GetGain -> al_GAIN\n\n   GetOrientation -> al_ORIENTATION\n\n   GetSourceRelative -> al_SOURCE_RELATIVE\n   GetSourceType -> al_SOURCE_TYPE\n   GetLooping -> al_LOOPING\n   GetBuffer -> al_BUFFER\n   GetBuffersQueued -> al_BUFFERS_QUEUED\n   GetBuffersProcessed -> al_BUFFERS_PROCESSED\n   GetMinGain -> al_MIN_GAIN\n   GetMaxGain -> al_MAX_GAIN\n   GetReferenceDistance -> al_REFERENCE_DISTANCE\n   GetRolloffFactor -> al_ROLLOFF_FACTOR\n   GetMaxDistance -> al_MAX_DISTANCE\n   GetPitch -> al_PITCH\n   GetDirection -> al_DIRECTION\n   GetConeInnerAngle -> al_CONE_INNER_ANGLE\n   GetConeOuterAngle -> al_CONE_OUTER_ANGLE\n   GetConeOuterGain -> al_CONE_OUTER_GAIN\n   GetSecOffset -> al_SEC_OFFSET\n   GetSampleOffset -> al_SAMPLE_OFFSET\n   GetByteOffset -> al_BYTE_OFFSET\n   GetSourceState -> al_SOURCE_STATE\n\n--------------------------------------------------------------------------------","function_tokens":["marshalGetPName","x","=","case","x","of","GetDistanceModel","->","al_DISTANCE_MODEL","GetDopplerFactor","->","al_DOPPLER_FACTOR","GetSpeedOfSound","->","al_SPEED_OF_SOUND","GetPosition","->","al_POSITION","GetVelocity","->","al_VELOCITY","GetGain","->","al_GAIN","GetOrientation","->","al_ORIENTATION","GetSourceRelative","->","al_SOURCE_RELATIVE","GetSourceType","->","al_SOURCE_TYPE","GetLooping","->","al_LOOPING","GetBuffer","->","al_BUFFER","GetBuffersQueued","->","al_BUFFERS_QUEUED","GetBuffersProcessed","->","al_BUFFERS_PROCESSED","GetMinGain","->","al_MIN_GAIN","GetMaxGain","->","al_MAX_GAIN","GetReferenceDistance","->","al_REFERENCE_DISTANCE","GetRolloffFactor","->","al_ROLLOFF_FACTOR","GetMaxDistance","->","al_MAX_DISTANCE","GetPitch","->","al_PITCH","GetDirection","->","al_DIRECTION","GetConeInnerAngle","->","al_CONE_INNER_ANGLE","GetConeOuterAngle","->","al_CONE_OUTER_ANGLE","GetConeOuterGain","->","al_CONE_OUTER_GAIN","GetSecOffset","->","al_SEC_OFFSET","GetSampleOffset","->","al_SAMPLE_OFFSET","GetByteOffset","->","al_BYTE_OFFSET","GetSourceState","->","al_SOURCE_STATE","--------------------------------------------------------------------------------"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/QueryUtils.hs#L69-L103","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/QueryUtils.hs","hash_val":62378,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"cyan","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"cyan = ColorCode ANSI.Dull ANSI.Cyan","function_tokens":["cyan","=","ColorCode","ANSI","Dull","ANSI","Cyan"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L53-L53","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"reader","parameters":"f","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"reader f = RSST $ \\r s -> return (f r, s)","function_tokens":["reader","f","=","RSST","$","\\","r","s","->","return","(","f","r",",","s",")"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L169-L169","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"lambda0","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"lambda0 = radians (-77.0369)","function_tokens":["lambda0","=","radians","(","-","77.0369",")"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L37-L37","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"vivid","parameters":"c","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"vivid c = c","function_tokens":["vivid","c","=","c"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L59-L59","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"rho","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"rho = sqrt (c - 2 * n * (sin lat)) \/ n","function_tokens":["rho","=","sqrt","(","c","-","2","*","n","*","(","sin","lat",")",")","\/","n"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L62-L62","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/PeekPoke.hs","language":"haskell","identifier":"peek6","parameters":"f ptr","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"peek6 f ptr = do\n   x <- peekElemOff ptr 0\n   y <- peekElemOff ptr 1\n   z <- peekElemOff ptr 2\n   u <- peekElemOff ptr 3\n   v <- peekElemOff ptr 4\n   w <- peekElemOff ptr 5\n   return $ (f x y z, f u v w)","function_tokens":["peek6","f","ptr","=","do","x","<-","peekElemOff","ptr","0","y","<-","peekElemOff","ptr","1","z","<-","peekElemOff","ptr","2","u","<-","peekElemOff","ptr","3","v","<-","peekElemOff","ptr","4","w","<-","peekElemOff","ptr","5","return","$","(","f","x","y","z",",","f","u","v","w",")"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/PeekPoke.hs#L52-L59","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/PeekPoke.hs","hash_val":65272,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/AL\/Format.hs","language":"haskell","identifier":"marshalFormat","parameters":"x","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"marshalFormat x = case x of\n   Mono8 -> al_FORMAT_MONO8\n   Mono16 -> al_FORMAT_MONO16\n   Stereo8 -> al_FORMAT_STEREO8\n   Stereo16 -> al_FORMAT_STEREO16","function_tokens":["marshalFormat","x","=","case","x","of","Mono8","->","al_FORMAT_MONO8","Mono16","->","al_FORMAT_MONO16","Stereo8","->","al_FORMAT_STEREO8","Stereo16","->","al_FORMAT_STEREO16"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/AL\/Format.hs#L37-L43","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/AL\/Format.hs","hash_val":57519,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"colorAsANSI","parameters":"(ColorCode _ c)","argument_list":"","return_statement":"","docstring":"Convert a Byline color to an ANSI color.  @since 1.0.0.0","docstring_summary":"Convert a Byline color to an ANSI color.","docstring_tokens":["Convert","a","Byline","color","to","an","ANSI","color","."],"function":"colorAsANSI (ColorCode _ c) = c","function_tokens":["colorAsANSI","(","ColorCode","_","c",")","=","c"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L96-L96","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"mokus0\/erf-native","sha":"e371ba6821b2d9f18d19d010b863e5eb00ef681a","path":"src\/Data\/Number\/Erf.hs","language":"haskell","identifier":"erfc","parameters":"x","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"erfc x = 2 * normcdf (-x * sqrt 2)","function_tokens":["erfc","x","=","2","*","normcdf","(","-","x","*","sqrt","2",")"],"url":"https:\/\/github.com\/mokus0\/erf-native\/blob\/e371ba6821b2d9f18d19d010b863e5eb00ef681a\/src\/Data\/Number\/Erf.hs#L22-L22","hash_key":"mokus0\/erf-native:src\/Data\/Number\/Erf.hs","hash_val":59144,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Cut\/Church.hs","language":"haskell","identifier":"pure","parameters":"a","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"pure a = CutC (\\ cons nil _ -> cons a nil)","function_tokens":["pure","a","=","CutC","(","\\","cons","nil","_","->","cons","a","nil",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Cut\/Church.hs#L71-L71","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Cut\/Church.hs","hash_val":59132,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"arbNested","parameters":"_ 0","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"arbNested _ 0 = pure []","function_tokens":["arbNested","_","0","=","pure","[","]"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L104-L104","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"ghulette\/language-c-comments","sha":"64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865","path":"examples\/Main.hs","language":"haskell","identifier":"posn","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"posn = commentPosition c","function_tokens":["posn","=","commentPosition","c"],"url":"https:\/\/github.com\/ghulette\/language-c-comments\/blob\/64e5a7e06be8cdc74d0a194e5a3fbeb5555ff865\/examples\/Main.hs#L12-L12","hash_key":"ghulette\/language-c-comments:examples\/Main.hs","hash_val":57320,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"fail","parameters":"msg","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"fail msg = RSST $ \\_ _ -> fail msg","function_tokens":["fail","msg","=","RSST","$","\\","_","_","->","fail","msg"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L133-L133","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Trace\/Printing.hs","language":"haskell","identifier":"runTrace","parameters":"(TraceC m)","argument_list":"","return_statement":"","docstring":"Run a 'Trace' effect, printing traces to 'stderr'.  @ 'runTrace' ('trace' s) = 'liftIO' ('putStrLn' s) @ @ 'runTrace' ('pure' a) = 'pure' a @  @since 1.0.0.0","docstring_summary":"Run a 'Trace' effect, printing traces to 'stderr'.","docstring_tokens":["Run","a","Trace","effect","printing","traces","to","stderr","."],"function":"runTrace (TraceC m) = m","function_tokens":["runTrace","(","TraceC","m",")","=","m"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Trace\/Printing.hs#L40-L40","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Trace\/Printing.hs","hash_val":65180,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Simulation.hs","language":"haskell","identifier":"state","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"state = lift . state","function_tokens":["state","=","lift",".","state"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Simulation.hs#L109-L109","hash_key":"pjones\/byline:src\/Byline\/Internal\/Simulation.hs","hash_val":62617,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"importBlock","parameters":"group","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"importBlock group = Block\n    (GHC.srcSpanStartLine . src $ NonEmpty.head group)\n    (GHC.srcSpanEndLine   . src $ NonEmpty.last group)\n  where\n    src = fromMaybe (error \"importBlock: missing location\") .\n        GHC.srcSpanToRealSrcSpan . GHC.getLocA","function_tokens":["importBlock","group","=","Block","(","GHC","srcSpanStartLine",".","src","$","NonEmpty","head","group",")","(","GHC","srcSpanEndLine",".","src","$","NonEmpty","last","group",")","where","src","=","fromMaybe","(","error","\"importBlock: missing location\"",")",".","GHC","srcSpanToRealSrcSpan",".","GHC","getLocA"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L128-L135","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"dull","parameters":"(ColorCode _ c)","argument_list":"","return_statement":"","docstring":"Dull an ANSI color.","docstring_summary":"Dull an ANSI color.","docstring_tokens":["Dull","an","ANSI","color","."],"function":"dull (ColorCode _ c) = ColorCode ANSI.Dull c","function_tokens":["dull","(","ColorCode","_","c",")","=","ColorCode","ANSI","Dull","c"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L63-L63","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"once","parameters":"b","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"once b = VarT $ \\_ -> return (Just b, never)","function_tokens":["once","b","=","VarT","$","\\","_","->","return","(","Just","b",",","never",")"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L198-L198","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"nw","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"nw = ow <> w","function_tokens":["nw","=","ow","<>","w"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L174-L174","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"mrkkrp\/zip","sha":"770801e246a6914e1b583e03d204046fc56f22d8","path":"Codec\/Archive\/Zip\/Unix.hs","language":"haskell","identifier":"toFileMode","parameters":"attrs","argument_list":"","return_statement":"","docstring":"Convert external attributes to the file info.  >>> toFileMode 2179792896 0o0755  @since 1.4.0","docstring_summary":"Convert external attributes to the file info.  >>> toFileMode 2179792896 0o0755","docstring_tokens":["Convert","external","attributes","to","the","file","info",".",">>>","toFileMode","2179792896","0o0755"],"function":"toFileMode attrs = fromIntegral $ (attrs `shiftR` 16) .&. 0x0fff","function_tokens":["toFileMode","attrs","=","fromIntegral","$","(","attrs","`","shiftR","`","16",")",".&.","0x0fff"],"url":"https:\/\/github.com\/mrkkrp\/zip\/blob\/770801e246a6914e1b583e03d204046fc56f22d8\/Codec\/Archive\/Zip\/Unix.hs#L30-L30","hash_key":"mrkkrp\/zip:Codec\/Archive\/Zip\/Unix.hs","hash_val":55982,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"mempty","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"mempty  = ImportStats 0 False False False","function_tokens":["mempty","=","ImportStats","0","False","False","False"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L393-L393","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/GHC.hs","language":"haskell","identifier":"epAnnComments","parameters":"GHC.EpAnnNotUsed","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"epAnnComments GHC.EpAnnNotUsed = []","function_tokens":["epAnnComments","GHC","EpAnnNotUsed","=","[","]"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/GHC.hs#L77-L77","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/GHC.hs","hash_val":55906,"partition":"test"}
{"repo":"bartavelle\/stateWriter","sha":"2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34","path":"Control\/Monad\/Trans\/RSS\/Lazy.hs","language":"haskell","identifier":"local","parameters":"f rw","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"local f rw = RSST $ \\r s -> runRSST' rw (f r) s","function_tokens":["local","f","rw","=","RSST","$","\\","r","s","->","runRSST'","rw","(","f","r",")","s"],"url":"https:\/\/github.com\/bartavelle\/stateWriter\/blob\/2f7bfc9171ea6b7e1d3f564f08b6f5a74f049b34\/Control\/Monad\/Trans\/RSS\/Lazy.hs#L168-L168","hash_key":"bartavelle\/stateWriter:Control\/Monad\/Trans\/RSS\/Lazy.hs","hash_val":57238,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"unmarshalContextAttribute","parameters":"a@(x,y)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"unmarshalContextAttribute a@(x,y)\n   | x == alc_FREQUENCY = Frequency (fromIntegral y)\n   | x == alc_REFRESH = Refresh (fromIntegral y)\n   | x == alc_SYNC = Sync (unmarshalALCboolean (fromIntegral y))\n   | x == alc_MONO_SOURCES = MonoSources (fromIntegral y)\n   | x == alc_STEREO_SOURCES = StereoSources (fromIntegral y)\n   | otherwise = error (\"unmarshalContextAttribute: illegal value \" ++ show a)","function_tokens":["unmarshalContextAttribute","a","@","(","x",",","y",")","|","x","==","alc_FREQUENCY","=","Frequency","(","fromIntegral","y",")","|","x","==","alc_REFRESH","=","Refresh","(","fromIntegral","y",")","|","x","==","alc_SYNC","=","Sync","(","unmarshalALCboolean","(","fromIntegral","y",")",")","|","x","==","alc_MONO_SOURCES","=","MonoSources","(","fromIntegral","y",")","|","x","==","alc_STEREO_SOURCES","=","StereoSources","(","fromIntegral","y",")","|","otherwise","=","error","(","\"unmarshalContextAttribute: illegal value \"","++","show","a",")"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L80-L86","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"ieMerge","parameters":"(GHC.IEThingWith x0 n0 w0 ns0) (GHC.IEThingWith _ _ w1 ns1)","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"ieMerge (GHC.IEThingWith x0 n0 w0 ns0) (GHC.IEThingWith _ _ w1 ns1)\n    | w0 \/= w1  = Nothing\n    | otherwise = Just $\n        -- TODO: sort the `ns0 ++ ns1`?\n        GHC.IEThingWith x0 n0 w0 (nubOn GHC.lieWrappedName $ ns0 ++ ns1)","function_tokens":["ieMerge","(","GHC","IEThingWith","x0","n0","w0","ns0",")","(","GHC","IEThingWith","_","_","w1","ns1",")","|","w0","\/=","w1","=","Nothing","|","otherwise","=","Just","$","-- TODO: sort the `ns0 ++ ns1`?","GHC","IEThingWith","x0","n0","w0","(","nubOn","GHC","lieWrappedName","$","ns0","++","ns1",")"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L466-L470","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"sortColors","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"sortColors = sortBy (comparing snd)","function_tokens":["sortColors","=","sortBy","(","comparing","snd",")"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L144-L144","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"sebastiaanvisser\/fclabels","sha":"b2c6d1d6677f301cd8e24dfa835494a55f034b8c","path":"src\/Data\/Label\/Failing.hs","language":"haskell","identifier":"set","parameters":"l v","argument_list":"","return_statement":"","docstring":"Setter for a lens that can fail. When the field to which the lens points is not accessible this function returns 'Left'.","docstring_summary":"Setter for a lens that can fail. When the field to which the lens points is not accessible this function returns 'Left'.","docstring_tokens":["Setter","for","a","lens","that","can","fail",".","When","the","field","to","which","the","lens","points","is","not","accessible","this","function","returns","Left","."],"function":"set l v = runKleisli (Poly.set l . arr (v,))","function_tokens":["set","l","v","=","runKleisli","(","Poly","set","l",".","arr","(","v",",",")",")"],"url":"https:\/\/github.com\/sebastiaanvisser\/fclabels\/blob\/b2c6d1d6677f301cd8e24dfa835494a55f034b8c\/src\/Data\/Label\/Failing.hs#L72-L72","hash_key":"sebastiaanvisser\/fclabels:src\/Data\/Label\/Failing.hs","hash_val":56785,"partition":"test"}
{"repo":"sebastiaanvisser\/fclabels","sha":"b2c6d1d6677f301cd8e24dfa835494a55f034b8c","path":"src\/Data\/Label\/Total.hs","language":"haskell","identifier":"modify","parameters":"","argument_list":"","return_statement":"","docstring":"Get the modifier function from a lens.","docstring_summary":"Get the modifier function from a lens.","docstring_tokens":["Get","the","modifier","function","from","a","lens","."],"function":"modify = curry . Poly.modify","function_tokens":["modify","=","curry",".","Poly","modify"],"url":"https:\/\/github.com\/sebastiaanvisser\/fclabels\/blob\/b2c6d1d6677f301cd8e24dfa835494a55f034b8c\/src\/Data\/Label\/Total.hs#L64-L64","hash_key":"sebastiaanvisser\/fclabels:src\/Data\/Label\/Total.hs","hash_val":65100,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Effect\/Reader\/Labelled.hs","language":"haskell","identifier":"ask","parameters":"","argument_list":"","return_statement":"","docstring":"Retrieve the environment value.  @ runReader a ('runLabelled' @label ('ask' @label) '>>=' k) = runReader a (k a) @  @since 1.0.2.0","docstring_summary":"Retrieve the environment value.","docstring_tokens":["Retrieve","the","environment","value","."],"function":"ask = runUnderLabel @label R.ask","function_tokens":["ask","=","runUnderLabel","@","label","R","ask"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Effect\/Reader\/Labelled.hs#L34-L34","hash_key":"fused-effects\/fused-effects:src\/Control\/Effect\/Reader\/Labelled.hs","hash_val":56885,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"before","parameters":"t","argument_list":"","return_statement":"","docstring":"Emits events before accumulating t of input dt. Note that as soon as we have accumulated >= t we stop emitting events and therefore an event will never be emitted exactly at time == t.","docstring_summary":"Emits events before accumulating t of input dt. Note that as soon as we have accumulated >= t we stop emitting events and therefore an event will never be emitted exactly at time == t.","docstring_tokens":["Emits","events","before","accumulating","t","of","input","dt",".","Note","that","as","soon","as","we","have","accumulated",">","=","t","we","stop","emitting","events","and","therefore","an","event","will","never","be","emitted","exactly","at","time","==","t","."],"function":"before t = accumulate (+) 0 >>> onWhen (< t)","function_tokens":["before","t","=","accumulate","(","+",")","0",">>>","onWhen","(","<","t",")"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L220-L220","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"haskell-openal\/OpenAL","sha":"5131984f172dffc43ca8b482f215d120523fb137","path":"src\/Sound\/OpenAL\/ALC\/Context.hs","language":"haskell","identifier":"currentContext","parameters":"","argument_list":"","return_statement":"","docstring":"Contains 'Just' the current context with respect to OpenAL operation, or 'Nothing' if there is no current context. Setting it to the latter is useful when shutting OpenAL down. The state variable applies to the device that the context was created for. For each OS process (usually this means for each application), only one context can be current at any given time. All AL commands apply to the current context. Commands that affect objects shared among contexts (e.g. buffers) have side effects on other contexts.","docstring_summary":"Contains 'Just' the current context with respect to OpenAL operation, or 'Nothing' if there is no current context. Setting it to the latter is useful when shutting OpenAL down. The state variable applies to the device that the context was created for. For each OS process (usually this means for each application), only one context can be current at any given time. All AL commands apply to the current context. Commands that affect objects shared among contexts (e.g. buffers) have side effects on other contexts.","docstring_tokens":["Contains","Just","the","current","context","with","respect","to","OpenAL","operation","or","Nothing","if","there","is","no","current","context",".","Setting","it","to","the","latter","is","useful","when","shutting","OpenAL","down",".","The","state","variable","applies","to","the","device","that","the","context","was","created","for",".","For","each","OS","process","(","usually","this","means","for","each","application",")","only","one","context","can","be","current","at","any","given","time",".","All","AL","commands","apply","to","the","current","context",".","Commands","that","affect","objects","shared","among","contexts","(","e",".","g",".","buffers",")","have","side","effects","on","other","contexts","."],"function":"currentContext = makeStateVar getCurrentContext makeContextCurrent","function_tokens":["currentContext","=","makeStateVar","getCurrentContext","makeContextCurrent"],"url":"https:\/\/github.com\/haskell-openal\/OpenAL\/blob\/5131984f172dffc43ca8b482f215d120523fb137\/src\/Sound\/OpenAL\/ALC\/Context.hs#L120-L120","hash_key":"haskell-openal\/OpenAL:src\/Sound\/OpenAL\/ALC\/Context.hs","hash_val":62009,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"rho","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"rho = (cot phi1) + phi1 - lat","function_tokens":["rho","=","(","cot","phi1",")","+","phi1","-","lat"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L48-L48","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Ordering.hs","language":"haskell","identifier":"compareLIE","parameters":"","argument_list":"","return_statement":"","docstring":"------------------------------------------------------------------------------ NOTE: Can we get rid off this by adding a properly sorting newtype around 'RdrName'?","docstring_summary":"------------------------------------------------------------------------------ NOTE: Can we get rid off this by adding a properly sorting newtype around 'RdrName'?","docstring_tokens":["------------------------------------------------------------------------------","NOTE",":","Can","we","get","rid","off","this","by","adding","a","properly","sorting","newtype","around","RdrName","?"],"function":"compareLIE = comparing $ ieKey . unLoc\n  where\n    -- | The implementation is a bit hacky to get proper sorting for input specs:\n    -- constructors first, followed by functions, and then operators.\n    ieKey :: IE GhcPs -> (Int, String)\n    ieKey = \\case\n        IEVar _ n            -> nameKey n\n        IEThingAbs _ n       -> nameKey n\n        IEThingAll _ n       -> nameKey n\n        IEThingWith _ n _ _  -> nameKey n\n        IEModuleContents _ n -> nameKey n\n        _                    -> (2, \"\")\n\n\n--------------------------------------------------------------------------------","function_tokens":["compareLIE","=","comparing","$","ieKey",".","unLoc","where","-- | The implementation is a bit hacky to get proper sorting for input specs:","-- constructors first, followed by functions, and then operators.","ieKey","::","IE","GhcPs","->","(","Int",",","String",")","ieKey","=","\\","case","IEVar","_","n","->","nameKey","n","IEThingAbs","_","n","->","nameKey","n","IEThingAll","_","n","->","nameKey","n","IEThingWith","_","n","_","_","->","nameKey","n","IEModuleContents","_","n","->","nameKey","n","_","->","(","2",",","\"\"",")","--------------------------------------------------------------------------------"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Ordering.hs#L43-L58","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Ordering.hs","hash_val":63296,"partition":"test"}
{"repo":"haskell\/stylish-haskell","sha":"39f5c3a4a0950654e6fa402e39fef32e0dc9a647","path":"lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","language":"haskell","identifier":"go","parameters":"_   []","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"go _   []              = []","function_tokens":["go","_","[","]","=","[","]"],"url":"https:\/\/github.com\/haskell\/stylish-haskell\/blob\/39f5c3a4a0950654e6fa402e39fef32e0dc9a647\/lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs#L478-L478","hash_key":"haskell\/stylish-haskell:lib\/Language\/Haskell\/Stylish\/Step\/Imports.hs","hash_val":57835,"partition":"test"}
{"repo":"vmchale\/hgis","sha":"5bd38f150a8d237dc78501859352bf1cf734f92b","path":"src\/GIS\/Math\/Projections.hs","language":"haskell","identifier":"meridian","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"meridian = radians (-98.5795)","function_tokens":["meridian","=","radians","(","-","98.5795",")"],"url":"https:\/\/github.com\/vmchale\/hgis\/blob\/5bd38f150a8d237dc78501859352bf1cf734f92b\/src\/GIS\/Math\/Projections.hs#L42-L42","hash_key":"vmchale\/hgis:src\/GIS\/Math\/Projections.hs","hash_val":64793,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"examples\/Parser.hs","language":"haskell","identifier":"alg","parameters":"hdl sig ctx","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"alg hdl sig ctx = case sig of\n    L (Satisfy p) -> do\n      input <- ParseC get\n      case input of\n        c:cs | p c -> c <$ ctx <$ ParseC (put cs)\n        _          -> empty\n    R other       -> ParseC (alg (runParseC . hdl) (R other) ctx)","function_tokens":["alg","hdl","sig","ctx","=","case","sig","of","L","(","Satisfy","p",")","->","do","input","<-","ParseC","get","case","input","of","c",":","cs","|","p","c","->","c","<$","ctx","<$","ParseC","(","put","cs",")","_","->","empty","R","other","->","ParseC","(","alg","(","runParseC",".","hdl",")","(","R","other",")","ctx",")"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/examples\/Parser.hs#L141-L148","hash_key":"fused-effects\/fused-effects:examples\/Parser.hs","hash_val":61156,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"hot","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"hot = var id >>> onWhen f","function_tokens":["hot","=","var","id",">>>","onWhen","f"],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L294-L294","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"kaizhang\/matrices","sha":"4d85abd72aecce03284c597497fbe6154d8919bd","path":"src\/Data\/Matrix\/Mutable.hs","language":"haskell","identifier":"dim","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"dim = MG.dim","function_tokens":["dim","=","MG","dim"],"url":"https:\/\/github.com\/kaizhang\/matrices\/blob\/4d85abd72aecce03284c597497fbe6154d8919bd\/src\/Data\/Matrix\/Mutable.hs#L27-L27","hash_key":"kaizhang\/matrices:src\/Data\/Matrix\/Mutable.hs","hash_val":64671,"partition":"test"}
{"repo":"schell\/varying","sha":"7de5580d7a590f2e11804fd69047b86926fee270","path":"src\/Control\/Varying\/Event.hs","language":"haskell","identifier":"onlyWhenE","parameters":"v hot","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"onlyWhenE v hot = VarT $ \\a -> do\n    (e, hot') <- runVarT hot a\n    case e of\n      Just _ -> do (b, v') <- runVarT v a\n                   return (Just b, onlyWhenE v' hot')\n      _      ->  return (Nothing, onlyWhenE v hot')\n\n-- | Produce 'Event's of a value stream @v@ only when its input value passes a\n-- predicate @f@.\n-- @v@ maintains state while cold.","function_tokens":["onlyWhenE","v","hot","=","VarT","$","\\","a","->","do","(","e",",","hot'",")","<-","runVarT","hot","a","case","e","of","Just","_","->","do","(","b",",","v'",")","<-","runVarT","v","a","return","(","Just","b",",","onlyWhenE","v'","hot'",")","_","->","return","(","Nothing",",","onlyWhenE","v","hot'",")","-- | Produce 'Event's of a value stream @v@ only when its input value passes a","-- predicate @f@.","-- @v@ maintains state while cold."],"url":"https:\/\/github.com\/schell\/varying\/blob\/7de5580d7a590f2e11804fd69047b86926fee270\/src\/Control\/Varying\/Event.hs#L279-L289","hash_key":"schell\/varying:src\/Control\/Varying\/Event.hs","hash_val":59446,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"rgb","parameters":"r g b","argument_list":"","return_statement":"","docstring":"Specify a color using a RGB triplet where each component is in the range @[0 .. 255]@.  The actual rendered color will depend on the terminal.  If the terminal advertises that it supports 256 colors, the color given to this function will be converted to the nearest color in the 216-color pallet supported by the terminal.  (216 colors because the first 16 are the standard colors and the last 24 are grayscale entries.)  However, if the terminal doesn't support extra colors, or doesn't have a @TERMINFO@ entry (e.g., Windows) then the nearest standard color will be chosen.  Nearest colors are calculated using their CIE distance from one another.  See also:  * <http:\/\/en.wikipedia.org\/wiki\/ANSI_escape_code> * <http:\/\/en.wikipedia.org\/wiki\/Color_difference>  @since 1.0.0.0","docstring_summary":"Specify a color using a RGB triplet where each component is in the range","docstring_tokens":["Specify","a","color","using","a","RGB","triplet","where","each","component","is","in","the","range"],"function":"rgb r g b = ColorRGB (r, g, b)","function_tokens":["rgb","r","g","b","=","ColorRGB","(","r",",","g",",","b",")"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L90-L90","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"kaizhang\/matrices","sha":"4d85abd72aecce03284c597497fbe6154d8919bd","path":"src\/Data\/Matrix\/Mutable.hs","language":"haskell","identifier":"replicate","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"replicate = MG.replicate","function_tokens":["replicate","=","MG","replicate"],"url":"https:\/\/github.com\/kaizhang\/matrices\/blob\/4d85abd72aecce03284c597497fbe6154d8919bd\/src\/Data\/Matrix\/Mutable.hs#L49-L49","hash_key":"kaizhang\/matrices:src\/Data\/Matrix\/Mutable.hs","hash_val":64671,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"white","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"white = ColorCode ANSI.Dull ANSI.White","function_tokens":["white","=","ColorCode","ANSI","Dull","ANSI","White"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L54-L54","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"pjones\/byline","sha":"e975c1d6787acb7019d86cf9e29746796e4a5134","path":"src\/Byline\/Internal\/Color.hs","language":"haskell","identifier":"dull","parameters":"c","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"dull c = c","function_tokens":["dull","c","=","c"],"url":"https:\/\/github.com\/pjones\/byline\/blob\/e975c1d6787acb7019d86cf9e29746796e4a5134\/src\/Byline\/Internal\/Color.hs#L64-L64","hash_key":"pjones\/byline:src\/Byline\/Internal\/Color.hs","hash_val":64415,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"fail","parameters":"","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"fail = lift . Fail.fail","function_tokens":["fail","=","lift",".","Fail","fail"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L111-L111","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
{"repo":"fused-effects\/fused-effects","sha":"36bec2d6c0e97f7e01df97acd15012e1735c28bf","path":"src\/Control\/Carrier\/Empty\/Church.hs","language":"haskell","identifier":"pure","parameters":"a","argument_list":"","return_statement":"","docstring":"","docstring_summary":"","docstring_tokens":[],"function":"pure a = EmptyC $ \\ _ leaf -> leaf a","function_tokens":["pure","a","=","EmptyC","$","\\","_","leaf","->","leaf","a"],"url":"https:\/\/github.com\/fused-effects\/fused-effects\/blob\/36bec2d6c0e97f7e01df97acd15012e1735c28bf\/src\/Control\/Carrier\/Empty\/Church.hs#L83-L83","hash_key":"fused-effects\/fused-effects:src\/Control\/Carrier\/Empty\/Church.hs","hash_val":64167,"partition":"test"}
